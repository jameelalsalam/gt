[{"path":[]},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement rich@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Information and Guidelines for Contributing to gt","title":"Information and Guidelines for Contributing to gt","text":"many ways contribute ongoing development gt package. contributions can rather easy (e.g., fixing typos, improving documentation, filing issues feature requests problems, etc.) whereas contributions can require time patience (like answering questions submitting pull requests code changes). Just know help provided capacity much appreciated. :)","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing Issues","title":"Information and Guidelines for Contributing to gt","text":"believe found bug, create minimal reprex posting gt issue tracker. Try include anything unnecessary, just minimal amount code constitutes reproducible bug. try verify bug running code reprex provided. quality reprex reduce amount back--forth communication trying understand execute code systems.","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":"answering-questions","dir":"","previous_headings":"","what":"Answering questions","title":"Information and Guidelines for Contributing to gt","text":"great way help simply answering questions. ’s amazing little conversation lead better insights problem. Don’t quite know answer? ’s okay . ’re together. might answer user questions? forums Q&gt include RStudio community, Twitter (good search term gt #rstats), Stack Overflow. Good etiquette key interactions: good person ask questions.","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":"making-pull-requests","dir":"","previous_headings":"Answering questions","what":"Making Pull Requests","title":"Information and Guidelines for Contributing to gt","text":"consider making pull request (PR), please file issue first explain problem detail. PR enhancement, detail change make things better package users. Bugfix PRs also requre explanation bug proposed fix remove bug. great way illustrate bug include reprex. upfront work prior preparing PR can time-consuming opens line communication package authors community, perhaps leading better enhancement effective fixes! consensus PR based issue helpful, adhering following process make things proceed quickly: Create separate Git branch PR. Look Travis AppVeyor build status badges making changes; badges available package README. gt package follows tidyverse style guide please adopt style guidelines submitted code best possible. internal documentation uses roxygen2; contribution requires new revised documentation ensure roxygen comments added/modified (modify .Rd files man folder). use testthat code coverage; contributions test cases included helpful easier accept. Add bullet top NEWS.md current development version header describing user-facing changes made; include GitHub username, links relevant issue(s)/PR(s). Ensure signed contributor license agreement. appear “Check” PR comment “CLAassistant” also appear explaining whether yet sign. sign, can click “Recheck” link comment check flip reflect ’ve signed.","code":""},{"path":"https://gt.rstudio.com/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Thank contributing gt! make process easier everyone, please explain context purpose contribution. Also, list changes made existing code documentation.","code":""},{"path":"https://gt.rstudio.com/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-prs","dir":"","previous_headings":"","what":"Related GitHub Issues and PRs","title":"Summary","text":"Ref: #","code":""},{"path":"https://gt.rstudio.com/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"Summary","text":"understand agree Code Conduct. listed major changes NEWS. added testthat unit tests tests/testthat new functionality.","code":""},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"row-groups","dir":"Articles","previous_headings":"","what":"Row Groups","title":"Case Study: gtcars","text":"Let’s use dplyr help make groupings ctry_origin column, provides country origin vehicle manufacturer car. can simply use dplyr::group_by() gtcars dataset pass gt(). get display table arranges cars row groups, name group displayed prominently . Getting row groups preferred order can done easily dplyr’s arrange() function. example, can groups arranged alphabetically manufacturer (mfr) sorted highest sticker price (msrp) lowest. also use factor levels get particular ordering within arrange(). example, can first arrange groups (country origin–ctry_origin) preferred ordering arrange mfr descending msrp . , group_by(ctry_origin) can used sorted tibble passing gt(). last variation combine manufacturer name model name, using combined strings row labels table. just little dplyr can use dplyr::mutate() make new car column followed dplyr::select() remove mfr model columns. introducing tibble gt() function, can now use rowname_col argument specify column serve row labels (newly made car column).","code":"# Use `group_by()` on `gtcars` and pass that to `gt()` gtcars_8 %>%   group_by(ctry_origin) %>%   gt() gtcars_8 %>%   group_by(ctry_origin) %>%   arrange(mfr, desc(msrp)) %>%   gt() # Define our preferred order `ctry_origin` order_countries <- c(\"Germany\", \"Italy\", \"United States\", \"Japan\")  # Reorder the table rows by our specific ordering of groups gtcars_8 %>%   arrange(     factor(ctry_origin, levels = order_countries), mfr, desc(msrp)   ) %>%   group_by(ctry_origin) %>%   gt() # Reorder the table rows by our specific ordering of groups tab <-   gtcars_8 %>%   arrange(     factor(ctry_origin, levels = order_countries),     mfr, desc(msrp)     ) %>%   mutate(car = paste(mfr, model)) %>%   select(-mfr, -model) %>%   group_by(ctry_origin) %>%   gt(rowname_col = \"car\")  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"hiding-and-moving-some-columns","dir":"Articles","previous_headings":"","what":"Hiding and Moving Some Columns","title":"Case Study: gtcars","text":"Let’s hide two columns don’t need final table: drivetrain bdy_style. can use cols_hide() function hide columns. end result might also achieved using gtcars %>% dplyr::select(-c(drivetrain, bdy_style)), introducing table gt(). function ? Sometimes ’ll need variables conditional statements within gt won’t want display end. Aside hiding columns, let’s move . , done dplyr::select() options gt via cols_move_to_start(), cols_move(), cols_move_to_end() functions.","code":"# Use a few `cols_*()` functions to hide and move columns  tab <-    tab %>%   cols_hide(columns = c(drivetrain, bdy_style)) %>%   cols_move(     columns = c(trsmn, mpg_c, mpg_h),     after = trim   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"putting-columns-into-groups","dir":"Articles","previous_headings":"","what":"Putting Columns Into Groups","title":"Case Study: gtcars","text":"’s sometimes useful arrange variables/columns groups using spanner column labels. can done gt using tab_spanner() function. takes label columns arguments; label spanner column label columns columns belong group. , ’ll put mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm columns Performance spanner column, remaining columns won’t grouped together. single spanner column label styled Markdown using md() helper.","code":"# Put the first three columns under a spanner # column with the label 'Performance' tab <-    tab %>%   tab_spanner(     label = \"Performance\",     columns = c(mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm)   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"merging-columns-together-and-labeling-them","dir":"Articles","previous_headings":"","what":"Merging Columns Together and Labeling Them","title":"Case Study: gtcars","text":"Sometimes ’d like combine data two columns single column. cols_merge() function allows us , just need describe data combined. table, let’s merge together following pairs columns: mpg_c mpg_h (miles per gallon city highway driving modes) hp hp_rpm (horsepower associated RPM) trq trq_rpm (torque associated RPM) cols_merge() function uses col_1 column col_2 column. combined, col_1 column retained col_2 column dropped. pattern argument uses {1} {2} represent content col_1 col_2. , can use string literals add text like rpm @ sign. Furthermore, targeting HTML table, can use <br> tag insert linebreak. Labeling columns essentially means choosing display-friendly labels longer simply column names (default label). cols_label() function makes relabeling possible. accepts series named arguments form <column_name> = <column_label>, ....","code":"# Perform three column merges to better present # MPG, HP, and torque; relabel all the remaining # columns for a nicer-looking presentation tab <-    tab %>%   cols_merge(     columns = c(mpg_c, mpg_h),     pattern = \"{1}c<br>{2}h\"     ) %>%   cols_merge(     columns = c(hp, hp_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) %>%   cols_merge(     columns = c(trq, trq_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) %>%   cols_label(     mpg_c = \"MPG\",     hp = \"HP\",     trq = \"Torque\",     year = \"Year\",     trim = \"Trim\",     trsmn = \"Transmission\",     msrp = \"MSRP\"   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"using-formatter-functions","dir":"Articles","previous_headings":"","what":"Using Formatter Functions","title":"Case Study: gtcars","text":"number formatter functions, general naming convention fmt*(). various formatters convenient applying formats numeric character values table’s field. , simply use fmt_currency() msrp column (still refer columns original names) get USD currency decimal places. ’re supplying anything rows argument means want apply formatting entire column data.","code":"# Format the `msrp` column to USD currency # with no display of the currency subunits tab <-    tab %>%   fmt_currency(     columns = msrp,     currency = \"USD\",     decimals = 0   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"column-alignment-and-style-changes","dir":"Articles","previous_headings":"","what":"Column Alignment and Style Changes","title":"Case Study: gtcars","text":"can change alignment data columns cols_align(). table, let’s center-align mpg_c, hp, trq columns. columns maintain default alignments. ’s sometimes useful modify default styles table cells. can targeted way tab_style() function. function require two key pieces information: style definition, one locations (cells styles applied ?). style argument commonly uses cells_styles() helper function, contains arguments styles supported (use ?cells_styles information ). use text size 12px targeted cells—px(12) \"12px\" work equally well . also use helper functions locations argument cells_*() functions. like target data cells columns except year msrp need use cells_body supply target columns columns argument.","code":"# Center-align three columns in the gt table # and modify the text size of a few columns # of data tab <-    tab %>%   cols_align(     align = \"center\",     columns = c(mpg_c, hp, trq)   ) %>%   tab_style(     style = cell_text(size = px(12)),     locations = cells_body(       columns = c(trim, trsmn, mpg_c, hp, trq)     )   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"text-transforms","dir":"Articles","previous_headings":"","what":"Text Transforms","title":"Case Study: gtcars","text":"text transform via text_transform() function great way manipulate text data cells (even ’ve formatted fmt*() function). targeting data cells cells_body() location helper function, supply function fn argument processes vector text. intend render HTML table, can directly apply HTML tags transformation function. function provide build strings read better display table.","code":"# Transform the column of text in `trsmn` using # a custom function within `text_transform()`; # here `x` represents a character vector defined # in the `cells_body()` function tab <-    tab %>%   text_transform(     locations = cells_body(columns = trsmn),     fn = function(x) {              # The first character of `x` always       # indicates the number of transmission speeds       speed <- substr(x, 1, 1)              # We can carefully determine which transmission       # type we have in `x` with a `dplyr::case_when()`       # statement       type <-         dplyr::case_when(           substr(x, 2, 3) == \"am\" ~ \"Automatic/Manual\",           substr(x, 2, 2) == \"m\" ~ \"Manual\",           substr(x, 2, 2) == \"a\" ~ \"Automatic\",           substr(x, 2, 3) == \"dd\" ~ \"Direct Drive\"         )              # Let's paste together the `speed` and `type`       # vectors to create HTML text replacing `x`       paste(speed, \" Speed<br><em>\", type, \"<\/em>\")     }   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"table-header-title-and-subtitle","dir":"Articles","previous_headings":"","what":"Table Header: Title and Subtitle","title":"Case Study: gtcars","text":"tab_header() function allows us place table title , optionally, subtitle top display table. ’s generally good idea table, subtitle provides additional information (though isn’t quite case example ).","code":"# Add a table title and subtitle; we can use # markdown with the `md()` helper function tab <-    tab %>%   tab_header(     title = md(\"The Cars of **gtcars**\"),     subtitle = \"These are some fine automobiles\"   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"adding-a-source-citation","dir":"Articles","previous_headings":"","what":"Adding a Source Citation","title":"Case Study: gtcars","text":"source note can added display table using tab_source_note() function. can even add multiple source notes multiple calls function. , supply web URL using Markdown (md()) ’s easy create link source data.","code":"# Add a source note to the bottom of the table; this # appears below the footnotes tab <-    tab %>%   tab_source_note(     source_note = md(       \"Source: Various pages within the Edmonds website.\"     )   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"using-the-complete-gtcars-table-and-adding-footnotes","dir":"Articles","previous_headings":"","what":"Using the Complete gtcars table and Adding Footnotes","title":"Case Study: gtcars","text":"Let’s bring together putting together statements developed gtcars_8, applying complete gtcars dataset. time, ’ll add interesting footnotes specific requirements footnoting : tab_footnote() function expects note text footnote argument, locations footnote mark attached. handle placement footnote mark also place footnote footnotes area. , ’ll use cells_body() location helper function. several location helper functions targeting parts table (e.g,. cells_body(), cells_stub(), etc.). location helper interface targeting cells refer documentation examples work practice. cells_body() expects columns (column names, can conveniently provided c()) rows (can vector row names row indices). cells_stub() location helper expects vector rows. cells_column_labels(), can either provided targeted column labels columns argument spanner column labels groups argument. , targeting footnote msrp column label use columns = msrp. terms structuring code, ’re taking previous statements putting first. noted order statements matter end result, also put tab_footnote() statements first (, order) expect output table. . final table looks pretty good conveys additional information planned . table can used lot different places like R Markdown, Shiny, email messages… wherever HTML accepted.","code":"a. identifying the car with the best gas mileage (city) b. identifying the car with the highest horsepower c. stating the currency of the MSRP # Use dplyr functions to get the car with the best city gas mileage; # this will be used to target the correct cell for a footnote best_gas_mileage_city <-    gtcars %>%    arrange(desc(mpg_c)) %>%   slice(1) %>%   mutate(car = paste(mfr, model)) %>%   pull(car)  # Use dplyr functions to get the car with the highest horsepower # this will be used to target the correct cell for a footnote highest_horsepower <-    gtcars %>%    arrange(desc(hp)) %>%   slice(1) %>%   mutate(car = paste(mfr, model)) %>%   pull(car)  # Create a display table with `gtcars`, using all of the previous # statements piped together + additional `tab_footnote()` stmts tab <-   gtcars %>%   arrange(     factor(ctry_origin, levels = order_countries),     mfr, desc(msrp)   ) %>%   mutate(car = paste(mfr, model)) %>%   select(-mfr, -model) %>%   group_by(ctry_origin) %>%   gt(rowname_col = \"car\") %>%   cols_hide(columns = c(drivetrain, bdy_style)) %>%   cols_move(     columns = c(trsmn, mpg_c, mpg_h),     after = trim   ) %>%   tab_spanner(     label = \"Performance\",     columns = c(mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm)   ) %>%   cols_merge(     columns = c(mpg_c, mpg_h),     pattern = \"{1}c<br>{2}h\"   ) %>%   cols_merge(     columns = c(hp, hp_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) %>%   cols_merge(     columns = c(trq, trq_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) %>%   cols_label(     mpg_c = \"MPG\",     hp = \"HP\",     trq = \"Torque\",     year = \"Year\",     trim = \"Trim\",     trsmn = \"Transmission\",     msrp = \"MSRP\"   ) %>%   fmt_currency(     columns = msrp,     currency = \"USD\",     decimals = 0   ) %>%   cols_align(     align = \"center\",     columns = c(mpg_c, hp, trq)   ) %>%   tab_style(     style = cell_text(size = px(12)),     locations = cells_body(       columns = c(trim, trsmn, mpg_c, hp, trq)     )   ) %>%   text_transform(     locations = cells_body(columns = trsmn),     fn = function(x) {              speed <- substr(x, 1, 1)              type <-         dplyr::case_when(           substr(x, 2, 3) == \"am\" ~ \"Automatic/Manual\",           substr(x, 2, 2) == \"m\" ~ \"Manual\",           substr(x, 2, 2) == \"a\" ~ \"Automatic\",           substr(x, 2, 3) == \"dd\" ~ \"Direct Drive\"         )              paste(speed, \" Speed<br><em>\", type, \"<\/em>\")     }   ) %>%   tab_header(     title = md(\"The Cars of **gtcars**\"),     subtitle = \"These are some fine automobiles\"   ) %>%   tab_source_note(     source_note = md(       \"Source: Various pages within the Edmonds website.\")   ) %>%   tab_footnote(     footnote = md(\"Best gas mileage (city) of all the **gtcars**.\"),     locations = cells_body(       columns = mpg_c,       rows = best_gas_mileage_city     )   ) %>%   tab_footnote(     footnote = md(\"The highest horsepower of all the **gtcars**.\"),     locations = cells_body(       columns = hp,       rows = highest_horsepower     )   ) %>%   tab_footnote(     footnote = \"All prices in U.S. dollars (USD).\",     locations = cells_column_labels(columns = msrp)   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"preparing-the-input-data-table","dir":"Articles","previous_headings":"","what":"Preparing the Input Data Table","title":"Creating Summary Lines","text":"Let’s use exibble dataset (included gt package) demonstrate summary rows can added. table contains categorical columns named row group, along several columns varying data types. preview exibble dataset using solely gt() function options: ’ll create table stub row labels (using row column) row groups (using group column). end result table organized labeled rows grouped together (row group labels identify row groups). make examples bit easier follow, columns exibble first dropped dplyr::select() statement. two groups data table: grp_a grp_b. gives us flexibility create grand summary groupwise summary rows.","code":"exibble %>% gt() # Create a gt table using the `exibble` dataset exibble_a <-   exibble %>%   select(-c(fctr, date, time, datetime)) %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   sub_missing()  exibble_a"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"generating-groupwise-summary-rows","dir":"Articles","previous_headings":"","what":"Generating Groupwise Summary Rows","title":"Creating Summary Lines","text":"Groupwise summary rows can generated using summary_rows() function , importantly, specifying groups receive summary rows. can provide vector group names, c(\"grp_a\", \"grp_b\"), , use TRUE signify groups receive summary rows. Aside selection groups, control columns used summary. Since call summary_rows() performs one set aggregation functions, may want specific aggregations different subsets columns. make sort summary, need use functions perform aggregation. can provide base functions mean(), sum(), min(), max(), , within list(). function provided result summary row group. function yield row, need able label row. , summary row receive summary row label. can provide preferred names naming functions within list (e.g, list(average = \"mean\", total = \"sum\", SD = \"sd\")). can specify aggregation functions use function names quotes (e.g., \"sum\"), bare functions (e.g., sum), one-sided R formulas using leading ~. formula representation, . serves data summarized, can use sum(., na.rm = TRUE). use named arguments recommended names serve summary row labels (labels can derived function names providing bare function names). Now summary_rows() function somewhat explained, let’s look can create groupwise summary rows exibble_a table. ’ll create summaries available groups (groups = TRUE) use mean(), sum(), sd() functions function-name--quotes method (pertain num column). previous example NA value num/row_6 cell, get NA outputs mean(), sum(), sd() grp_b’s summary rows (replaced em dashes, controllable missing_text option). avoid , let’s rewrite using names--formulae method. see summary rows created groups. However, output summary row data quite different cell data. formatter argument (extra ... arguments) allows use fmt_*() functions ’d normally use format cell data. example (another rewrite ), cell data num column formatted scientific notation resulting summary cell data also formatted way (including options decimals = 3). input fns permissive regard functions defined. entirely valid provide functions various forms shown earlier list(\"sum\", avg = ~mean(., na.rm = TRUE), SD = \"sd\") correctly interpreted. recommended use formula notation. default formatter set fmt_number sensible default many scenarios. setting argument values particular formatter can done ... area function call (done decimals argument).","code":"# Create groupwise summary rows for both # groups (using `groups = TRUE`); use the # `mean()`, `sum()`, and `sd()` functions # (only for the `num` column) exibble_b <-    exibble_a %>%   summary_rows(     groups = TRUE,     columns = num,     fns = list(       average = \"mean\",       total = \"sum\",       SD = \"sd\")   )  exibble_b # Create groupwise summary rows for both # groups (using `groups = TRUE`); we will # use names and formulas this time in `fns` exibble_c <-    exibble_a %>%   summary_rows(     groups = TRUE,     columns = num,     fns = list(       avg = ~mean(., na.rm = TRUE),       total = ~sum(., na.rm = TRUE),       s.d. = ~sd(., na.rm = TRUE)     )   )  exibble_c # Define a named list of aggregation # functions and summary row labels fns_labels <-    list(     avg = ~mean(., na.rm = TRUE),     total = ~sum(., na.rm = TRUE),     s.d. = ~sd(., na.rm = TRUE)   )  # Create groupwise summary rows as # before, supply `fns_labels` to `fns`, # and format the cell summary data exibble_d <-    exibble_a %>%   fmt_scientific(     columns = num,     decimals = 3   ) %>%   summary_rows(     groups = TRUE,     columns = num,     fns = fns_labels,     formatter = fmt_scientific,     decimals = 3   )  exibble_d"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"using-multiple-calls-of-summary_rows","dir":"Articles","previous_headings":"","what":"Using Multiple Calls of summary_rows()","title":"Creating Summary Lines","text":"can re-use summary row labels fill otherwise empty summary cells similar aggregations perhaps different formatting options. ’s example currency column contains aggregate values share summary rows num column, adds two rows, uses currency formatting: thing note example even though two independent calls summary_rows() made, summary data within common summary row names ‘squashed’ together, thus avoiding fragmentation summary rows. Put another way, don’t create additional summary rows across separate calls referencing summary row labels. summary row labels provided fns different across columns however, additional summary rows produced even types data aggregations functionally equivalent. can also store argument values local variables pass separate fmt_*number*() calls also arguments within summary_rows() calls. useful standardizing formatting parameters across different table cell types. ’s example , additional passes fr_BE locale functions take locale value. Passing parameters like useful, especially larger numbers columns. store formatting parameters outside gt() pipeline, separate concerns data structuring data formatting. Putting styles options objects becomes important intend centralize formatting options reuse.","code":"# Create groupwise summary rows as # before, supply `fns_labels` to `fns`, # and format the cell summary data exibble_e <-    exibble_a %>%   fmt_scientific(     columns = num,     decimals = 3   ) %>%   fmt_currency(     columns = currency,     currency = \"EUR\"     ) %>%   summary_rows(     groups = TRUE,     columns = num,     fns = fns_labels,     formatter = fmt_scientific,     decimals = 3   ) %>%   summary_rows(     groups = \"grp_a\",     columns = currency,     fns = c(       fns_labels,       min = ~min(.),       max = ~max(.)),     formatter = fmt_currency,     currency = \"EUR\"   )  exibble_e # Provide common formatting parameters to a list # object named `formats`; the number of decimal # places will be `2` and the locale is \"fr_BE\" formats <-    list(     decimals = 3,     locale = \"fr_BE\",     currency = \"EUR\"   )  # Format the `num` and `currency` columns # (using the values stored in `formats`); # when generating summary rows we can also # supply formatter options from this list exibble_f <-    exibble_a %>%   fmt_scientific(     columns = num,     decimals = formats$decimals,     locale = formats$locale   ) %>%   fmt_currency(     columns = currency,     currency = formats$currency,     locale = formats$locale   ) %>%   summary_rows(     groups = TRUE,     columns = num,     fns = fns_labels,     formatter = fmt_scientific,     decimals = formats$decimals,     locale = formats$locale   ) %>%   summary_rows(     groups = \"grp_a\",     columns = currency,     fns = c(       fns_labels,       min = ~min(.),       max = ~max(.)     ),     formatter = fmt_currency,     currency = formats$currency,     locale = formats$locale   )  exibble_f"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"creating-a-grand-summary","dir":"Articles","previous_headings":"","what":"Creating a Grand Summary","title":"Creating Summary Lines","text":"grand summary aggregates column data regardless groups within data. Grand summaries can also created gt tables don’t row groups, , don’t stub. Finally, can create table groupwise summaries grand summary. Let’s keep simple create grand summary rows table without stub. ’ll use exibble dataset . exibble columns select()ed, passed gt(), grand_summary_rows(). Notice , resulting table, stub created just summary row labels (go somewhere). grand summary can used conjunction groupwise summaries. ’s table types summaries present: Note grand summary double line separating groupwise summary ’s part grp_b. default styling appears subtle, can elect add styling groupwise summaries grand summary using tab_options().","code":"# Create a simple grand summary on a gt # table that contains no stub exibble_g <-   exibble %>%   select(num, char, currency) %>%   gt() %>%   grand_summary_rows(     columns = c(num, currency),     fns = fns_labels   )  exibble_g # Using the table in `exibble_f`, create # grand summary rows (using two separate # calls of `grand_summary_rows()` since # the formatting will be different) exibble_h <-    exibble_f %>%   grand_summary_rows(     columns = num,     fns = fns_labels,     formatter = fmt_number,     suffixing = TRUE,     locale = formats$locale   ) %>%   grand_summary_rows(     columns = currency,     fns = fns_labels,     formatter = fmt_currency,     suffixing = TRUE,     locale = formats$locale   )  exibble_h"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"adding-some-style-to-the-summary-cells","dir":"Articles","previous_headings":"","what":"Adding Some Style to the Summary Cells","title":"Creating Summary Lines","text":"summary cells (groupwise grand) distinct appearance sets apart data cells, ’s always option modify appearance. can use tab_options() function perform customizations. options specific summary cells (groupwise summaries) grand summary cells: summary_row.background.color & grand_summary_row.background.color summary_row.padding & grand_summary_row.padding summary_row.text_transform & grand_summary_row.text_transform can also target summary cells grand summary cells location helper functions cells_summary() cells_grand_summary(). important adding footnotes tab_footnote() setting styles tab_style() (locations argument). example uses multiple calls tab_options() tab_footnote(). cell background color types summary cells modified two footnotes added.","code":"# Using the gt table of `exibble_h` as a # starting point, style summary cells with # `tab_options()` and add two footnotes exibble_i <-    exibble_h %>%   tab_options(     summary_row.background.color = \"lightblue\",     grand_summary_row.background.color = \"lightgreen\"   ) %>%   tab_footnote(     footnote = md(\"Mean of all *num* values.\"),     locations = cells_grand_summary(       columns = \"num\", rows = \"avg\"     )   ) %>%   tab_footnote(     footnote = md(\"Highest `currency` value in **grp_a**\"),     locations = cells_summary(       groups = \"grp_a\",       columns = \"currency\",       rows = \"max\"     )   )  exibble_i"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"extracting-the-summary-data-from-the-gt-table-object","dir":"Articles","previous_headings":"","what":"Extracting the Summary Data from the gt Table Object","title":"Creating Summary Lines","text":"reproducible workflow, want situations data created modified accessed. summarized values created gt pipeline presents advantages readability intent analysis, recognized output table essentially ‘read ’, input data undergoes processing movement entirely different format. However, object created still contains data can obtain summary data gt table object using extract_summary() function. Taking gt_summary object, get list tibbles containing summary data preserving correct data types: output tibbles within list always contain groupname rowname columns. groupname column filled name row group given summary_rows(). rowname column contains descriptive stub labels summary rows (recall values either supplied explicitly summary_rows(), , generated function names). remaining columns original dataset. output data extract_summary() can reintroduced reproducible workflow serve downstream inputs undergo validation. Perhaps interestingly, output tibbles structured way facilitates direct input back gt() (.e., magic groupname rowname columns). can produce new, standalone summary table summary rows now data rows:","code":"# Extract the summary data from `exibble_d` # to a list  object summary_list <- exibble_d %>% extract_summary() # Print out the summary for the `grp_a` group summary_list %>% .$summary_df_data_list %>% .$grp_a #> # A tibble: 3 × 7 #>   group_id rowname   num  char currency   row group #>   <chr>    <chr>   <dbl> <dbl>    <dbl> <dbl> <dbl> #> 1 grp_a    avg      120.    NA       NA    NA    NA #> 2 grp_a    total    480.    NA       NA    NA    NA #> 3 grp_a    s.d.     217.    NA       NA    NA    NA # Print out the summary for the `grp_b` group summary_list %>% .$summary_df_data_list %>% .$grp_b #> # A tibble: 3 × 7 #>   group_id rowname      num  char currency   row group #>   <chr>    <chr>      <dbl> <dbl>    <dbl> <dbl> <dbl> #> 1 grp_b    avg     3220850     NA       NA    NA    NA #> 2 grp_b    total   9662550     NA       NA    NA    NA #> 3 grp_b    s.d.    4916123.    NA       NA    NA    NA # Take `exibble_d`, which internally has a list # of summary data frames, extract the summaries, # and then combine them; input that into `gt()`, # and format the `num` column with `fmt_number()` exibble_d %>%   extract_summary() %>%   unlist(recursive = FALSE) %>%   bind_rows() %>%   gt() %>%   fmt_number(     columns = num,     decimals = 1   ) %>%   sub_missing(columns = c(char, currency, row, group))"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"providing-our-own-aggregation-functions-to-generate-summary-rows","dir":"Articles","previous_headings":"","what":"Providing Our Own Aggregation Functions to Generate Summary Rows","title":"Creating Summary Lines","text":"many functions available base R within packages useful aggregate functions, may occasionally need create custom functions. taking approach main things keep mind vector values main input, , single value returned. return value can pretty much class (e.g., numeric, character, logical) ’s formatter function handle custom formatting also converting character. , ’ll define function takes vector numeric values outputs two highest values (sorted low high) threshold value. output function always formatted character string. character value ’s returned, don’t need formatting functions like fmt_number(), fmt_percent(), etc. However, useful formatter (need formatter) fmt_passthrough() function. Like name suggests, great extent passes values formats character (like fmt_*() function ) provides option decorate output pattern. Let’s look agg_highest_two_above_value() function can used fmt_passthrough() formatter function. can extract grand summary data exibble_j object. Note columns num currency classed character since character outputs generated agg_highest_two_above_value() function.","code":"# Define a function that gives the # highest two values above a threshold agg_highest_two_above_value <- function(x, threshold) {      # Get sorted values above threshold value   values <- sort(round(x[x >= threshold], 2))      # Return character string with 2 highest values above threshold   if (length(values) == 0) {     return(paste0(\"No values above \", threshold))   } else {     return(       paste(         formatC(           tail(             sort(round(x[x > threshold], 2)), 2),           format = \"f\", digits = 2), collapse = \", \"))   } }  # Let's test this function with some values agg_highest_two_above_value(   x = c(0.73, 0.93, 0.75, 0.86, 0.23, 0.81),   threshold = 0.8 ) #> [1] \"0.86, 0.93\" # Create a gt table with `exibble_a` and use # the custom function with a threshold of `20`; # the `fmt_passthrough` funtion allows for # minimal formatting of the aggregate values exibble_j <-    exibble_a %>%   grand_summary_rows(     columns = c(num, currency),     fns = list(       high = ~ agg_highest_two_above_value(., 20)),     formatter = fmt_passthrough,     pattern = \"({x})\"   )  exibble_j # Extract the summary list from `exibble_j` # and inspect using `str()` exibble_j %>%   extract_summary() %>%   str() #> List of 1 #>  $ summary_df_data_list:List of 1 #>   ..$ ::GRAND_SUMMARY: tibble [1 × 7] (S3: tbl_df/tbl/data.frame) #>   .. ..$ group_id: chr \"::GRAND_SUMMARY\" #>   .. ..$ rowname : chr \"high\" #>   .. ..$ num     : chr \"777000.00, 8880000.00\" #>   .. ..$ char    : num NA #>   .. ..$ currency: chr \"1325.81, 65100.00\" #>   .. ..$ row     : num NA #>   .. ..$ group   : num NA"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"countrypops","dir":"Articles","previous_headings":"","what":"countrypops","title":"gt Datasets","text":"dataset provides total populations 215 countries yearly basis, 1960 2017. source data comes World Bank, cleaned tidied inclusion package. row contains population value country given year, NA values population indicate country exist particular year. countrypops dataset tibble 12,470 rows 5 variables. explanations variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"a-countrypops-example","dir":"Articles","previous_headings":"countrypops","what":"A countrypops Example","title":"gt Datasets","text":"table ’ll create countrypops meet requirements: use countries Oceania countries different regions Oceania grouped together provide populations 1995, 2005, 2015 years ; appear separate columns spanner group column stating columns refer population values format population figures contain commas provide descriptive title","code":"# Get vectors of 2-letter country codes for # each region of Oceania Australasia <- c(\"AU\", \"NZ\") Melanesia <- c(\"NC\", \"PG\", \"SB\", \"VU\") Micronesia <- c(\"FM\", \"GU\", \"KI\", \"MH\", \"MP\", \"NR\", \"PW\") Polynesia <- c(\"PF\", \"WS\", \"TO\", \"TV\")  # Create a gt table based on a preprocessed `countrypops` countrypops %>%   filter(country_code_2 %in% c(     Australasia, Melanesia, Micronesia, Polynesia)   ) %>%   filter(year %in% c(1995, 2005, 2015)) %>%   mutate(region = case_when(     country_code_2 %in% Australasia ~ \"Australasia\",     country_code_2 %in% Melanesia ~ \"Melanesia\",     country_code_2 %in% Micronesia ~ \"Micronesia\",     country_code_2 %in% Polynesia ~ \"Polynesia\",   )) %>%   pivot_wider(names_from = year, values_from = population) %>%   arrange(region, desc(`2015`)) %>%   select(-starts_with(\"country_code\")) %>%   gt(     rowname_col = \"country_name\",     groupname_col = \"region\"   ) %>%   tab_header(title = \"Populations of Oceania's Countries in 1995, 2005, and 2015\") %>%   tab_spanner(     label = \"Total Population\",     columns = c(`1995`, `2005`, `2015`)   ) %>%   fmt_number(     columns = c(`1995`, `2005`, `2015`),     decimals = 0,     use_seps = TRUE   )"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"sza","dir":"Articles","previous_headings":"","what":"sza","title":"gt Datasets","text":"solar zenith angle one measure solar position. can thought ‘height’ sun relation observer. solar zenith angle 0° indicates sun directly overhead (different solar angle, solar altitude angle, 90° instance). sun horizontal (e.g., sunrise/sunset) observe solar zenith angle around 90° (matter atmospheric refraction). nighttime, solar zenith angles range 90–180 possible (, depending location observer). sza dataset calculated values solar zenith angles every 30 minutes 04:00 12:00 (true solar time). Temporally, calculations 1st every month year. Spatially, observer located somewhere along latitudes 20°N, 30°N, 40°N, 50°N (using true solar time, longitude unimportant). quite extensive topic, information can found using ?sza R console visiting page. sza dataset tibble 816 rows 4 variables. explanations variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"an-sza-example","dir":"Articles","previous_headings":"sza","what":"An sza Example","title":"gt Datasets","text":"table ’ll create sza meet requirements: filter data just use 20°N data remove latitude column NA values sza column removed reshape table columns tst (true solar time) contain angles degrees (sza column) gt output table months row labels stub missing values replaced empty string (cells blank) stubhead label state ’s inside stubs (months, 20°N) table heading decorated HTML Black Sun Rays (&#x2600;) symbol fit large amount data small area, use table options reduce text size row padding","code":"# Create a gt table based on a preprocessed `sza` sza %>%   filter(latitude == 20) %>%   select(-latitude) %>%   filter(!is.na(sza)) %>%   pivot_wider(names_from = \"tst\", values_from = sza) %>%   gt(rowname_col = \"month\") %>%   sub_missing(missing_text = \"\") %>%   tab_stubhead(label = html(\"month<br>(20&deg;N)\")) %>%   tab_header(title = html(\"&#x2600; Solar Zenith Angles &#x2600;\")) %>%   tab_options(     column_labels.font.size = \"smaller\",     table.font.size = \"smaller\",     data_row.padding = px(3)   )"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"gtcars","dir":"Articles","previous_headings":"","what":"gtcars","title":"gt Datasets","text":"gtcars dataset takes mtcars left . contains 47 cars 2014-2017 model years. Many gtcars vehicles grand tourers. Indeed, many provide ability cross entire continent speed comfort yet, ’s called , allow experience driving thrills. chassis suspension cases top-notch supply superb handling roadholding routes one conceivably encounter grand touring experience. two plus two (2 + 2) seating configuration smartly designed deliver comfort driver passenger, adequate space luggage, room spare. gtcars dataset tibble 47 rows 15 variables. explanations variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"a-gtcars-example","dir":"Articles","previous_headings":"gtcars","what":"A gtcars Example","title":"gt Datasets","text":"table ’ll create gtcars meet requirements: include German cars limit dataset top two expensive offerings German manufacturer information included manufacturer (mfr), car model (model), drivetrain, price (msrp) add table title combine car make model single column capitalize drivetrain text format prices USD currency commas decimal places shown relabel column headings provide nicer labels add two footnotes explain drivetrain abbreviations state currency msrp prices; ensure footnote marks lowercase letters","code":"# Create a gt table based on a preprocessed `gtcars` gtcars %>%   filter(ctry_origin == \"Germany\") %>%   group_by(mfr) %>%   top_n(n = 2, msrp) %>%   ungroup() %>%   select(mfr, model, drivetrain, msrp) %>%   gt() %>%   tab_header(title = \"Select German Automobiles\") %>%   cols_merge(     columns = c(mfr, model)   ) %>%   text_transform(     locations = cells_body(columns = drivetrain),     fn = function(x) toupper(x)   ) %>%   fmt_currency(     columns = msrp,     currency = \"USD\",     decimals = 0   ) %>%   cols_label(     mfr = \"Car\",     drivetrain = \"Drivetrain\",     msrp = \"MSRP\"   ) %>%   tab_footnote(     footnote = \"Prices in USD.\",     locations = cells_column_labels(columns = msrp)   ) %>%   tab_footnote(     footnote = \"AWD = All Wheel Drive, RWD = Rear Wheel Drive.\",     locations = cells_column_labels(columns = drivetrain)   ) %>%   opt_footnote_marks(marks = \"letters\")"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"sp500","dir":"Articles","previous_headings":"","what":"sp500","title":"gt Datasets","text":"S&P 500 capitalization-weighted index 500 leading companies (bigger companies influence within index) common stock listed either NYSE NASDAQ markets. companies chosen intended provide representation U.S. economy. index managed list (managed S&P Dow Jones Indices LLC) occasional changes constituent companies based performance changes economy. daily S&P 500 data available sp500 dataset, daily indicators (price statistics, volume, etc.) 1950 2015, inclusive. 16,607 rows dataset, 7 variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"an-sp500-example","dir":"Articles","previous_headings":"sp500","what":"An sp500 Example","title":"gt Datasets","text":"table ’ll create sp500 meet requirements: use data period 2010-06-02 2010-06-15 adjusted close adj_close column won’t included title subtitle added describe contents table put column labels title case format date column appear ‘2 Jun 2010’ price columns (open, high, low, close) appear USD large numbers volume shown billions (B suffix) - -pointing triangles (green red) added alongside close price appropriate","code":"# Define the start and end dates for the data range start_date <- \"2010-06-02\" end_date <- \"2010-06-15\"  # The HTML decimal references for the black # up- and down-pointing triangles are: #9650 and #9660; # use an in-line style to apply color up_arrow <- \"<span style=\\\"color:green\\\">&#9650;<\/span>\" down_arrow <- \"<span style=\\\"color:red\\\">&#9660;<\/span>\"  # Create a gt table based on a preprocessed `sp500` sp500 %>%   filter(date >= start_date & date <= end_date) %>%   select(-adj_close) %>%   gt() %>%   tab_header(     title = \"S&P 500\",     subtitle = glue::glue(\"{start_date} to {end_date}\")   ) %>%   fmt_date(     columns = date,     date_style = 7   ) %>%   fmt_currency(     columns = c(open, high, low, close),     currency = \"USD\"   ) %>%   fmt_number(     columns = volume,     scale_by = 1 / 1E9,     pattern = \"{x}B\"   ) %>%   text_transform(     locations = cells_body(       columns = close,       rows = close > open),     fn = function(x) paste(x, up_arrow)   ) %>%   text_transform(     locations = cells_body(       columns = close,       rows = close < open),     fn = function(x) paste(x, down_arrow)   ) %>%   cols_label(     date = \"Date\", open = \"Open\", high = \"High\",     low = \"Low\", close = \"Close\", volume = \"Volume\"   )"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"pizzaplace","dir":"Articles","previous_headings":"","what":"pizzaplace","title":"gt Datasets","text":"pizzaplace dataset unusual say least. brings questions answers. ‘Greek’ pizza (the_greek) comes XL XXL sizes whilst (almost) pizzas adhere S-M-L paradigm? ‘Brie Carre’ pizza (brie_carre) small? Also, real (?), , nature reality? (questions quite complicated… however, can doubt existence material world, doubt existence someone thinking delicious pizzas offer pizzaplace.) somehow obtained 2015 sales pizzaplace, row pizza sold. 32 different types pizza 4 different categories: classic, chicken, supreme, veggie. great year sales, personal problems notwithstanding. kitchen fire late September help morale situation. Nevertheless, $817,860 sales year! indeed something cheerful . Let’s learn fascinating dataset structured:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"a-pizzaplace-example","dir":"Articles","previous_headings":"pizzaplace","what":"A pizzaplace Example","title":"gt Datasets","text":"Let’s make reporting table pizzaplace dataset requirements: obtain total sale numbers revenue size pizza category (type) create gt table row represents combination size-type (size provides row labels type forms row groups) add title explain contents table format numeric sold column use commas decimal places format currency values (income) USD currency add summary grouping provides total sell counts revenue amounts color row groups summary cells add little pizzazz","code":"# Create a gt table based on a preprocessed `pizzaplace` pizzaplace %>%   dplyr::group_by(type, size) %>%   dplyr::summarize(     sold = n(),     income = sum(price),     .groups = \"drop_last\"   ) %>%   gt(rowname_col = \"size\") %>%   tab_header(title = \"Pizzas Sold in 2015\") %>%   fmt_number(     columns = sold,     decimals = 0,     use_seps = TRUE   ) %>%   fmt_currency(     columns = income,     currency = \"USD\"   ) %>%   summary_rows(     groups = TRUE,     columns = sold,     fns = list(TOTAL = \"sum\"),     formatter = fmt_number,     decimals = 0,     use_seps = TRUE   ) %>%   summary_rows(     groups = TRUE,     columns = income,     fns = list(TOTAL = \"sum\"),     formatter = fmt_currency,     currency = \"USD\"   ) %>%   tab_options(     summary_row.background.color = \"#ACEACE\",     row_group.background.color = \"#FFEFDB\"   )"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"exibble","dir":"Articles","previous_headings":"","what":"exibble","title":"gt Datasets","text":"example tibble ’s useful gt called exibble. ’s 8 rows, clear ordering data, columns contain data can tested various gt formatter functions (fmt*()). table describing columns exibble:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"an-exibble-example","dir":"Articles","previous_headings":"exibble","what":"An exibble Example","title":"gt Datasets","text":"Let’s test many formatter functions possible exibble also using row labels row groups (furnished row group columns). ’ll format num display numbers 2 decimal places. dates date formatted date_style 6 (m_day_year style, use info_date_style() learn ). 24-h time values time use time_style 4 (hm_p, info info_time_style()). Datetimes datetime column can formatted fmt_datetime() function (uses date_style time_style arguments). column currency formatted currency fmt_currency ’ll consider values euros (currency = \"EUR\").","code":"# Create a gt table based on `exibble` exibble %>%   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) %>%   fmt_number(     columns = num,     decimals = 2   ) %>%   fmt_date(     columns = date,     date_style = 6   ) %>%   fmt_time(     columns = time,     time_style = 4   ) %>%   fmt_datetime(     columns = datetime,     date_style = 6,     time_style = 4   ) %>%   fmt_currency(     columns = currency,     currency = \"EUR\"   ) %>%   tab_options(     column_labels.font.size = \"small\",     table.font.size = \"small\",     row_group.font.size = \"small\",     data_row.padding = px(3)   )"},{"path":"https://gt.rstudio.com/articles/intro-creating-gt-tables.html","id":"a-walkthrough-of-the-gt-basics-with-a-simple-table","dir":"Articles","previous_headings":"","what":"A Walkthrough of the gt Basics with a Simple Table","title":"Introduction to Creating gt Tables","text":"Let’s use less common dataset available R datasets package: islands. ’s actually data frame named vector. ’s okay though, can use use dplyr prepare tibble : Given islands_tbl tibble, now suitable input gt. main entry point gt API gt() function. pass islands_tbl function gt(), ’ll get gt Table output. aside, easily used data frame instead valid Table Data gt. doesn’t look bad. Sure, ’s basic really didn’t really ask much. receive proper table column labels data. Also, default striping nice touch. Oftentimes however, ’ll want bit : Table header, Stub, sometimes footnotes source notes Table Footer part.","code":"# Take the `islands` dataset and use some # dplyr functionality to obtain the ten # biggest islands in the world islands_tbl <-    tibble(     name = names(islands),     size = islands   ) %>%   arrange(desc(size)) %>%   slice(1:10)  # Display the table islands_tbl #> # A tibble: 10 × 2 #>    name           size #>    <chr>         <dbl> #>  1 Asia          16988 #>  2 Africa        11506 #>  3 North America  9390 #>  4 South America  6795 #>  5 Antarctica     5500 #>  6 Europe         3745 #>  7 Australia      2968 #>  8 Greenland       840 #>  9 New Guinea      306 #> 10 Borneo          280 # Create a display table showing ten of # the largest islands in the world gt_tbl <- gt(islands_tbl)  # Show the gt Table gt_tbl"},{"path":"https://gt.rstudio.com/articles/intro-creating-gt-tables.html","id":"adding-parts-to-this-simple-table","dir":"Articles","previous_headings":"","what":"Adding Parts to this Simple Table","title":"Introduction to Creating gt Tables","text":"gt package makes relatively easy add parts resulting gt Table better conveys information want present. table parts work well together possible variations arrangement can handle tabular presentation needs. previous gt Table demonstrated two parts, Column Labels Table Body. next examples show table parts available. way main parts table (subparts) fit together:  parts (roughly top bottom) : Table Header (optional; title possibly subtitle) Stub Stub Head (optional; contains row labels, optionally within row groups row group labels possibly summary labels summary present) Column Labels (contains column labels, optionally spanner column labels) Table Body (contains columns rows cells) Table Footer (optional; possibly footnotes source notes) way add parts like Table Header footnotes Table Footer use tab_*() family functions. Table Header easy add let’s see previous table looks title subtitle. can add part using tab_header() function: Header table part provides opportunity describe data ’s presented. subtitle, functions subtitle, optional part Header. may also style title subtitle using Markdown! wrapping values passed title subtitle md() function. example table data truncated brevity: source note can added table’s footer use tab_source_note() function. works way tab_header() (also allows Markdown inputs) except can called multiple times—invocation results addition source note. Footnotes live inside Footer part footnote marks attached cell data. Footnotes added tab_footnote() function. helper function cells_body() can used location argument specify data cells target footnote. cells_body() helper two arguments columns rows. , can supply (1) vector colnames rownames, (2) vector column/row indices, (3) bare column names wrapped c() row labels within c(), (4) select helper function (starts_with(), ends_with(), contains(), matches(), one_of(), everything()). rows specifically, can use conditional statement column names variables (e.g., size > 15000). simple example footnotes can added table cell. Let’s add footnote references North America South America cells name column: slightly complex example adding footnotes use expressions rows help target cells column underlying data islands_tbl. First, set dplyr statements obtains name ‘island’ largest landmass. assigned largest object used first tab_footnote() call targets cell size column next name value stored largest (‘Asia’). second tab_footnote() similar except supplying conditional statement gets lowest population. able supply reference locations table using cells_body() helper function supplying necessary targeting columns rows arguments. cells_*() functions similar interfaces allow us target cells different parts table.","code":"# Make a display table with the `islands_tbl` # table; put a heading just above the column labels gt_tbl <-    gt_tbl %>%   tab_header(     title = \"Large Landmasses of the World\",     subtitle = \"The top ten largest are presented\"   )  # Show the gt Table gt_tbl # Use markdown for the heading's `title` and `subtitle` to # add bold and italicized characters gt(islands_tbl[1:2,]) %>%   tab_header(     title = md(\"**Large Landmasses of the World**\"),     subtitle = md(\"The *top two* largest are presented\")   ) # Display the `islands_tbl` data with a heading and # two source notes gt_tbl <-    gt_tbl %>%   tab_source_note(     source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"   ) %>%   tab_source_note(     source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")   )  # Show the gt table gt_tbl # Add footnotes (the same text) to two different # cell; data cells are targeted with `data_cells()` gt_tbl <-    gt_tbl %>%   tab_footnote(     footnote = \"The Americas.\",     locations = cells_body(columns = name, rows = 3:4)   )  # Show the gt table gt_tbl # Determine the row that contains the # largest landmass ('Asia') largest <-    islands_tbl %>%    arrange(desc(size)) %>%   slice(1) %>%   pull(name)  # Create two additional footnotes, using the # `columns` and `where` arguments of `data_cells()` gt_tbl <-    gt_tbl %>%   tab_footnote(     footnote = md(\"The **largest** by area.\"),     locations = cells_body(       columns = size,       rows = name == largest     )   ) %>%   tab_footnote(     footnote = \"The lowest by population.\",     locations = cells_body(       columns = size,       rows = size == min(size)     )   )  # Show the gt table gt_tbl"},{"path":"https://gt.rstudio.com/articles/intro-creating-gt-tables.html","id":"the-stub","dir":"Articles","previous_headings":"","what":"The Stub","title":"Introduction to Creating gt Tables","text":"Stub area left table contains row labels, may contain row group labels, summary labels. subparts can grouped sequence row groups. Stub Head provides location label describes Stub. Stub optional since cases Stub wouldn’t useful (e.g., display tables presented just fine without Stub). easy way generate Stub part specifying stub column gt() function rowname_col argument. signal gt named column used stub, making row labels. Let’s add stub islands_tbl dataset modifying call gt(): Notice landmass names left unstriped area? ’s stub. can apply ’s known stubhead label. label can added tab_stubhead() function: important thing note table now one column. , stub, two columns present (column labels name size) now column number 1 (column) size. apply table parts (including footnotes) use following statements: Let’s incorporate row groups display table. divides rows groups, creating row groups, results display row group labels right group. can easily done table containing row labels. can make new row group call tab_row_group() function. inputs row group names label argument, row references rows argument. can use strategies reference rows footnotes (e.g., vectors names/indices, select helpers, etc.). create three row groups (row group labels continent, country, subregion) grouping rows. Three row groups made since three unique categories groupname. Across top row group row group label contained separate row (cut across field contain nothing row group label). rearrangement rows carried ensure rows collected within appropriate row groups. groups rows row groups great way present information. Including data summaries particular group natural extension idea. process adding summary rows summary labels covered separate article (Creating Summary Lines). Another way make row groups column group names present input data table. example islands_tbl, groupname column categories continent, country, subregion appropriate rows produce row groups using gt() function’s groupname_col argument (e.g., gt(islands_tbl, rowname_col = \"name\", groupname_col = \"groupname\") %>% ...). , need use tab_row_group() statements. strategy supplying group names column can sometimes advantageous since can rely functions available dplyr generate categories (e.g., using case_when() if_else()).","code":"# Create a gt table showing ten of the # largest islands in the world; this # time with a stub gt_tbl <-    islands_tbl %>%   gt(rowname_col = \"name\")  # Show the gt table gt_tbl # Generate a simple table with a stub # and add a stubhead label gt_tbl <-    gt_tbl %>%   tab_stubhead(label = \"landmass\")  # Show the gt table gt_tbl # Display the `islands_tbl` data with a stub, # a heading, source notes, and footnotes gt_tbl <-    gt_tbl %>%   tab_header(     title = \"Large Landmasses of the World\",     subtitle = \"The top ten largest are presented\"   ) %>%   tab_source_note(     source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"   ) %>%   tab_source_note(     source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")   ) %>%   tab_footnote(     footnote = md(\"The **largest** by area.\"),     locations = cells_body(       columns = size, rows = largest     )   ) %>%   tab_footnote(     footnote = \"The lowest by population.\",     locations = cells_body(       columns = size, rows = contains(\"arc\")     )   )  # Show the gt table gt_tbl # Create three row groups with the # `tab_row_group()` function gt_tbl <-    gt_tbl %>%    tab_row_group(     label = \"continent\",     rows = 1:6   ) %>%   tab_row_group(     label = \"country\",     rows = c(\"Australia\", \"Greenland\")   ) %>%   tab_row_group(     label = \"subregion\",     rows = c(\"New Guinea\", \"Borneo\")   )  # Show the gt table gt_tbl"},{"path":"https://gt.rstudio.com/articles/intro-creating-gt-tables.html","id":"the-column-labels","dir":"Articles","previous_headings":"","what":"The Column Labels","title":"Introduction to Creating gt Tables","text":"table’s Column Labels part contains, minimum, columns column labels. last example single column: size. Just Stub, can create groupings called spanner columns encompass one columns. better demonstrate Column Labels work displayed, let’s use input data table columns. case, input table airquality. following columns: Ozone: mean ground-level ozone parts per billion volume (ppbV), measured 13:00 15:00 Solar.R: solar radiation Langley units (cal/m2), measured 08:00 noon Wind: mean wind speed miles per hour (mph) Temp: maximum daily air temperature degrees Fahrenheit (°F) Month, Day: numeric month day month record know measurements took place 1973, year column added dataset passed gt(). Let’s organize time information Time spanner column label, put columns Measurement spanner column label. can tab_spanner() function. can two things make presentable: move Time columns beginning series (using cols_move_to_start()) customize column labels descriptive (using cols_label()) Let’s things next example. Note even though columns moved using cols_move_to_start(), spanner column labels still spanned correct column labels. number functions gt provides move columns, including cols_move(), cols_move_to_end(); ’s even function hide columns: cols_hide(). Multiple columns can renamed single use cols_label(). , helper functions md() html() can used create column labels additional styling. example, provided column labels HTML can insert linebreaks <br>, insert superscripted 2 (<sup>2<\/sup>), insert degree symbol HTML entity (&deg;).","code":"# Modify the `airquality` dataset by adding the year # of the measurements (1973) and limiting to 10 rows airquality_m <-    airquality %>%   mutate(Year = 1973L) %>%   slice(1:10)    # Create a display table using the `airquality` # dataset; arrange columns into groups gt_tbl <-    gt(airquality_m) %>%   tab_header(     title = \"New York Air Quality Measurements\",     subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"   ) %>%   tab_spanner(     label = \"Time\",     columns = c(Year, Month, Day)   ) %>%   tab_spanner(     label = \"Measurement\",     columns = c(Ozone, Solar.R, Wind, Temp)   )  # Show the gt table gt_tbl # Move the time-based columns to the start of # the column series; modify the column labels of # the measurement-based columns gt_tbl <-    gt_tbl %>%   cols_move_to_start(     columns = c(Year, Month, Day)   ) %>%   cols_label(     Ozone = html(\"Ozone,<br>ppbV\"),     Solar.R = html(\"Solar R.,<br>cal/m<sup>2<\/sup>\"),     Wind = html(\"Wind,<br>mph\"),     Temp = html(\"Temp,<br>&deg;F\")   )  # Show the gt table gt_tbl"},{"path":"https://gt.rstudio.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Iannone. Author, maintainer. Joe Cheng. Author. Barret Schloerke. Author. Ellis Hughes. Author. JooYoung Seo. Author. RStudio. Copyright holder, funder.","code":""},{"path":"https://gt.rstudio.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iannone R, Cheng J, Schloerke B, Hughes E, Seo J (2022). gt: Easily Create Presentation-Ready Display Tables. https://gt.rstudio.com/, https://github.com/rstudio/gt.","code":"@Manual{,   title = {gt: Easily Create Presentation-Ready Display Tables},   author = {Richard Iannone and Joe Cheng and Barret Schloerke and Ellis Hughes and JooYoung Seo},   year = {2022},   note = {https://gt.rstudio.com/, https://github.com/rstudio/gt}, }"},{"path":"https://gt.rstudio.com/index.html","id":"discussions","dir":"","previous_headings":"","what":"DISCUSSIONS","title":"Easily Create Presentation-Ready Display Tables","text":"Let’s talk making tables gt Discussions! ’s great place ask questions use package, discuss ideas, engage others, much !","code":""},{"path":"https://gt.rstudio.com/index.html","id":"installation","dir":"","previous_headings":"","what":"INSTALLATION","title":"Easily Create Presentation-Ready Display Tables","text":"gt package can installed CRAN : can also choose install development version gt GitHub: encounter bug, usage questions, want share ideas make package better, please feel free file issue.","code":"install.packages(\"gt\") devtools::install_github(\"rstudio/gt\")"},{"path":"https://gt.rstudio.com/index.html","id":"how-gt-fits-in-with-other-packages-that-generate-display-tables","dir":"","previous_headings":"","what":"How gt fits in with Other Packages that Generate Display Tables","title":"Easily Create Presentation-Ready Display Tables","text":"gt package joins burgeoning collection packages display table generation. another? feel enough room space innovate . ways gt contributes ecosystem: interface high-level declarative (general instructions versus specific) formatting options ‘batteries included’ (scientific notation, uncertainty, ranges, percentages, suffixes, localized currency, dates/times + much ) excellent, pain-free support footnotes output ‘camera-ready’ multiple output formats supported declarative interface API closely follows tidyverse conventions adhering tidyverse style guide ’s focus making package documentation examples best can rigorous QA/QC measures: high test coverage automated tests, thorough manual testing QA engineers (every proposed code change) gt trying something different interface, may suit specific needs. listing leading table-making R packages, links respective project pages: knitr (GITHUB, WEBSITE) kableExtra (GITHUB, WEBSITE) formattable (GITHUB, WEBSITE) DT (GITHUB, WEBSITE) pander (GITHUB, WEBSITE) huxtable (GITHUB, WEBSITE) reactable (GITHUB, WEBSITE) flextable (GITHUB, WEBSITE) ftextra (GITHUB, WEBSITE) pixiedust (GITHUB) tangram (GITHUB) ztable (GITHUB) condformat (GITHUB) stargazer (CRAN) xtable (CRAN)","code":""},{"path":"https://gt.rstudio.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Easily Create Presentation-Ready Display Tables","text":"Please note gt project released contributor code conduct.participating project agree abide terms.","code":""},{"path":"https://gt.rstudio.com/index.html","id":"-license","dir":"","previous_headings":"","what":"📄 License","title":"Easily Create Presentation-Ready Display Tables","text":"gt licensed MIT license. See LICENSE.md file details. © RStudio, PBC.","code":""},{"path":"https://gt.rstudio.com/index.html","id":"️-governance","dir":"","previous_headings":"","what":"🏛️ Governance","title":"Easily Create Presentation-Ready Display Tables","text":"project primarily maintained Rich Iannone. authors may occasionally assist duties.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the luminance for a palette of colors — adjust_luminance","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"function can brighten darken palette colors arbitrary number steps, defined real number -2.0 2.0. transformation palette fixed step function tend apply greater darkening lightening colors midrange compared dark light colors input palette.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"","code":"adjust_luminance(colors, steps)"},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"colors vector colors undergo adjustment luminance. color value provided must either color name (set colors provided grDevices::colors()) hexadecimal string form \"#RRGGBB\" \"#RRGGBBAA\". steps positive negative factor luminance adjusted. Must number -2.0 2.0.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"vector color values.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"function can useful combined data_color() function's palette argument, can use vector colors col_* functions scales package (palette argument).","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"Get palette 8 pastel colors RColorBrewer package.   Create lighter darker variants base palette (one step lower, one step higher).   Create tibble make gt table . Color column order increasingly darker palettes (data_color()).","code":"pal <- RColorBrewer::brewer.pal(8, \"Pastel2\") pal_darker  <- pal %>% adjust_luminance(-1.0) pal_lighter <- pal %>% adjust_luminance(+1.0) dplyr::tibble(a = 1:8, b = 1:8, c = 1:8) %>%   gt() %>%   data_color(     columns = a,     colors = scales::col_numeric(       palette = pal_lighter,       domain = c(1, 8)     )   ) %>%   data_color(     columns = b,     colors = scales::col_numeric(       palette = pal,       domain = c(1, 8)     )   ) %>%   data_color(     columns = c,     colors = scales::col_numeric(       palette = pal_darker,       domain = c(1, 8)     )   )"},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"7-23","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as.data.frame.gt_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a gt object to a data frame — as.data.frame.gt_tbl","title":"Transform a gt object to a data frame — as.data.frame.gt_tbl","text":"facilitates conversion gt_tbl object data frame.","code":""},{"path":"https://gt.rstudio.com/reference/as.data.frame.gt_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a gt object to a data frame — as.data.frame.gt_tbl","text":"","code":"# S3 method for gt_tbl as.data.frame(x, ...)"},{"path":"https://gt.rstudio.com/reference/as.data.frame.gt_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a gt object to a data frame — as.data.frame.gt_tbl","text":"x object class gt_tbl. ... additional parameters.","code":""},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a gt object as LaTeX — as_latex","title":"Output a gt object as LaTeX — as_latex","text":"Get LaTeX content gt_tbl object knit_asis object. object contains LaTeX code attributes serve LaTeX dependencies (.e., LaTeX packages required table). Using .character() created object result single-element vector containing LaTeX code.","code":""},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a gt object as LaTeX — as_latex","text":"","code":"as_latex(data)"},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a gt object as LaTeX — as_latex","text":"data table object created using gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Output a gt object as LaTeX — as_latex","text":"LaTeX packages required generate tables : amsmath, booktabs, caption, longtable. event packages automatically added render phase document, please create include style file load . Inside document's YAML metadata, please include: gt_packages.sty file contain listed dependencies :","code":"output:   pdf_document: # Change to appropriate LaTeX template     includes:       in_header: 'gt_packages.sty' \\usepackage{amsmath, booktabs, caption, longtable}"},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output a gt object as LaTeX — as_latex","text":"Use gtcars create gt table. Add header export object LaTeX code.   returned knit_asis object, makes easy include R Markdown documents knit PDF. can use .character() get just LaTeX code single-element vector.","code":"tab_latex <-   gtcars %>%   dplyr::select(mfr, model, msrp) %>%   dplyr::slice(1:5) %>%   gt() %>%   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) %>%   as_latex()"},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Output a gt object as LaTeX — as_latex","text":"13-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the HTML content of a gt table — as_raw_html","title":"Get the HTML content of a gt table — as_raw_html","text":"Get HTML content gt_tbl object single-element character vector. default, generated HTML inlined styles, CSS styles (previously contained CSS rule sets external <table> element) included style attributes HTML table's tags. option preferable using output HTML table emailing context.","code":""},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the HTML content of a gt table — as_raw_html","text":"","code":"as_raw_html(data, inline_css = TRUE)"},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the HTML content of a gt table — as_raw_html","text":"data table object created using gt() function. inline_css option supply styles table elements inlined CSS styles. useful including table HTML part HTML email message body, since inlined styles largely supported email clients using CSS <style> block.","code":""},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the HTML content of a gt table — as_raw_html","text":"Use gtcars create gt table. Add header export HTML code inlined CSS styles.   returned single-element vector containing HTML table. <table>...<\/table> part complete HTML document rather HTML fragment.","code":"tab_html <-   gtcars %>%   dplyr::select(mfr, model, msrp) %>%   dplyr::slice(1:5) %>%   gt() %>%   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) %>%   as_raw_html()"},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Get the HTML content of a gt table — as_raw_html","text":"13-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a gt object as RTF — as_rtf","title":"Output a gt object as RTF — as_rtf","text":"Get RTF content gt_tbl object single-element character vector. object can used writeLines() generate valid .rtf file can opened RTF readers.","code":""},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a gt object as RTF — as_rtf","text":"","code":"as_rtf(data)"},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a gt object as RTF — as_rtf","text":"data table object created using gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output a gt object as RTF — as_rtf","text":"Use gtcars create gt table. Add header export RTF code.","code":"tab_rtf <-   gtcars %>%   dplyr::select(mfr, model) %>%   dplyr::slice(1:2) %>%   gt() %>%   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) %>%   as_rtf()"},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Output a gt object as RTF — as_rtf","text":"13-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_word.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a gt object as Word — as_word","title":"Output a gt object as Word — as_word","text":"Get Open Office XML table tag content gt_tbl object single-element character vector.","code":""},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a gt object as Word — as_word","text":"","code":"as_word(   data,   align = \"center\",   caption_location = c(\"top\", \"bottom\", \"embed\"),   caption_align = \"left\",   split = FALSE,   keep_with_next = TRUE )"},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a gt object as Word — as_word","text":"data table object created using gt() function. align option table alignment. Can either \"center\" (default), \"left\", \"right\". caption_location Determines caption positioned. can either \"top\" (default), \"bottom\", \"embed\". caption_align Determines alignment caption. either \"left\" (default), \"center\", \"right\". option used caption_location set \"embed\". split TRUE FALSE (default) value indicates whether activate Word option Allow row break across pages. keep_with_next TRUE (default) FALSE value indicates whether table use Word option keep rows together.","code":""},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Output a gt object as Word — as_word","text":"13-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output a gt object as Word — as_word","text":"","code":"# Use `gtcars` to create a gt table; # add a header and then export as # OOXML code for Word tab_rtf <-   gtcars %>%   dplyr::select(mfr, model) %>%   dplyr::slice(1:2) %>%   gt() %>%   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) %>%   as_word()"},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for defining custom borders for table cells — cell_borders","title":"Helper for defining custom borders for table cells — cell_borders","text":"cell_borders() helper function used tab_style() function, allows setting custom styles one cells. Specifically, call cell_borders() bound styles argument tab_style(). selection argument define borders modified (e.g., \"left\", \"right\", etc.). selection, color, style, weight selected borders can modified.","code":""},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for defining custom borders for table cells — cell_borders","text":"","code":"cell_borders(sides = \"all\", color = \"#000000\", style = \"solid\", weight = px(1))"},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for defining custom borders for table cells — cell_borders","text":"sides border sides modified. Options include \"left\", \"right\", \"top\", \"bottom\". borders surrounding selected cells, can use \"\" option. color, style, weight border color, style, weight. color can defined color name hexadecimal color code. default color value \"#000000\" (black). style can one either \"solid\" (default), \"dashed\", \"dotted\", \"hidden\". weight border lines given pixel values (px() helper function useful . default value weight \"1px\". Borders defined sides can removed supplying NULL color, style, weight.","code":""},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for defining custom borders for table cells — cell_borders","text":"list object class cell_styles.","code":""},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for defining custom borders for table cells — cell_borders","text":"Add horizontal border lines table body rows exibble using tab_style() cell_borders().    Incorporate different horizontal vertical borders several locations. uses multiple cell_borders() cells_body() calls within list()s.","code":"exibble %>%   gt() %>%   tab_options(row.striping.include_table_body = FALSE) %>%   tab_style(     style = cell_borders(       sides = c(\"top\", \"bottom\"),       color = \"red\",       weight = px(1.5),       style = \"solid\"     ),     locations = cells_body(       columns = everything(),       rows = everything()     )   ) exibble %>%   gt() %>%   tab_style(     style = list(       cell_borders(         sides = c(\"top\", \"bottom\"),         color = \"#FF0000\",         weight = px(2)       ),       cell_borders(         sides = c(\"left\", \"right\"),         color = \"#0000FF\",         weight = px(2)       )     ),     locations = list(       cells_body(         columns = num,         rows = is.na(num)       ),       cells_body(         columns = currency,         rows = is.na(currency)       )     )   )"},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for defining custom borders for table cells — cell_borders","text":"7-22","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for defining custom fills for table cells — cell_fill","title":"Helper for defining custom fills for table cells — cell_fill","text":"cell_fill() helper function used tab_style() function, allows setting custom styles one cells. Specifically, call cell_fill() bound styles argument tab_style().","code":""},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for defining custom fills for table cells — cell_fill","text":"","code":"cell_fill(color = \"#D3D3D3\", alpha = NULL)"},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for defining custom fills for table cells — cell_fill","text":"color fill color. nothing provided, \"#D3D3D3\" (light gray) used default. alpha optional alpha transparency value color single value range 0 (fully transparent) 1 (fully opaque). provided fill color either fully opaque use alpha information color value supplied #RRGGBBAA format.","code":""},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for defining custom fills for table cells — cell_fill","text":"list object class cell_styles.","code":""},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for defining custom fills for table cells — cell_fill","text":"Use exibble create gt table. Add styles tab_style() cell_fill() helper function.","code":"exibble %>%   dplyr::select(num, currency) %>%   gt() %>%   fmt_number(     columns = c(num, currency),     decimals = 1   ) %>%   tab_style(     style = cell_fill(color = \"lightblue\"),     locations = cells_body(       columns = num,       rows = num >= 5000     )   ) %>%   tab_style(     style = cell_fill(color = \"gray85\"),     locations = cells_body(       columns = currency,       rows = currency < 100     )   )"},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for defining custom fills for table cells — cell_fill","text":"7-21","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for defining custom text styles for table cells — cell_text","title":"Helper for defining custom text styles for table cells — cell_text","text":"helper function used tab_style() function, allows setting custom styles one cells. can also define several styles within single call cell_text() tab_style() reliably apply styles targeted element.","code":""},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for defining custom text styles for table cells — cell_text","text":"","code":"cell_text(   color = NULL,   font = NULL,   size = NULL,   align = NULL,   v_align = NULL,   style = NULL,   weight = NULL,   stretch = NULL,   decorate = NULL,   transform = NULL,   whitespace = NULL,   indent = NULL )"},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for defining custom text styles for table cells — cell_text","text":"color text color. font font collection fonts (subsequent font names ) used fallbacks. size size font. Can provided number assumed represent px values (wrapped px()) helper function. can also use one following absolute size keywords: \"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"xx-large\". align text alignment. Can one either \"center\", \"left\", \"right\", \"justify\". v_align vertical alignment text cell. Options \"middle\", \"top\", \"bottom\". style text style. Can one either \"normal\", \"italic\", \"oblique\". weight weight font. Can text-based keyword \"normal\", \"bold\", \"lighter\", \"bolder\", , numeric value 1 1000, inclusive. Note variable fonts may support numeric mapping weight. stretch Allows text either condensed expanded. can use one following text-based keywords describe degree condensation/expansion: \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", \"ultra-expanded\". Alternatively, can supply percentage values 0\\% 200\\%, inclusive. Negative percentage values allowed. decorate Allows text decoration effect applied. , can use \"overline\", \"line-\", \"underline\". transform Allows transformation text. Options \"uppercase\", \"lowercase\", \"capitalize\". whitespace white-space preservation option. default, runs white-space collapsed single spaces several options exist govern white-space collapsed lines might wrap soft-wrap opportunities. keyword options \"normal\", \"nowrap\", \"pre\", \"pre-wrap\", \"pre-line\", \"break-spaces\". indent indentation text. Can provided number assumed represent px values (wrapped px()) helper function. Alternatively, can given percentage (easily constructed pct()).","code":""},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for defining custom text styles for table cells — cell_text","text":"list object class cell_styles.","code":""},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for defining custom text styles for table cells — cell_text","text":"Use exibble create gt table. Add styles tab_style() cell_text() helper function.","code":"exibble %>%   dplyr::select(num, currency) %>%   gt() %>%   fmt_number(     columns = c(num, currency),     decimals = 1   ) %>%   tab_style(     style = cell_text(weight = \"bold\"),     locations = cells_body(       columns = num,       rows = num >= 5000     )   ) %>%   tab_style(     style = cell_text(style = \"italic\"),     locations = cells_body(       columns = currency,       rows = currency < 100     )   )"},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for defining custom text styles for table cells — cell_text","text":"7-20","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting data cells in the table body — cells_body","title":"Location helper for targeting data cells in the table body — cells_body","text":"cells_body() function used target data cells table body. function can used apply footnote tab_footnote(), add custom styling tab_style(), transform targeted cells text_transform(). function expressly used functions' locations argument. 'body' location present default every gt table.","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting data cells in the table body — cells_body","text":"","code":"cells_body(columns = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting data cells in the table body — cells_body","text":"columns names columns targeted. rows names rows targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting data cells in the table body — cells_body","text":"list object classes cells_body location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting data cells in the table body — cells_body","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting data cells in the table body — cells_body","text":"Use gtcars create gt table. Add footnote targets single data cell tab_footnote(), using cells_body() locations (rows = hp == max(hp) target single row hp column).","code":"gtcars %>%   dplyr::filter(ctry_origin == \"United Kingdom\") %>%   dplyr::select(mfr, model, year, hp) %>%   gt() %>%   tab_footnote(     footnote = \"Highest horsepower.\",     locations = cells_body(       columns = hp,       rows = hp == max(hp)     )   ) %>%   opt_footnote_marks(marks = c(\"*\", \"+\"))"},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting data cells in the table body — cells_body","text":"7-12","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the column labels — cells_column_labels","title":"Location helper for targeting the column labels — cells_column_labels","text":"cells_column_labels() function used target table's column labels applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'column_labels' location present default every gt table.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the column labels — cells_column_labels","text":"","code":"cells_column_labels(columns = everything())"},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the column labels — cells_column_labels","text":"columns names column labels targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the column labels — cells_column_labels","text":"list object classes cells_column_labels location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the column labels — cells_column_labels","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the column labels — cells_column_labels","text":"Use sza create gt table. Add footnotes column labels tab_footnote() cells_column_labels() locations.","code":"sza %>%   dplyr::filter(     latitude == 20 & month == \"jan\" &       !is.na(sza)   ) %>%   dplyr::select(-latitude, -month) %>%   gt() %>%   tab_footnote(     footnote = \"True solar time.\",     locations = cells_column_labels(       columns = tst     )   ) %>%   tab_footnote(     footnote = \"Solar zenith angle.\",     locations = cells_column_labels(       columns = sza     )   )"},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the column labels — cells_column_labels","text":"7-9","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the column spanners — cells_column_spanners","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"cells_column_spanners() function used target cells contain table column spanners. useful applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'column_spanners' location generated one uses tab_spanner() function tab_spanner_delim() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"","code":"cells_column_spanners(spanners = everything())"},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"spanners names spanners targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"list object classes cells_column_spanners location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"Use exibble create gt table. Add spanner column label three column labels tab_spanner() use tab_style() cells_column_spanners() make spanner label text bold.","code":"exibble %>%   dplyr::select(-fctr, -currency, -group) %>%   gt(rowname_col = \"row\") %>%   tab_spanner(     label = \"dates and times\",     id = \"dt\",     columns = c(date, time, datetime)   ) %>%   tab_style(     style = cell_text(weight = \"bold\"),     locations = cells_column_spanners(spanners = \"dt\")   )"},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"7-8","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the footnotes — cells_footnotes","title":"Location helper for targeting the footnotes — cells_footnotes","text":"cells_footnotes() function used target footnotes footer section table. useful adding custom styles footnotes tab_style() (using locations argument). 'footnotes' location generated one uses tab_footnote() function. location helper function used locations argument tab_footnote() result warning (change made table).","code":""},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the footnotes — cells_footnotes","text":"","code":"cells_footnotes()"},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the footnotes — cells_footnotes","text":"list object classes cells_footnotes location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the footnotes — cells_footnotes","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the footnotes — cells_footnotes","text":"Use sza create gt table. Color sza column using data_color() function, add footnote also style footnotes section.","code":"sza %>%   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) %>%   dplyr::select(-latitude, -month) %>%   gt() %>%   data_color(     columns = sza,     colors = scales::col_numeric(       palette = c(\"white\", \"yellow\", \"navyblue\"),       domain = c(0, 90)     )   ) %>%   tab_footnote(     footnote = \"Color indicates height of sun.\",     locations = cells_column_labels(columns = sza)   ) %>%   tab_options(table.width = px(320)) %>%   tab_style(     style = list(       cell_text(size = \"smaller\"),       cell_fill(color = \"gray90\")       ),     locations = cells_footnotes()   )"},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the footnotes — cells_footnotes","text":"7-17","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting cells in a grand summary — cells_grand_summary","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"cells_grand_summary() function used target cells grand summary useful applying footnote tab_footnote() adding custom styles tab_style(). function expressly used functions' locations argument. 'grand_summary' location generated grand_summary_rows() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"","code":"cells_grand_summary(columns = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"columns names columns targeted. rows names rows targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"list object classes cells_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"Use countrypops create gt table. Add styling grand summary cell tab_style() cells_grand_summary().","code":"countrypops %>%   dplyr::filter(country_name == \"Spain\", year < 1970) %>%   dplyr::select(-contains(\"country\")) %>%   gt(rowname_col = \"year\") %>%   fmt_number(     columns = population,     decimals = 0   ) %>%   grand_summary_rows(     columns = population,     fns = list(       change = ~max(.) - min(.)     ),     formatter = fmt_number,     decimals = 0   ) %>%   tab_style(     style = list(       cell_text(style = \"italic\"),       cell_fill(color = \"lightblue\")     ),     locations = cells_grand_summary(       columns = population,       rows = 1     )   )"},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"7-14","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting row groups (deprecated) — cells_group","title":"Location helper for targeting row groups (deprecated) — cells_group","text":"Location helper targeting row groups (deprecated)","code":""},{"path":"https://gt.rstudio.com/reference/cells_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting row groups (deprecated) — cells_group","text":"","code":"cells_group(groups = TRUE)"},{"path":"https://gt.rstudio.com/reference/cells_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting row groups (deprecated) — cells_group","text":"groups names row groups targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting row groups — cells_row_groups","title":"Location helper for targeting row groups — cells_row_groups","text":"cells_row_groups() function used target table's row groups applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'row_groups' location can generated specifying groupname_col gt(), introducing grouped data gt() (way dplyr::group_by()), , specifying groups tab_row_group() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting row groups — cells_row_groups","text":"","code":"cells_row_groups(groups = everything())"},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting row groups — cells_row_groups","text":"groups names row groups targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting row groups — cells_row_groups","text":"list object classes cells_row_groups location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting row groups — cells_row_groups","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting row groups — cells_row_groups","text":"Use pizzaplace create gt table grouped data. Add summary summary_rows() function add footnote \"peppr_salami\" row group label tab_footnote() cells_row_groups() locations.","code":"pizzaplace %>%   dplyr::filter(name %in% c(\"soppressata\", \"peppr_salami\")) %>%   dplyr::group_by(name, size) %>%   dplyr::summarize(`Pizzas Sold` = dplyr::n(), .groups = \"drop\") %>%   gt(rowname_col = \"size\", groupname_col = \"name\") %>%   summary_rows(     groups = TRUE,     columns = `Pizzas Sold`,     fns = list(TOTAL = \"sum\"),     formatter = fmt_number,     decimals = 0,     use_seps = TRUE   ) %>%   tab_footnote(     footnote = \"The Pepper-Salami.\",     cells_row_groups(groups = \"peppr_salami\")   )"},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting row groups — cells_row_groups","text":"7-10","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the source notes — cells_source_notes","title":"Location helper for targeting the source notes — cells_source_notes","text":"cells_source_notes() function used target source notes footer section table. useful adding custom styles source notes tab_style() (using locations argument). 'source_notes' location generated tab_source_note() function. location helper function used locations argument tab_footnote() result warning (change made table).","code":""},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the source notes — cells_source_notes","text":"","code":"cells_source_notes()"},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the source notes — cells_source_notes","text":"list object classes cells_source_notes location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the source notes — cells_source_notes","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the source notes — cells_source_notes","text":"Use gtcars create gt table. Add source note style source notes section.","code":"gtcars %>%   dplyr::select(mfr, model, msrp) %>%   dplyr::slice(1:5) %>%   gt() %>%   tab_source_note(source_note = \"From edmunds.com\") %>%   tab_style(     style = cell_text(       color = \"#A9A9A9\",       size = \"small\"     ),     locations = cells_source_notes()   )"},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the source notes — cells_source_notes","text":"7-18","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting cells in the table stub — cells_stub","title":"Location helper for targeting cells in the table stub — cells_stub","text":"cells_stub() function used target table's stub cells useful applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. several ways stub location might available gt table: (1) specification rowname_col gt(), (2) introducing data frame row names gt() rownames_to_stub = TRUE, (3) using summary_rows() grand_summary_rows() neither previous two conditions true.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting cells in the table stub — cells_stub","text":"","code":"cells_stub(rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting cells in the table stub — cells_stub","text":"rows names rows targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting cells in the table stub — cells_stub","text":"list object classes cells_stub location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting cells in the table stub — cells_stub","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting cells in the table stub — cells_stub","text":"Use sza create gt table. Color month values table stub tab_style(), using cells_stub() locations.","code":"sza %>%   dplyr::filter(latitude == 20 & tst <= \"1000\") %>%   dplyr::select(-latitude) %>%   dplyr::filter(!is.na(sza)) %>%   tidyr::spread(key = \"tst\", value = sza) %>%   gt(rowname_col = \"month\") %>%   sub_missing(missing_text = \"\") %>%   tab_style(     style = list(       cell_fill(color = \"darkblue\"),       cell_text(color = \"white\")       ),     locations = cells_stub()   )"},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting cells in the table stub — cells_stub","text":"7-11","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"cells_stub_grand_summary() function used target stub cells grand summary useful applying footnote tab_footnote() adding custom styles tab_style(). function expressly used functions' locations argument. 'stub_grand_summary' location generated grand_summary_rows() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"","code":"cells_stub_grand_summary(rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"rows names rows targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"list object classes cells_stub_grand_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"Use countrypops create gt table. Add styling grand summary stub cell tab_style() cells_stub_grand_summary() functions.","code":"countrypops %>%   dplyr::filter(country_name == \"Spain\", year < 1970) %>%   dplyr::select(-contains(\"country\")) %>%   gt(rowname_col = \"year\") %>%   fmt_number(     columns = population,     decimals = 0   ) %>%   grand_summary_rows(     columns = population,     fns = list(change = ~max(.) - min(.)),     formatter = fmt_number,     decimals = 0   ) %>%   tab_style(     style = cell_text(weight = \"bold\", transform = \"uppercase\"),     locations = cells_stub_grand_summary(rows = \"change\")   )"},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"7-16","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the stub cells in a summary — cells_stub_summary","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"cells_stub_summary() function used target stub cells summary useful applying footnote tab_footnote() adding custom styles tab_style(). function expressly used functions' locations argument. 'stub_summary' location generated summary_rows() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"","code":"cells_stub_summary(groups = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"groups names groups targeted. rows names rows targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"list object classes cells_stub_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"Use countrypops create gt table. Add styling summary data stub cells tab_style() cells_stub_summary().","code":"countrypops %>%   dplyr::filter(country_name == \"Japan\", year < 1970) %>%   dplyr::select(-contains(\"country\")) %>%   dplyr::mutate(decade = paste0(substr(year, 1, 3), \"0s\")) %>%   gt(     rowname_col = \"year\",     groupname_col = \"decade\"   ) %>%   fmt_number(     columns = population,     decimals = 0   ) %>%   summary_rows(     groups = \"1960s\",     columns = population,     fns = list(\"min\", \"max\"),     formatter = fmt_number,     decimals = 0   ) %>%   tab_style(     style = list(       cell_text(         weight = \"bold\",         transform = \"capitalize\"       ),       cell_fill(         color = \"lightblue\",         alpha = 0.5       )     ),     locations = cells_stub_summary(       groups = \"1960s\"     )   )"},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"7-15","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the table stubhead cell — cells_stubhead","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"cells_stubhead() function used target table stubhead location applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'stubhead' location always present alongside 'stub' location.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"","code":"cells_stubhead()"},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"list object classes cells_stubhead location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"Use pizzaplace create gt table. Add stubhead label tab_stubhead() style tab_style() cells_stubhead().","code":"pizzaplace %>%   dplyr::mutate(month = as.numeric(substr(date, 6, 7))) %>%   dplyr::group_by(month, type) %>%   dplyr::summarize(sold = dplyr::n(), .groups = \"drop\") %>%   dplyr::filter(month %in% 1:2) %>%   gt(rowname_col = \"type\") %>%   tab_stubhead(label = \"type\") %>%   tab_style(     style = cell_fill(color = \"lightblue\"),     locations = cells_stubhead()   )"},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"7-7","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting group summary cells — cells_summary","title":"Location helper for targeting group summary cells — cells_summary","text":"cells_summary() function used target cells group summary useful applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'summary' location generated summary_rows() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting group summary cells — cells_summary","text":"","code":"cells_summary(   groups = everything(),   columns = everything(),   rows = everything() )"},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting group summary cells — cells_summary","text":"groups names groups summary rows reside . columns names columns targeted. rows names rows targeted.","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting group summary cells — cells_summary","text":"list object classes cells_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting group summary cells — cells_summary","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting group summary cells — cells_summary","text":"Use countrypops create gt table. Add styling summary data cells tab_style(), using cells_summary() locations.","code":"countrypops %>%   dplyr::filter(country_name == \"Japan\", year < 1970) %>%   dplyr::select(-contains(\"country\")) %>%   dplyr::mutate(decade = paste0(substr(year, 1, 3), \"0s\")) %>%   gt(     rowname_col = \"year\",     groupname_col = \"decade\"   ) %>%   fmt_number(     columns = population,     decimals = 0   ) %>%   summary_rows(     groups = \"1960s\",     columns = population,     fns = list(\"min\", \"max\"),     formatter = fmt_number,     decimals = 0   ) %>%   tab_style(     style = list(       cell_text(style = \"italic\"),       cell_fill(color = \"lightblue\")     ),     locations = cells_summary(       groups = \"1960s\",       columns = population,       rows = 1     )   ) %>%   tab_style(     style = list(       cell_text(style = \"italic\"),       cell_fill(color = \"lightgreen\")     ),     locations = cells_summary(       groups = \"1960s\",       columns = population,       rows = 2     )   )"},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting group summary cells — cells_summary","text":"7-13","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the table title and subtitle — cells_title","title":"Location helper for targeting the table title and subtitle — cells_title","text":"cells_title() function used target table title subtitle applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. header location title optionally subtitle reside generated tab_header() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the table title and subtitle — cells_title","text":"","code":"cells_title(groups = c(\"title\", \"subtitle\"))"},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the table title and subtitle — cells_title","text":"groups can either specify \"title\", \"subtitle\", (default) vector target title element, subtitle element, elements.","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the table title and subtitle — cells_title","text":"list object classes cells_title location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"overview-of-location-helper-functions","dir":"Reference","previous_headings":"","what":"Overview of Location Helper Functions","title":"Location helper for targeting the table title and subtitle — cells_title","text":"Location helper functions can used target cells virtually function locations argument. listing location helper functions, locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead() function. cells_column_spanners(): targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels(): targets column labels columns argument. cells_row_groups(): targets row group labels available row groups using groups argument. cells_stub(): targets row labels table stub using rows argument. cells_body(): targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the table title and subtitle — cells_title","text":"Use sp500 create gt table. Add header title, add footnote title tab_footnote() cells_title() (locations).","code":"sp500 %>%   dplyr::filter(date >= \"2015-01-05\" & date <=\"2015-01-10\") %>%   dplyr::select(-c(adj_close, volume, high, low)) %>%   gt() %>%   tab_header(title = \"S&P 500\") %>%   tab_footnote(     footnote = \"All values in USD.\",     locations = cells_title(groups = \"title\")   )"},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the table title and subtitle — cells_title","text":"7-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the alignment of columns — cols_align","title":"Set the alignment of columns — cols_align","text":"individual alignments columns (includes column labels data cells) can modified. option align text left, center, right. less explicit manner, can allow gt automatically choose alignment column based data type (auto option).","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the alignment of columns — cols_align","text":"","code":"cols_align(   data,   align = c(\"auto\", \"left\", \"center\", \"right\"),   columns = everything() )"},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the alignment of columns — cols_align","text":"data table object created using gt() function. align alignment type. can \"center\", \"left\", \"right\" center-, left-, right-alignment. Alternatively, \"auto\" option (default), automatically align values columns according data type (see Details section specifics alignments applied). columns columns alignment applied. default set everything() means chosen alignment affects columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the alignment of columns — cols_align","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the alignment of columns — cols_align","text":"create gt table object using gt(), automatic alignment column labels data cells performed. default, left-alignment applied columns class character, Date, POSIXct; center-alignment columns class logical, factor, list; right-alignment used numeric integer columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the alignment of columns — cols_align","text":"Use countrypops create gt table. Align population column data left.","code":"countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_align(     align = \"left\",     columns = population   )"},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Set the alignment of columns — cols_align","text":"4-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Align all numeric values in a column along the decimal mark — cols_align_decimal","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"numeric columns contain values decimal portions, sometimes useful lined along decimal mark easier readability. can cols_align_decimal() provide number columns (function skip columns require type alignment).","code":""},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"","code":"cols_align_decimal(data, columns = everything(), dec_mark = \".\", locale = NULL)"},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"data table object created using gt() function. columns columns alignment applied. default set everything() means chosen alignment affects columns. dec_mark character used decimal mark numeric values aligned. locale value used formatting numeric values locale better use override value dec_mark. locale optional locale ID can used obtain type decimal mark used numeric values aligned. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override value provided dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"put together two-column table create gt table. first column char just contains letters whereas second column, num, collection numbers NA values. format numbers fmt_number() elect drop trailing zeros past decimal mark drop_trailing_zeros = TRUE. can leave formatted numbers hard scan decimal mark fixed horizontally. remedy align numbers decimal mark cols_align_decimal().","code":"dplyr::tibble(   char = LETTERS[1:9],   num = c(1.2, -33.52, 9023.2, -283.527, NA, 0.401, -123.1, NA, 41) ) %>%   gt() %>%   fmt_number(     columns = num,     decimals = 3,     drop_trailing_zeros = TRUE   ) %>%   cols_align_decimal()"},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"4-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":null,"dir":"Reference","previous_headings":"","what":"Hide one or more columns — cols_hide","title":"Hide one or more columns — cols_hide","text":"cols_hide() function allows us hide one columns appearing final output table. possible often desirable omit columns input table data introduction gt() function, can cases data certain columns useful (column reference formatting columns) final display columns necessary.","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hide one or more columns — cols_hide","text":"","code":"cols_hide(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hide one or more columns — cols_hide","text":"data table object created using gt() function. columns column names hide output display table. Values provided correspond column names disregarded.","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hide one or more columns — cols_hide","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hide one or more columns — cols_hide","text":"hiding columns internally rendering directive, , columns 'hidden' still accessible useful expression provided rows argument. Furthermore, cols_hide() function (many gt functions) can placed anywhere pipeline gt function calls (acting promise hide columns timing right). However perhaps greater readability placing call closer end pipeline. cols_hide() function quietly changes visible state column (much like cols_unhide() function) yield warnings messages changing state already-invisible columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hide one or more columns — cols_hide","text":"Use countrypops create gt table. Hide country_code_2 country_code_3 columns cols_hide().    Use countrypops create gt table. Use population column provide conditional placement footnotes, hide column one . Note order cols_hide() tab_footnote() statements effect.","code":"countrypops %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_hide(columns = c(country_code_2, country_code_3)) countrypops %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_hide(columns = c(country_code_3, population)) %>%   tab_footnote(     footnote = \"Population above 3,000,000.\",     locations = cells_body(       columns = year,       rows = population > 3000000     )   )"},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Hide one or more columns — cols_hide","text":"4-8","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel one or more columns — cols_label","title":"Relabel one or more columns — cols_label","text":"Column labels can modified default values (names columns input table data). create gt table object using gt(), column names effectively become column labels. serves good first approximation, column names often appealing column labels gt output table. cols_label() function provides flexibility relabel one columns even option use md() html() helper functions rendering column labels Markdown using HTML.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel one or more columns — cols_label","text":"","code":"cols_label(.data, ..., .list = list2(...))"},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel one or more columns — cols_label","text":".data table object created using gt() function. ... One named arguments column names input .data table along labels display column labels. can optionally wrap column labels md() (interpret text Markdown) html() (interpret text HTML). .list Allows use list input alternative ....","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel one or more columns — cols_label","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relabel one or more columns — cols_label","text":"important note columns can freely relabeled, continue refer columns original column names. Column names tibble data frame must unique whereas column labels gt requirement uniqueness (useful labeling columns , say, measurement units may repeated several times---usually different spanner column labels). Thus, can still easily distinguish columns gt function calls (e.g., fmt*() functions) even though may lose distinguishability column labels relabeled.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel one or more columns — cols_label","text":"Use countrypops create gt table. Relabel table's columns cols_label() function improve presentation.   #' Using countrypops create gt table, label columns just time make column labels bold Markdown formatting.","code":"countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_label(     country_name = \"Name\",     year = \"Year\",     population = \"Population\"   ) countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_label(     country_name = md(\"**Name**\"),     year = md(\"**Year**\"),     population = md(\"**Population**\")   )"},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Relabel one or more columns — cols_label","text":"4-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge data from two or more columns to a single column — cols_merge","title":"Merge data from two or more columns to a single column — cols_merge","text":"function takes input two columns allows contents merged single column, using pattern specifies formatting. can specify columns merge together columns argument. string-combining pattern given pattern argument. first column columns series operates target column (.e., undergo mutation) whereas following columns untouched. option hide non-target columns (.e., second subsequent columns given columns).","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge data from two or more columns to a single column — cols_merge","text":"","code":"cols_merge(   data,   columns,   hide_columns = columns[-1],   pattern = paste0(\"{\", seq_along(columns), \"}\", collapse = \" \") )"},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge data from two or more columns to a single column — cols_merge","text":"data table object created using gt() function. columns columns participate merging process. first column name provided target column (.e., undergo mutation) columns serve provide input. hide_columns column names provided state changed hidden (via internal use cols_hide() already hidden. convenient shared purpose specified columns provide string input target column. suppress hiding columns, FALSE can used . pattern formatting pattern specifies arrangement column values string literals. need use column numbers (corresponding position columns provided columns) within pattern. indices placed curly braces (e.g., {1}). characters outside braces taken string literals.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge data from two or more columns to a single column — cols_merge","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge data from two or more columns to a single column — cols_merge","text":"three column-merging functions offer specialized behavior optimized common table tasks: cols_merge_range(), cols_merge_uncert(), cols_merge_n_pct(). functions operate similarly, non-target columns can optionally hidden output table autohide option.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge data from two or more columns to a single column — cols_merge","text":"Use sp500 create gt table. Use cols_merge() function merge open & close columns together, , low & high columns (putting em dash ). Relabel columns cols_label().","code":"sp500 %>%   dplyr::slice(50:55) %>%   dplyr::select(-volume, -adj_close) %>%   gt() %>%   cols_merge(     columns = c(open, close),     pattern = \"{1}&mdash;{2}\"   ) %>%   cols_merge(     columns = c(low, high),     pattern = \"{1}&mdash;{2}\"   ) %>%   cols_label(     open = \"open/close\",     low = \"low/high\"   )"},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge data from two or more columns to a single column — cols_merge","text":"4-13","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two columns to combine counts and percentages — cols_merge_n_pct","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"cols_merge_n_pct() function specialized variant cols_merge() function. operates taking two columns constitute count (col_n) fraction total population (col_pct) merges single column. results column containing counts associated percentages (e.g., 12 (23.2%)). column specified col_pct dropped output table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"","code":"cols_merge_n_pct(data, col_n, col_pct, autohide = TRUE)"},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"data table object created using gt() function. col_n column contains values count component. col_pct column contains values percentage component. column formatted percentages displayed (e.g., fmt_percent()). autohide option automatically hide column specified col_pct. columns state changed hidden behave , just displayed finalized table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"function somewhat replicated using cols_merge(), however, cols_merge_n_pct() employs following specialized semantics NA zero-value handling: NAs col_n result missing values merged column (e.g., NA + 10.2% = NA) NAs col_pct (col_n) result base values merged column (e.g., 13 + NA = 13) NAs col_n col_pct result missing values merged column (e.g., NA + NA = NA) zero (0) value col_n formatted output \"0\" (.e., percentage shown) resulting NA values col_n column following merge operation can easily formatted using sub_missing() function. Separate calls sub_missing() can used col_n col_pct columns finer control replacement values. responsibility user ensure values correct col_n col_pct columns (function neither generates recalculates values either). Formatting column can done independently separate fmt_number() fmt_percent() calls. function part set four column-merging functions. two general cols_merge() function specialized cols_merge_uncert() cols_merge_range() functions. functions operate similarly, non-target columns can optionally hidden output table hide_columns autohide options.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"Use pizzaplace create gt table displays counts percentages top 3 pizzas sold pizza category 2015. cols_merge_n_pct() function used merge n frac columns (frac column formatted using fmt_percent()).","code":"pizzaplace %>%   dplyr::group_by(name, type, price) %>%   dplyr::summarize(     n = dplyr::n(),     frac = n/nrow(.),     .groups = \"drop\"   ) %>%   dplyr::arrange(type, dplyr::desc(n)) %>%   dplyr::group_by(type) %>%   dplyr::slice_head(n = 3) %>%   gt(     rowname_col = \"name\",     groupname_col = \"type\"   ) %>%   fmt_currency(price) %>%   fmt_percent(frac) %>%   cols_merge_n_pct(     col_n = n,     col_pct = frac   ) %>%   cols_label(     n = md(\"*N* (%)\"),     price = \"Price\"   ) %>%   tab_style(     style = cell_text(font = \"monospace\"),     locations = cells_stub()   ) %>%   tab_stubhead(md(\"Cat. and  \\nPizza Code\")) %>%   tab_header(title = \"Top 3 Pizzas Sold by Category in 2015\") %>%   tab_options(table.width = px(512))"},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"4-12","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two columns to a value range column — cols_merge_range","title":"Merge two columns to a value range column — cols_merge_range","text":"cols_merge_range() function specialized variant cols_merge() function. operates taking two columns constitute range values (col_begin col_end) merges single column. results column containing values separated long dash (e.g., 12.0 — 20.0). column specified col_end dropped output table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two columns to a value range column — cols_merge_range","text":"","code":"cols_merge_range(data, col_begin, col_end, sep = \"--\", autohide = TRUE)"},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two columns to a value range column — cols_merge_range","text":"data table object created using gt() function. col_begin column contains values start range. col_end column contains values end range. sep separator text indicates values ranged. default value \"--\" indicates en dash used range separator. Using \"---\" taken mean em dash used. want special symbols taken literally, can supplied within base () function. autohide option automatically hide column specified col_end. columns state changed hidden behave , just displayed finalized table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two columns to a value range column — cols_merge_range","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge two columns to a value range column — cols_merge_range","text":"function somewhat replicated using cols_merge(), however, cols_merge_range() employs following specialized operations NA handling: NAs col_begin (col_end) result display NAs col_end (col_begin) result display col_begin values merged column (converse previous) NAs col_begin col_end result missing values merged column resulting NA values col_begin column following merge operation can easily formatted using sub_missing() function. Separate calls sub_missing() can used col_begin col_end columns finer control replacement values. function part set four column-merging functions. two general cols_merge() function specialized cols_merge_uncert() cols_merge_n_pct() functions. functions operate similarly, non-target columns can optionally hidden output table hide_columns autohide options.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two columns to a value range column — cols_merge_range","text":"Use gtcars create gt table, keeping model, mpg_c, mpg_h columns. Merge \"mpg*\" columns together single range column (labeled MPG, italics) using cols_merge_range() function.","code":"gtcars %>%   dplyr::select(model, starts_with(\"mpg\")) %>%   dplyr::slice(1:8) %>%   gt() %>%   cols_merge_range(     col_begin = mpg_c,     col_end = mpg_h   ) %>%   cols_label(mpg_c = md(\"*MPG*\"))"},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge two columns to a value range column — cols_merge_range","text":"4-11","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"cols_merge_uncert() function specialized variant cols_merge() function. takes input base value column (col_val) either: (1) single uncertainty column, (2) two columns representing lower upper uncertainty bounds. columns essentially merged single column (col_val). results column values associated uncertainties (e.g., 12.0 ± 0.1), columns specified col_uncert hidden appearing output table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"","code":"cols_merge_uncert(data, col_val, col_uncert, sep = \" +/- \", autohide = TRUE)"},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"data table object created using gt() function. col_val single column name contains base values. column values mutated. col_uncert Either one two column names contain uncertainty values. common case involves supplying single column uncertainties; values combined col_val. Less commonly, lower upper uncertainty bounds may different. case two columns (representing lower upper uncertainty values away col_val, respectively) provided. Since often want uncertainty value columns output table, can automatically hide col_uncert columns autohide option. sep separator text contains uncertainty mark single uncertainty value. default value \" +/- \" indicates appropriate plus/minus mark used depending output context. want special symbol taken literally, can supplied within () function. autohide option automatically hide columns specified col_uncert. columns state changed 'hidden' behave , just displayed finalized table. default, set TRUE.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"function somewhat replicated using cols_merge() case single column supplied col_uncert, however, cols_merge_uncert() employs following specialized semantics NA handling: NAs col_val result missing values merged column (e.g., NA + 0.1 = NA) NAs col_uncert (col_val) result base values merged column (e.g., 12.0 + NA = 12.0) NAs col_val col_uncert result missing values merged column (e.g., NA + NA = NA) resulting NA values col_val column following merge operation can easily formatted using sub_missing() function. function part set four column-merging functions. two general cols_merge() function specialized cols_merge_range() cols_merge_n_pct() functions. functions operate similarly, non-target columns can optionally hidden output table hide_columns autohide options.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"Use exibble create gt table, keeping currency num columns. Merge columns one base value uncertainty (formatting num column) using cols_merge_uncert() function.","code":"exibble %>%   dplyr::select(currency, num) %>%   dplyr::slice(1:7) %>%   gt() %>%   fmt_number(     columns = num,     decimals = 3,     use_seps = FALSE   ) %>%   cols_merge_uncert(     col_val = currency,     col_uncert = num   ) %>%   cols_label(currency = \"value + uncert.\")"},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"4-10","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Move one or more columns — cols_move","title":"Move one or more columns — cols_move","text":"occasions need move columns way way, can make use cols_move() function. true movement columns can done upstream gt, much easier less error prone use function provided . movement procedure takes one specified columns (columns argument) places right different column (argument). ordering columns moved preserved, ordering columns table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move one or more columns — cols_move","text":"","code":"cols_move(data, columns, after)"},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move one or more columns — cols_move","text":"data table object created using gt() function. columns column names move group different position. order remaining columns preserved. column name used anchor insertion moved columns. moved columns placed right column.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move one or more columns — cols_move","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move one or more columns — cols_move","text":"columns supplied columns must exist table none can argument. column must also exist one column provided . need place one columns beginning column series, cols_move_to_start() function used. Similarly, columns move placed end column series use cols_move_to_end().","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move one or more columns — cols_move","text":"Use countrypops create gt table. remaining columns, position population country_name cols_move() function.","code":"countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_move(     columns = population,     after = country_name   )"},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Move one or more columns — cols_move","text":"4-7","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":null,"dir":"Reference","previous_headings":"","what":"Move one or more columns to the end — cols_move_to_end","title":"Move one or more columns to the end — cols_move_to_end","text":"possible move set columns end column series, need specify columns moved. can done upstream gt, function makes process much easier less error prone. ordering columns moved end preserved (ordering columns table).","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move one or more columns to the end — cols_move_to_end","text":"","code":"cols_move_to_end(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move one or more columns to the end — cols_move_to_end","text":"data table object created using gt() function. columns column names move right-side table. order columns provided preserved (case remaining columns).","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move one or more columns to the end — cols_move_to_end","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move one or more columns to the end — cols_move_to_end","text":"columns supplied columns must exist table. need place one columns start column series, cols_move_to_start() function used. control offered cols_move() function, columns placed specific column.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move one or more columns to the end — cols_move_to_end","text":"Use countrypops create gt table. remaining columns, move year column end column series cols_move_to_end() function.    Use countrypops create gt table. remaining columns, move year country_name end column series.","code":"countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_move_to_end(columns = year) countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_move_to_end(columns = c(year, country_name))"},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Move one or more columns to the end — cols_move_to_end","text":"4-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Move one or more columns to the start — cols_move_to_start","title":"Move one or more columns to the start — cols_move_to_start","text":"can easily move set columns beginning column series need specify columns. possible upstream gt, however, easier function presents less possibility error. ordering columns moved start preserved (ordering columns table).","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move one or more columns to the start — cols_move_to_start","text":"","code":"cols_move_to_start(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move one or more columns to the start — cols_move_to_start","text":"data table object created using gt() function. columns column names move left-side table. order columns provided preserved (case remaining columns).","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move one or more columns to the start — cols_move_to_start","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move one or more columns to the start — cols_move_to_start","text":"columns supplied columns must exist table. need place one columns end column series, cols_move_to_end() function used. control offered cols_move() function, columns placed specific column.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move one or more columns to the start — cols_move_to_start","text":"Use countrypops create gt table. remaining columns, move year column start column series cols_move_to_start().    Use countrypops create gt table. remaining columns, move year population start.","code":"countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_move_to_start(columns = year) countrypops %>%   dplyr::select(-contains(\"code\")) %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_move_to_start(columns = c(year, population))"},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Move one or more columns to the start — cols_move_to_start","text":"4-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":null,"dir":"Reference","previous_headings":"","what":"Unhide one or more columns — cols_unhide","title":"Unhide one or more columns — cols_unhide","text":"cols_unhide() function allows us take one hidden columns (usually made via cols_hide() function) make visible final output table. may important cases user obtains gt_tbl object hidden columns motivation reveal one .","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unhide one or more columns — cols_unhide","text":"","code":"cols_unhide(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unhide one or more columns — cols_unhide","text":"data table object created using gt() function. columns column names unhide output display table. Values provided correspond column names disregarded.","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unhide one or more columns — cols_unhide","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unhide one or more columns — cols_unhide","text":"hiding unhiding columns internally rendering directive, , columns 'hidden' still accessible useful expression provided rows argument. cols_unhide() function quietly changes visible state column (much like cols_hide() function) yield warnings messages changing state already-visible columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unhide one or more columns — cols_unhide","text":"Use countrypops create gt table. Hide country_code_2 country_code_3 columns cols_hide().    tab_1 object provided without code source data regenerate , , user wants reveal otherwise hidden columns cols_unhide() function becomes useful.","code":"tab_1 <-   countrypops %>%   dplyr::filter(country_name == \"Mongolia\") %>%   tail(5) %>%   gt() %>%   cols_hide(columns = c(country_code_2, country_code_3))  tab_1 tab_1 %>% cols_unhide(columns = country_code_2)"},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Unhide one or more columns — cols_unhide","text":"4-9","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the widths of columns — cols_width","title":"Set the widths of columns — cols_width","text":"Manual specifications column widths can performed using cols_width() function. choose columns get specific widths. can units pixels (easily set use px() helper function), , percentages (pct() helper function useful). Width assignments supplied ... two-sided formulas, left-hand side defines target columns right-hand side single dimension.","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the widths of columns — cols_width","text":"","code":"cols_width(.data, ..., .list = list2(...))"},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the widths of columns — cols_width","text":".data table object created using gt() function. ... Expressions assignment column widths table columns .data. Two-sided formulas (e.g, <LHS> ~ <RHS>) can used, left-hand side corresponds selections columns right-hand side evaluates single-length character values form {##}px (.e., pixel dimensions); px() helper function best used purpose. Column names enclosed c(). column-based select helpers starts_with(), ends_with(), contains(), matches(), one_of(), everything() can used LHS. Subsequent expressions operate columns assigned previously result overwriting column width values (cols_width() call across separate calls). columns can assigned default width value using everything() left-hand side. .list Allows use list input alternative ....","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the widths of columns — cols_width","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the widths of columns — cols_width","text":"Column widths can set absolute relative values (px percentage values). columns specified treated variable width. sizing behavior column widths depends combination value types, , whether table width set (, , expressed absolute relative value). Widths table container can individually modified table.width container.width arguments within tab_options()).","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the widths of columns — cols_width","text":"Use exibble create gt table. can specify widths columns cols_width(). done named arguments ..., specifying exact widths table columns (using everything() end capture remaining columns).","code":"exibble %>%   dplyr::select(     num, char, date,     datetime, row   ) %>%   gt() %>%   cols_width(     num ~ px(150),     ends_with(\"r\") ~ px(100),     starts_with(\"date\") ~ px(200),     everything() ~ px(60)   )"},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Set the widths of columns — cols_width","text":"4-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":null,"dir":"Reference","previous_headings":"","what":"Yearly populations of countries from 1960 to 2017 — countrypops","title":"Yearly populations of countries from 1960 to 2017 — countrypops","text":"dataset presents yearly, total populations countries. Total population based counts residents regardless legal status citizenship. Country identifiers include English-language country names, 2- 3-letter ISO 3166-1 country codes. row contains population value given year (1960 2017). NA values populations indicate non-existence country year.","code":""},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yearly populations of countries from 1960 to 2017 — countrypops","text":"","code":"countrypops"},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yearly populations of countries from 1960 to 2017 — countrypops","text":"tibble 12470 rows 5 variables: country_name Name country country_code_2 2-letter ISO 3166-1 country code country_code_3 3-letter ISO 3166-1 country code year year population estimate population population estimate, midway year","code":""},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Yearly populations of countries from 1960 to 2017 — countrypops","text":"https://data.worldbank.org/indicator/SP.POP.TOTL","code":""},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Yearly populations of countries from 1960 to 2017 — countrypops","text":"glimpse data available countrypops.","code":"dplyr::glimpse(countrypops) #> Rows: 12,470 #> Columns: 5 #> $ country_name   <chr> \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"~ #> $ country_code_2 <chr> \"AW\", \"AW\", \"AW\", \"AW\", \"AW\", \"AW\", \"AW\", \"AW\", \"AW\", \"~ #> $ country_code_3 <chr> \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\",~ #> $ year           <int> 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1~ #> $ population     <int> 54211, 55438, 56225, 56695, 57032, 57360, 57715, 58055,~"},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Yearly populations of countries from 1960 to 2017 — countrypops","text":"11-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/currency.html","id":null,"dir":"Reference","previous_headings":"","what":"Supply a custom currency symbol to fmt_currency() — currency","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"currency() helper function makes easy specify context-aware currency symbol currency argument fmt_currency(). Since gt can render tables several output formats, currency() allows different variations custom symbol based output context (html, latex, rtf, default). number decimal places custom currency defaults 2, however, value set decimals argument fmt_currency() take precedence.","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"","code":"currency(..., .list = list2(...))"},{"path":"https://gt.rstudio.com/reference/currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"... One named arguments using output contexts names currency symbol text values. .list Allows use list input alternative ....","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"list object class gt_currency.","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"can use combination html, latex, rtf, default named arguments currency text namesake contexts. default value used fallback exist dedicated currency text value particular output context (e.g., table rendered HTML use currency(latex = \"LTC\", default = \"ltc\"), currency symbol \"ltc\". convenience, provide single string without name, taken default (.e., currency(\"ltc\") equivalent currency(default = \"ltc\")). However, specify currency strings multiple output contexts, names required every context.","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"Use exibble create gt table. Format currency column currency values guilder (defunct Dutch currency).","code":"exibble %>%   gt() %>%   fmt_currency(     columns = currency,     currency = currency(       html = \"&fnof;\",       default = \"f\"     ),     decimals = 2   )"},{"path":"https://gt.rstudio.com/reference/currency.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"7-19","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/data_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Set data cell colors using a palette or a color function — data_color","title":"Set data cell colors using a palette or a color function — data_color","text":"possible add color data cells according values. data_color() function colors rows columns supplied. two ways define cells colored: (1) use supplied color palette, (2) use color mapping function available scales package. first method colorizes cell data according whether values character numeric. second method provides control cells colored since provide explicit color function thus requirements bin counts, cut points, numeric domain. Finally, can choose whether apply cell-specific colors either cell background cell text.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set data cell colors using a palette or a color function — data_color","text":"","code":"data_color(   data,   columns,   colors,   alpha = NULL,   apply_to = c(\"fill\", \"text\"),   autocolor_text = TRUE,   contrast_algo = c(\"apca\", \"wcag\") )"},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set data cell colors using a palette or a color function — data_color","text":"data table object created using gt() function. columns columns wherein changes cell data colors occur. colors Either color mapping function scales package vector colors use distinct value level provided columns. color mapping functions : scales::col_quantile(), scales::col_bin(), scales::col_numeric(), scales::col_factor(). providing vector colors palette, color value provided must either color name (set colors provided grDevices::colors()) hexadecimal string form \"#RRGGBB\" \"#RRGGBBAA\". alpha optional, fixed alpha transparency value applied colors provided (regardless whether color palette directly supplied generated color mapping function). apply_to style element colors applied ? Options include cell background (default, given \"fill\") cell text (\"text\"). autocolor_text option let gt modify coloring text within cells undergoing background coloring. result better text--background color contrast. default, set TRUE. contrast_algo color contrast algorithm use autocolor_text = TRUE. default \"apca\" (Accessible Perceptual Contrast Algorithm) alternative \"wcag\" (Web Content Accessibility Guidelines).","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set data cell colors using a palette or a color function — data_color","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set data cell colors using a palette or a color function — data_color","text":"col_*() color mapping functions scales package can used colors argument. functions map data values (numeric factor/character) colors according provided palette. scales::col_numeric(): provides simple linear mapping continuous numeric data interpolated palette. scales::col_bin(): provides mapping continuous numeric data value-based bins. internally uses base::cut() function. scales::col_quantile(): provides mapping continuous numeric data quantiles. internally uses stats::quantile() function. scales::col_factor(): provides mapping factors colors. palette discrete different number colors number factors, interpolation used. default, gt choose ideal text color (maximal contrast) colorizing background data cells. option can disabled setting autocolor_text FALSE. Choosing right color palette can often difficult hard discover suitable palettes obtain vector colors. make process easier can elect use paletteer package, makes wide range palettes various R packages readily available. info_paletteer() information table allows us easily inspect discrete color palettes available paletteer. need specify package palette calling paletteer::paletteer_d() function, , get palette vector hexadecimal colors.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set data cell colors using a palette or a color function — data_color","text":"Use countrypops create gt table. Apply color scale population column scales::col_numeric, four supplied colors, domain.    Use pizzaplace create gt table. Apply colors \"ggsci::red_material\" palette (ggsci R package easily gotten paletteer package, info info_paletteer()) sold income columns. Setting domain scales::col_numeric() NULL use bounds available data domain.","code":"countrypops %>%   dplyr::filter(country_name == \"Mongolia\") %>%   dplyr::select(-contains(\"code\")) %>%   tail(10) %>%   gt() %>%   data_color(     columns = population,     colors = scales::col_numeric(       palette = c(\"red\", \"orange\", \"green\", \"blue\"),       domain = c(0.2E7, 0.4E7)     )   ) pizzaplace %>%   dplyr::filter(type %in% c(\"chicken\", \"supreme\")) %>%   dplyr::group_by(type, size) %>%   dplyr::summarize(     sold = dplyr::n(),     income = sum(price),     .groups = \"drop\"   ) %>%   gt(     rowname_col = \"size\",     groupname_col = \"type\"   ) %>%   data_color(     columns = c(sold, income),     colors = scales::col_numeric(       palette = paletteer::paletteer_d(         palette = \"ggsci::red_material\"       ) %>%         as.character(),       domain = NULL     )   )"},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Set data cell colors using a palette or a color function — data_color","text":"3-22","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":null,"dir":"Reference","previous_headings":"","what":"A vector of default fonts for use with gt tables — default_fonts","title":"A vector of default fonts for use with gt tables — default_fonts","text":"vector fonts given default_fonts() used gt table rendered HTML. can specify additional fonts use default set placed act fallbacks. useful specifying font values cell_text() function (used tab_style() function). using opt_table_font() (also font argument) probably need specify vector fonts since handled add option (TRUE default).","code":""},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A vector of default fonts for use with gt tables — default_fonts","text":"","code":"default_fonts()"},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A vector of default fonts for use with gt tables — default_fonts","text":"character vector font names.","code":""},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A vector of default fonts for use with gt tables — default_fonts","text":"Use exibble create gt table. Attempting modify fonts used time column much safer default_fonts() appended end font listing cell_text() call (\"Comic Sansa\" \"Menloa\" fonts exist, , get first available font default_fonts() set).","code":"exibble %>%   dplyr::select(char, time) %>%   gt() %>%   tab_style(     style = cell_text(       font = c(         \"Comic Sansa\", \"Menloa\",         default_fonts()       )     ),     locations = cells_body(columns = time)   )"},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"A vector of default fonts for use with gt tables — default_fonts","text":"7-28","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform LaTeX escaping — escape_latex","title":"Perform LaTeX escaping — escape_latex","text":"Text may contain several characters special meanings LaTeX. function transform character vector safe use within LaTeX tables.","code":""},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform LaTeX escaping — escape_latex","text":"","code":"escape_latex(text)"},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform LaTeX escaping — escape_latex","text":"text character vector containing text LaTeX-escaped.","code":""},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform LaTeX escaping — escape_latex","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform LaTeX escaping — escape_latex","text":"7-25","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/exibble.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy example tibble for testing with gt: exibble — exibble","title":"A toy example tibble for testing with gt: exibble — exibble","text":"tibble contains data different classes, makes well-suited quick experimentation functions package. contains eight rows numeric, character, factor columns. last 4 rows contain NA values majority tibble's columns (1 missing value per column). date, time, datetime columns character-based dates/times familiar ISO 8601 format. row group columns provide unique rownames two groups (grp_a grp_b) experimenting gt() function's rowname_col groupname_col arguments.","code":""},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A toy example tibble for testing with gt: exibble — exibble","text":"","code":"exibble"},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toy example tibble for testing with gt: exibble — exibble","text":"tibble 8 rows 9 variables: num numeric column ordered increasingly larger values char character column composed names fruits h fctr factor column numbers 1 8, written date, time, datetime character columns dates, times, datetimes currency numeric column useful testing currency-based formatting row character column format row_X can useful testing row captions table stub group character column four grp_a values four grp_b values can useful testing tables contain row groups","code":""},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A toy example tibble for testing with gt: exibble — exibble","text":"exibble.","code":"exibble #> # A tibble: 8 x 9 #>           num char       fctr  date       time  datetime    currency row   group #>         <dbl> <chr>      <fct> <chr>      <chr> <chr>          <dbl> <chr> <chr> #> 1       0.111 apricot    one   2015-01-15 13:35 2018-01-01~    50.0  row_1 grp_a #> 2       2.22  banana     two   2015-02-15 14:40 2018-02-02~    18.0  row_2 grp_a #> 3      33.3   coconut    three 2015-03-15 15:45 2018-03-03~     1.39 row_3 grp_a #> 4     444.    durian     four  2015-04-15 16:50 2018-04-04~ 65100    row_4 grp_a #> 5    5550     <NA>       five  2015-05-15 17:55 2018-05-05~  1326.   row_5 grp_b #> 6      NA     fig        six   2015-06-15 <NA>  2018-06-06~    13.3  row_6 grp_b #> 7  777000     grapefruit seven <NA>       19:10 2018-07-07~    NA    row_7 grp_b #> 8 8880000     honeydew   eight 2015-08-15 20:20 <NA>            0.44 row_8 grp_b"},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"A toy example tibble for testing with gt: exibble — exibble","text":"11-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a vector of formatted cells from a gt object — extract_cells","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"Get vector cell data gt_tbl object. output vector cell data formatted way table.","code":""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"","code":"extract_cells(   data,   columns,   rows = everything(),   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"data table object created using gt() function. columns columns containing cells extract. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows limit extraction cells. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"vector cell data extracted gt table.","code":""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"create gt table exibble dataset use next examples:   can extract cell table extract_cells() function. done providing column row intersection:     Multiple cells can extracted. get first four cells char column.     can format cells expect formatting fully retained extraction.","code":"gt_tbl <- gt(exibble, rowname_col = \"row\", groupname_col = \"group\") extract_cells(gt_tbl, columns = num, row = 1) #> [1] \"1.111e-01\" extract_cells(gt_tbl, columns = char, rows = 1:4) #> [1] \"apricot\" \"banana\" \"coconut\" \"durian\" gt_tbl %>%   fmt_number(columns = num, decimals = 2) %>%   extract_cells(columns = num, rows = 1) #> [1] \"0.11\""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"13-7","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a summary list from a gt object — extract_summary","title":"Extract a summary list from a gt object — extract_summary","text":"Get list summary row data frames gt_tbl object summary rows added via summary_rows() function. output data frames contain group_id rowname columns, whereby rowname contains descriptive stub labels summary rows.","code":""},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a summary list from a gt object — extract_summary","text":"","code":"extract_summary(data)"},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a summary list from a gt object — extract_summary","text":"data table object created using gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a summary list from a gt object — extract_summary","text":"list data frames containing summary data.","code":""},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a summary list from a gt object — extract_summary","text":"Use sp500 create gt table row groups. Create summary rows labeled min, max, avg every row group summary_rows(). , extract summary rows list object.   Use summary list make new gt table. key thing use dplyr::bind_rows() pass tibble gt().","code":"summary_extracted <-   sp500 %>%   dplyr::filter(date >= \"2015-01-05\" & date <=\"2015-01-30\") %>%   dplyr::arrange(date) %>%   dplyr::mutate(week = paste0(\"W\", strftime(date, format = \"%V\"))) %>%   dplyr::select(-adj_close, -volume) %>%   gt(     rowname_col = \"date\",     groupname_col = \"week\"   ) %>%   summary_rows(     groups = TRUE,     columns = c(open, high, low, close),     fns = list(       min = ~min(.),       max = ~max(.),       avg = ~mean(.)     ),     formatter = fmt_number,     use_seps = FALSE   ) %>%   extract_summary()  summary_extracted #> $summary_df_data_list #> $summary_df_data_list$W02 #> # A tibble: 3 x 8 #>   group_id rowname  date  open  high   low close  week #>   <chr>    <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W02      min        NA 2006. 2030. 1992. 2003.    NA #> 2 W02      max        NA 2063. 2064. 2038. 2062.    NA #> 3 W02      avg        NA 2035. 2049. 2017. 2031.    NA #>  #> $summary_df_data_list$W03 #> # A tibble: 3 x 8 #>   group_id rowname  date  open  high   low close  week #>   <chr>    <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W03      min        NA 1992. 2018. 1988. 1993.    NA #> 2 W03      max        NA 2046. 2057. 2023. 2028.    NA #> 3 W03      avg        NA 2020. 2033. 2000. 2015.    NA #>  #> $summary_df_data_list$W04 #> # A tibble: 3 x 8 #>   group_id rowname  date  open  high   low close  week #>   <chr>    <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W04      min        NA 2020. 2029. 2004. 2023.    NA #> 2 W04      max        NA 2063. 2065. 2051. 2063.    NA #> 3 W04      avg        NA 2035. 2049. 2023. 2042.    NA #>  #> $summary_df_data_list$W05 #> # A tibble: 3 x 8 #>   group_id rowname  date  open  high   low close  week #>   <chr>    <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W05      min        NA 2002. 2023. 1989. 1995.    NA #> 2 W05      max        NA 2050. 2058. 2041. 2057.    NA #> 3 W05      avg        NA 2030. 2039. 2009. 2021.    NA summary_extracted %>%   unlist(recursive = FALSE) %>%   dplyr::bind_rows() %>%   gt(groupname_col = \"group_id\")"},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Extract a summary list from a gt object — extract_summary","text":"13-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a column format with a formatter function — fmt","title":"Set a column format with a formatter function — fmt","text":"fmt() function provides way execute custom formatting functionality raw data values way can consider output contexts. Along columns rows arguments provide precision targeting data cells, fns argument allows define one functions manipulating raw data. providing single function fns, recommended format form: fns = function(x) .... single function format targeted data cells way regardless output format (e.g., HTML, LaTeX, RTF). require formatting x depends output format, list functions can provided html, latex, rtf, default contexts. can form fns = list(html = function(x) ..., latex = function(x) ..., default = function(x) ...). multiple-function case, recommended including default function fallback contexts provided.","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a column format with a formatter function — fmt","text":"","code":"fmt(data, columns = everything(), rows = everything(), fns)"},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a column format with a formatter function — fmt","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). fns Either single formatting function named list functions.","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a column format with a formatter function — fmt","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Set a column format with a formatter function — fmt","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a column format with a formatter function — fmt","text":"Use exibble create gt table. Format numeric values num column function supplied fns argument.","code":"exibble %>%   dplyr::select(-row, -group) %>%   gt() %>%   fmt(     columns = num,     fns = function(x) {       paste0(\"'\", x * 1000, \"'\")     }   )"},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Set a column format with a formatter function — fmt","text":"3-17","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as bytes — fmt_bytes","title":"Format values as bytes — fmt_bytes","text":"numeric values gt table, can transform values bytes human readable units. fmt_bytes() function allows formatting byte sizes either two common representations: (1) decimal units (powers 1000, examples \"kB\" \"MB\"), (2) binary units (powers 1024, examples \"KiB\" \"MiB\"). assumed input numeric values represent number bytes automatic truncation values occur. numeric values scaled range 1 <1000 decorated correct unit symbol according standard chosen. control formatting byte sizes, can use following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as bytes — fmt_bytes","text":"","code":"fmt_bytes(   data,   columns,   rows = everything(),   standard = c(\"decimal\", \"binary\"),   decimals = 1,   n_sigfig = NULL,   drop_trailing_zeros = TRUE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = TRUE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as bytes — fmt_bytes","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). standard way express large byte sizes. decimals option specify exact number decimal places use. default number decimal places 1. n_sigfig option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive numbers (effectively showing sign numbers except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. incl_space option whether include space value units. default TRUE uses space character separation. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as bytes — fmt_bytes","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as bytes — fmt_bytes","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as bytes — fmt_bytes","text":"Use exibble create gt table. Format num column byte sizes decimal standard.    Create similar table fmt_bytes() function, time showing byte sizes binary values.","code":"exibble %>%   dplyr::select(num) %>%   gt() %>%   fmt_bytes(columns = num) exibble %>%   dplyr::select(num) %>%   gt() %>%   fmt_bytes(     columns = num,     standard = \"binary\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as bytes — fmt_bytes","text":"3-10","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as currencies — fmt_currency","title":"Format values as currencies — fmt_currency","text":"numeric values gt table, can perform currency-based formatting. function supports automatic formatting three-letter numeric currency code. can also specify custom currency formatted according output context currency() helper function. Numeric formatting facilitated use locale ID. fine control conversion numeric values currency values, take advantage following options: currency: providing currency code common currency name procure correct currency symbol number currency subunits; also use currency() helper function specify custom currency currency symbol placement: currency symbol can placed values decimals/subunits: choice number decimal places, choice decimal symbol, option whether include exclude currency subunits (decimal portion) negative values: choice negative sign parentheses values less zero digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted currency values locale-based formatting: providing locale ID result currency formatting specific chosen locale can use info_currencies() function useful reference possible inputs currency argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as currencies — fmt_currency","text":"","code":"fmt_currency(   data,   columns,   rows = everything(),   currency = \"USD\",   use_subunits = TRUE,   decimals = NULL,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   placement = \"left\",   incl_space = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as currencies — fmt_currency","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). currency currency use numeric value. input can supplied 3-letter currency code (e.g., \"USD\" U.S. Dollars, \"EUR\" Euro currency). Use info_currencies() get information table valid currency codes examples . Alternatively, can provide common currency name (e.g., \"dollar\", \"pound\", \"yen\", etc.) simplify process. Use info_currencies() type == \"symbol\" option view information table supported currency symbol names along examples. can also use currency() helper function specify custom currency, string vary across output contexts. example, using currency(html = \"&fnof;\", default = \"f\") give us suitable glyph Dutch guilder HTML output table, simply letter \"f\" output contexts). Please note decimals default 2 using currency() helper function. nothing provided currency \"USD\" (U.S. dollars) used. use_subunits option whether subunits portion currency value displayed. default, TRUE. decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. value ignored using suffixing options (.e., suffixing set FALSE). suffixing option scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can also specify symbols use value ranges using character vector preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\")). Including NA values vector ensure particular range either included transformation (e.g, c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. placement placement currency symbol. can either left (default) right. incl_space option whether include space value currency symbol. default introduce space character. system numbering system use. default, international numbering system (\"intl\") whereby grouping separators (.e., sep_mark) separated three digits. alternative system, Indian numbering system (\"ind\") uses grouping separators correspond thousand, lakh, crore, higher quantities. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as currencies — fmt_currency","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as currencies — fmt_currency","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as currencies — fmt_currency","text":"Use exibble create gt table. Format currency column currency values euros (\"EUR\").    Use exibble create gt table. Keep num currency, columns, , format columns using \"CNY\" \"GBP\" currencies.","code":"exibble %>%   gt() %>%   fmt_currency(     columns = currency,     currency = \"EUR\"   ) exibble %>%   dplyr::select(num, currency) %>%   gt() %>%   fmt_currency(     columns = num,     currency = \"CNY\"   ) %>%   fmt_currency(     columns = currency,     currency = \"GBP\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as currencies — fmt_currency","text":"3-8","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as dates — fmt_date","title":"Format values as dates — fmt_date","text":"Format input values time values using one 41 preset date styles. Input can form POSIXt (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as dates — fmt_date","text":"","code":"fmt_date(   data,   columns,   rows = everything(),   date_style = \"iso\",   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as dates — fmt_date","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). date_style date style use. default \"iso\" corresponds ISO 8601 date formatting. date styles can viewed using info_date_style(). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as dates — fmt_date","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as dates — fmt_date","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format values as dates — fmt_date","text":"need supply preset date style date_style argument. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can use info_date_style() within console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as dates — fmt_date","text":"Use exibble create gt table. Keep date time columns. Format date column dates formatted \"month_day_year\" date style.    Use exibble create gt table. Keep date time columns. Format date column mixed date formats (dates April different others expressions used rows argument).    Use exibble create another gt table, time date column. Format date column use \"yMMMEd\" date style (one 'flexible' styles). Also, set locale \"nl\" get dates Dutch.","code":"exibble %>%   dplyr::select(date, time) %>%   gt() %>%   fmt_date(     columns = date,     date_style = \"month_day_year\"   ) exibble %>%   dplyr::select(date, time) %>%   gt() %>%   fmt_date(     columns = date,     rows = as.Date(date) > as.Date(\"2015-04-01\"),     date_style = \"m_day_year\"   ) %>%   fmt_date(     columns = date,     rows = as.Date(date) <= as.Date(\"2015-04-01\"),     date_style = \"day_m_year\"   ) exibble %>%   dplyr::select(date) %>%   gt() %>%   fmt_date(     columns = date,     date_style = \"yMMMEd\",     locale = \"nl\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as dates — fmt_date","text":"3-11","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as datetimes — fmt_datetime","title":"Format values as datetimes — fmt_datetime","text":"Format input values datetime values using either presets date time components formatting directive (can either use CLDR datetime pattern strptime formatting). Input can form POSIXt (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as datetimes — fmt_datetime","text":"","code":"fmt_datetime(   data,   columns,   rows = everything(),   date_style = \"iso\",   time_style = \"iso\",   sep = \" \",   format = NULL,   tz = NULL,   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as datetimes — fmt_datetime","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). date_style date style use. default \"iso\" corresponds ISO 8601 date formatting. date styles can viewed using info_date_style(). time_style time style use. default \"iso\" corresponds times formatted within ISO 8601 datetime values. time styles can viewed using info_time_style(). sep separator string use date time components. default, single space character (\" \"). used specifying format code. format optional formatting string used generating custom dates/times. used arguments governing preset styles (date_style time_style) ignored favor formatting via format string. tz time zone printing dates/times (.e., output). default NULL preserve time zone input data output. providing time zone, must one recognized user's operating system (vector valid tz values can produced OlsonNames()). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as datetimes — fmt_datetime","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as datetimes — fmt_datetime","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format values as datetimes — fmt_datetime","text":"can supply preset date style date_style argument separately handle date portion output. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can use info_date_style() within console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format values as datetimes — fmt_datetime","text":"can supply preset time style time_style argument separately handle time portion output. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. flexible formats (begin \"E\") include day week. Keep mind pairing time_style values date_style avoid redundant repeating information. can use info_time_style() within console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-a-cldr-datetime-pattern","dir":"Reference","previous_headings":"","what":"Formatting with a CLDR datetime pattern","title":"Format values as datetimes — fmt_datetime","text":"can use CLDR datetime pattern format argument create highly customized locale-aware output. character string consists two types elements: Pattern fields, repeat specific pattern character one times. fields replaced date time data formatting. character sets -Z -z reserved use pattern characters. Literal text, output verbatim formatting. can include: characters outside reserved character sets, including spaces punctuation. text single vertical quotes (e.g., 'text'). Two adjacent single vertical quotes (''), represent literal single quote, either inside outside quoted text. number pattern fields quite sizable first look CLDR datetime patterns work. use datetime string \"2018-07-04T22:05:09.2358(America/Vancouver)\" examples follow. \"mm/dd/y\" -> \"05/04/2018\" \"EEEE, MMMM d, y\" -> \"Wednesday, July 4, 2018\" \"MMM d E\" -> \"Jul 4 Wed\" \"HH:mm\" -> \"22:05\" \"h:mm \" -> \"10:05 PM\" \"EEEE, MMMM d, y '' h:mm \" -> \"Wednesday, July 4, 2018 10:05 PM\" individual pattern fields:","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"calendar-year","dir":"Reference","previous_headings":"","what":"Calendar Year","title":"Format values as datetimes — fmt_datetime","text":"yields calendar year, always numeric. cases length \"y\" field specifies minimum number digits display, zero-padded necessary. digits displayed needed show full year. exception: \"yy\" gives use just two low-order digits year, zero-padded necessary. use cases, \"y\" \"yy\" good enough.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"year-in-the-week-in-year-calendar","dir":"Reference","previous_headings":"","what":"Year in the Week in Year Calendar","title":"Format values as datetimes — fmt_datetime","text":"year 'Week Year' based calendars year transition occurs week boundary. may differ calendar year \"y\" near year transition. numeric year designation used conjunction pattern character \"w\" ISO year-week calendar defined ISO 8601.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"am-pm-period-of-day-plus-noon-and-midnight","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day Plus Noon and Midnight","title":"Format values as datetimes — fmt_datetime","text":"() input_midnight: \"2020-05-05T00:00:00\" (b) input_noon: \"2020-05-05T12:00:00\"","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"flexible-day-periods","dir":"Reference","previous_headings":"","what":"Flexible Day Periods","title":"Format values as datetimes — fmt_datetime","text":"() input_morning: \"2020-05-05T00:08:30\" (b) input_afternoon: \"2020-05-05T14:00:00\"","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour-","dir":"Reference","previous_headings":"","what":"Hour 1-12","title":"Format values as datetimes — fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour--1","dir":"Reference","previous_headings":"","what":"Hour 0-23","title":"Format values as datetimes — fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour--2","dir":"Reference","previous_headings":"","what":"Hour 0-11","title":"Format values as datetimes — fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour--3","dir":"Reference","previous_headings":"","what":"Hour 1-24","title":"Format values as datetimes — fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"milliseconds-elapsed-in-day","dir":"Reference","previous_headings":"","what":"Milliseconds Elapsed in Day","title":"Format values as datetimes — fmt_datetime","text":"Using: \"2011-07-27T00:07:19.7223\"","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"the-era-designator","dir":"Reference","previous_headings":"","what":"The Era Designator","title":"Format values as datetimes — fmt_datetime","text":"provides era name given date.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-a-strptime-format-code","dir":"Reference","previous_headings":"","what":"Formatting with a strptime format code","title":"Format values as datetimes — fmt_datetime","text":"Performing custom date/time formatting format argument can also occur strptime format code. works constructing string individual format codes representing formatted date time elements. indicated leading %, literal characters interpreted characters starting % character. First , look format code combinations work well together strptime format. give us intuition generally work. use datetime \"2015-06-08 23:05:37.48\" examples follow. \"%m/%d/%Y\" -> \"06/08/2015\" \"%, %B %e, %Y\" -> \"Monday, June 8, 2015\" \"%b %e %\" -> \"Jun 8 Mon\" \"%H:%M\" -> \"23:05\" \"%:%M %p\" -> \"11:05 pm\" \"%, %B %e, %Y %:%M %p\" -> \"Monday, June 8, 2015 11:05 pm\" individual format codes date components: \"%\" -> \"Mon\" (abbreviated day week name) \"%\" -> \"Monday\" (full day week name) \"%w\" -> \"1\" (day week number 0..6; Sunday 0) \"%u\" -> \"1\" (day week number 1..7; Monday 1, Sunday 7) \"%y\" -> \"15\" (abbreviated year, using final two digits) \"%Y\" -> \"2015\" (full year) \"%b\" -> \"Jun\" (abbreviated month name) \"%B\" -> \"June\" (full month name) \"%m\" -> \"06\" (month number) \"%d\" -> \"08\" (day number, zero-padded) \"%e\" -> \"8\" (day number without zero padding) \"%j\" -> \"159\" (day year, always zero-padded) \"%W\" -> \"23\" (week number year, always zero-padded) \"%V\" -> \"24\" (week number year, following ISO 8601 standard) \"%C\" -> \"20\" (century number) individual format codes time components: \"%H\" -> \"23\" (24h hour) \"%\" -> \"11\" (12h hour) \"%M\" -> \"05\" (minute) \"%S\" -> \"37\" (second) \"%OS3\" -> \"37.480\" (seconds decimals; 3 decimal places ) %p -> \"pm\" (PM indicator) extra formats may find useful: \"%z\" -> \"+0000\" (signed time zone offset, using UTC) \"%F\" -> \"2015-06-08\" (date ISO 8601 date format) \"%%\" -> \"%\" (literal \"%\" character, case need )","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as datetimes — fmt_datetime","text":"Use exibble create gt table. Keep datetime column. Format column dates formatted \"month_day_year\" style times \"h_m_s_p\" 12-hour time style.    Using input table, can use flexible date time styles. Two work well together \"MMMEd\" \"Hms\". mutate depending locale. use default locale first 3 rows Danish locale (\"da\") remaining rows.    possible use format argument write formatting specification. Using CLDR datetime pattern \"EEEE, MMMM d, y '' h:mm (zzzz)\" gives us datetime outputs time zone formatting. provide time zone ID (\"America/Vancouver\") tz argument.","code":"exibble %>%   dplyr::select(datetime) %>%   gt() %>%   fmt_datetime(     columns = datetime,     date_style = \"month_day_year\",     time_style = \"h_m_s_p\"   ) exibble %>%   dplyr::select(datetime) %>%   gt() %>%   fmt_datetime(     columns = datetime,     date_style = \"MMMEd\",     time_style = \"Hms\",     locale = \"da\"   ) %>%   fmt_datetime(     columns = datetime,     rows = 1:3,     date_style = \"MMMEd\",     time_style = \"Hms\"   ) exibble %>%   dplyr::select(datetime) %>%   gt() %>%   fmt_datetime(     columns = datetime,     format = \"EEEE, MMMM d, y 'at' h:mm a (zzzz)\",     tz = \"America/Vancouver\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as datetimes — fmt_datetime","text":"3-13","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numeric or duration values as styled time duration strings — fmt_duration","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"Format input values time duration values whether input values numbers difftime class. can specify time units numeric input values (weeks, days, hours, minutes, seconds) output can customized duration style (corresponding narrow, wide, colon-separated, ISO forms) choice output units ranging weeks seconds.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"","code":"fmt_duration(   data,   columns,   rows = everything(),   input_units = NULL,   output_units = NULL,   duration_style = c(\"narrow\", \"wide\", \"colon-sep\", \"iso\"),   trim_zero_units = TRUE,   max_output_units = NULL,   pattern = \"{x}\",   use_seps = TRUE,   sep_mark = \",\",   force_sign = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). input_units one selected columns contains numeric values, keyword must provided input_units gt determine values interpreted terms duration. accepted units : \"seconds\", \"minutes\", \"hours\", \"days\", \"weeks\". output_units Controls output time units. default, NULL, means gt automatically choose time units based input duration value. control time units considered output (trimming trim_zero_units) can specify vector one following keywords: \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\". duration_style choice four formatting styles output duration values. \"narrow\" (default style), duration values formatted single letter time-part units (e.g., 1.35 days styled \"1d 8h 24m). \"wide\", example value expanded \"1 day 8 hours 24 minutes\" formatting. \"colon-sep\" style put days, hours, minutes, seconds \"([D]/)[HH]:[MM]:[SS]\" format. \"iso\" style produce value conforms ISO 8601 rules duration values (e.g., 1.35 days become \"P1DT8H24M\"). trim_zero_units Provides methods remove output time units zero values. default TRUE duration values might otherwise formatted \"0w 1d 0h 4m 19s\" trim_zero_units = FALSE instead displayed \"1d 4m 19s\". Aside using TRUE/FALSE provide vector keywords precise control. keywords : (1) \"leading\", omit leading zero-value time units (e.g., \"0w 1d\" -> \"1d\"), (2) \"trailing\", omit trailing zero-value time units (e.g., \"3d 5h 0s\" -> \"3d 5h\"), \"internal\", removes internal zero-value time units (e.g., \"5d 0h 33m\" -> \"5d 33m\"). max_output_units output_units NULL, output time units unspecified left gt handle, numeric value provided max_output_units taken maximum number time units display output time duration values. default, NULL possible time units displayed. option effect duration_style = \"colon-sep\" (output_units can used customize type duration output). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative value display minus sign. system numbering system use. default, international numbering system (\"intl\") whereby grouping separators (.e., sep_mark) separated three digits. alternative system, Indian numbering system (\"ind\") uses grouping separators correspond thousand, lakh, crore, higher quantities. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"output-units-for-the-colon-separated-duration-style","dir":"Reference","previous_headings":"","what":"Output units for the colon-separated duration style","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"colon-separated duration style (enabled duration_style = \"colon-sep\") essentially clock-based output format uses display logic chronograph watch functionality. , default, display duration values (D/)HH:MM:SS format. duration values greater equal 24 hours number days prepended adjoining slash mark. output format versatile, can changed somewhat output_units option. following combinations output units permitted: c(\"minutes\", \"seconds\") -> MM:SS c(\"hours\", \"minutes\") -> HH:MM c(\"hours\", \"minutes\", \"seconds\") -> HH:MM:SS c(\"days\", \"hours\", \"minutes\") -> (D/)HH:MM specialized combinations result default set used, c(\"days\", \"hours\", \"minutes\", \"seconds\")","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"Use part sp500 table create gt table. Create difftime-based column format duration values displayed number days since March 30, 2020.","code":"sp500 %>%   dplyr::slice_head(n = 10) %>%   dplyr::mutate(     time_point = lubridate::ymd(\"2020-03-30\"),     time_passed = difftime(time_point, date)   ) %>%   dplyr::select(time_passed, open, close) %>%   gt(rowname_col = \"month\") %>%   fmt_duration(     columns = time_passed,     output_units = \"days\",     duration_style = \"wide\"   ) %>%   fmt_currency(columns = c(open, close))"},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"3-14","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values to engineering notation — fmt_engineering","title":"Format values to engineering notation — fmt_engineering","text":"numeric values gt table, can perform formatting targeted values rendered engineering notation. function, fine control formatted values following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: choice separator symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values to engineering notation — fmt_engineering","text":"","code":"fmt_engineering(   data,   columns,   rows = everything(),   decimals = 2,   drop_trailing_zeros = FALSE,   scale_by = 1,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values to engineering notation — fmt_engineering","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values to engineering notation — fmt_engineering","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values to engineering notation — fmt_engineering","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values to engineering notation — fmt_engineering","text":"Use exibble create gt table. Format num column engineering notation.","code":"exibble %>%   gt() %>%   fmt_engineering(columns = num)"},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values to engineering notation — fmt_engineering","text":"3-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as a mixed fractions — fmt_fraction","title":"Format values as a mixed fractions — fmt_fraction","text":"numeric values gt table, can perform mixed-fraction-based formatting. several options setting accuracy fractions. Furthermore, option choosing layout (.e., typesetting style) mixed-fraction output. following options available controlling type formatting: accuracy: express fractional part mixed fractions; three keyword options allowance arbitrary denominator settings simplification: option simplify fractions whenever possible layout: can choose output values diagonal inline fractions digit grouping separators: options enable/disable digit separators provide choice separator symbol whole number portion pattern: option use text pattern decoration formatted mixed fractions locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as a mixed fractions — fmt_fraction","text":"","code":"fmt_fraction(   data,   columns,   rows = everything(),   accuracy = NULL,   simplify = TRUE,   layout = c(\"inline\", \"diagonal\"),   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as a mixed fractions — fmt_fraction","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). accuracy type fractions generate. can either one keywords \"low\", \"med\", \"high\" (generate fractions denominators 1, 2, 3 digits, respectively) integer value greater zero obtain fractions fixed denominator (2 yields halves, 3 thirds, 4 quarters, etc.). latter option, using simplify = TRUE simplify fractions possible (e.g., 2/4 simplified 1/2). default, \"low\" option used. simplify choosing provide numeric value accuracy, option simplify fraction (possible) can taken TRUE (default). FALSE, denominators fractions fixed value provided accuracy. layout HTML output, \"inline\" layout default. layout places numerals fraction baseline uses standard slash character. \"diagonal\" layout generate fractions typeset raised/lowered numerals virgule. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). system numbering system use. default, international numbering system (\"intl\") whereby grouping separators (.e., sep_mark) separated three digits. alternative system, Indian numbering system (\"ind\") uses grouping separators correspond thousand, lakh, crore, higher quantities. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as a mixed fractions — fmt_fraction","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as a mixed fractions — fmt_fraction","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as a mixed fractions — fmt_fraction","text":"Use pizzaplace create gt table. Format f_sold f_income columns display fractions.","code":"pizzaplace %>%   dplyr::group_by(type, size) %>%   dplyr::summarize(     sold = dplyr::n(),     income = sum(price),     .groups = \"drop_last\"   ) %>%   dplyr::group_by(type) %>%   dplyr::mutate(     f_sold = sold / sum(sold),     f_income = income / sum(income),   ) %>%   dplyr::arrange(type, dplyr::desc(income)) %>%   gt(rowname_col = \"size\") %>%   tab_header(     title = \"Pizzas Sold in 2015\",     subtitle = \"Fraction of Sell Count and Revenue by Size per Type\"   ) %>%   fmt_integer(columns = sold) %>%   fmt_currency(columns = income) %>%   fmt_fraction(     columns = starts_with(\"f_\"),     accuracy = 10,     simplify = FALSE,     layout = \"diagonal\"   ) %>%   sub_missing(missing_text = \"\") %>%   tab_spanner(     label = \"Sold\",     columns = contains(\"sold\")   ) %>%   tab_spanner(     label = \"Revenue\",     columns = contains(\"income\")   ) %>%   text_transform(     locations = cells_body(),     fn = function(x) {       dplyr::case_when(         x == 0 ~ \"<em>nil<\/em>\",         x != 0 ~ x       )     }   ) %>%   cols_label(     sold = \"Amount\",     income = \"Amount\",     f_sold = md(\"_f_\"),     f_income = md(\"_f_\")   ) %>%   cols_align(align = \"center\", columns = starts_with(\"f\")) %>%   tab_options(     table.width = px(400),     row_group.as_column = TRUE   )"},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as a mixed fractions — fmt_fraction","text":"3-7","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as integers — fmt_integer","title":"Format values as integers — fmt_integer","text":"numeric values gt table, can perform number-based formatting targeted values always rendered integer values. can fine control integer formatting following options: digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as integers — fmt_integer","text":"","code":"fmt_integer(   data,   columns,   rows = everything(),   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   force_sign = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as integers — fmt_integer","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. value ignored using suffixing options (.e., suffixing set FALSE). suffixing option scale apply suffixes larger numbers (e.g., 1924000 can transformed 2M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can also specify symbols use value ranges using character vector preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\")). Including NA values vector ensure particular range either included transformation (e.g, c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. system numbering system use. default, international numbering system (\"intl\") whereby grouping separators (.e., sep_mark) separated three digits. alternative system, Indian numbering system (\"ind\") uses grouping separators correspond thousand, lakh, crore, higher quantities. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as integers — fmt_integer","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as integers — fmt_integer","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as integers — fmt_integer","text":"Use exibble create gt table. format num column integer values digit separators (use_seps = FALSE option).","code":"exibble %>%   dplyr::select(num, char) %>%   gt() %>%   fmt_integer(     columns = num,     use_seps = FALSE   )"},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as integers — fmt_integer","text":"3-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Markdown text — fmt_markdown","title":"Format Markdown text — fmt_markdown","text":"Markdown-formatted text incoming cells transformed appropriate output type render using fmt_markdown().","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Markdown text — fmt_markdown","text":"","code":"fmt_markdown(data, columns, rows = everything())"},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Markdown text — fmt_markdown","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Markdown text — fmt_markdown","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format Markdown text — fmt_markdown","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Markdown text — fmt_markdown","text":"Create Markdown-based text snippets.   Arrange text snippets tibble using dplyr::tribble() function. , create gt table format columns fmt_markdown().","code":"text_1a <- \" ### This is Markdown.  Markdown’s syntax is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean... assuming you’ve ever used email. \"  text_1b <- \" Info on Markdown syntax can be found [here](https://daringfireball.net/projects/markdown/). \"  text_2a <- \" The **gt** package has these datasets:   - `countrypops`  - `sza`  - `gtcars`  - `sp500`  - `pizzaplace`  - `exibble` \"  text_2b <- \" There's a quick reference [here](https://commonmark.org/help/). \" dplyr::tribble(   ~Markdown, ~md,   text_1a,   text_2a,   text_1b,   text_2b, ) %>%   gt() %>%   fmt_markdown(columns = everything()) %>%   tab_options(table.width = px(400))"},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format Markdown text — fmt_markdown","text":"3-15","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Format missing values (deprecated) — fmt_missing","title":"Format missing values (deprecated) — fmt_missing","text":"Format missing values (deprecated)","code":""},{"path":"https://gt.rstudio.com/reference/fmt_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format missing values (deprecated) — fmt_missing","text":"","code":"fmt_missing(   data,   columns = everything(),   rows = everything(),   missing_text = \"---\" )"},{"path":"https://gt.rstudio.com/reference/fmt_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format missing values (deprecated) — fmt_missing","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). missing_text text used place NA values rendered table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numeric values — fmt_number","title":"Format numeric values — fmt_number","text":"numeric values gt table, can perform number-based formatting targeted values rendered higher consideration tabular presentation. Furthermore, finer control numeric formatting following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numeric values — fmt_number","text":"","code":"fmt_number(   data,   columns,   rows = everything(),   decimals = 2,   n_sigfig = NULL,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numeric values — fmt_number","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals option specify exact number decimal places use. default number decimal places 2. n_sigfig option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. value ignored using suffixing options (.e., suffixing set FALSE). suffixing option scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can also specify symbols use value ranges using character vector preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\")). Including NA values vector ensure particular range either included transformation (e.g, c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. system numbering system use. default, international numbering system (\"intl\") whereby grouping separators (.e., sep_mark) separated three digits. alternative system, Indian numbering system (\"ind\") uses grouping separators correspond thousand, lakh, crore, higher quantities. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numeric values — fmt_number","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format numeric values — fmt_number","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numeric values — fmt_number","text":"Use exibble create gt table. Format num column numeric three decimal places use digit separators.    Use countrypops create gt table. Format numeric columns use large-number suffixing suffixing = TRUE option.","code":"exibble %>%   gt() %>%   fmt_number(     columns = num,     decimals = 3,     use_seps = FALSE   ) countrypops %>%   dplyr::select(country_code_3, year, population) %>%   dplyr::filter(country_code_3 %in% c(\"CHN\", \"IND\", \"USA\", \"PAK\", \"IDN\")) %>%   dplyr::filter(year > 1975 & year %% 5 == 0) %>%   tidyr::spread(year, population) %>%   dplyr::arrange(desc(`2015`)) %>%   gt(rowname_col = \"country_code_3\") %>%   fmt_number(     columns = 2:9,     decimals = 2,     suffixing = TRUE   )"},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format numeric values — fmt_number","text":"3-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as parts-per quantities — fmt_partsper","title":"Format values as parts-per quantities — fmt_partsper","text":"numeric values gt table can format values rendered per mille, ppm, ppb, etc., quantities. following list keywords (associated naming scaling factors) available use within fmt_partsper(): \"per-mille\": Per mille, (1 part 1,000) \"per-myriad\": Per myriad, (1 part 10,000) \"pcm\": Per cent mille (1 part 100,000) \"ppm\": Parts per million, (1 part 1,000,000) \"ppb\": Parts per billion, (1 part 1,000,000,000) \"ppt\": Parts per trillion, (1 part 1,000,000,000,000) \"ppq\": Parts per quadrillion, (1 part 1,000,000,000,000,000) function provides lot formatting control can use following options: custom symbol/units: can override automatic symbol units display choice situation warrants decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol value scaling toggle: choose disable automatic value scaling situation values already scaled coming (just require appropriate symbol unit display) pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as parts-per quantities — fmt_partsper","text":"","code":"fmt_partsper(   data,   columns,   rows = everything(),   to_units = c(\"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\"),   symbol = \"auto\",   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = \"auto\",   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as parts-per quantities — fmt_partsper","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). to_units keyword signifies desired output quantity. can following set: \"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\". symbol symbol/units use quantity. default, set \"auto\" gt choose appropriate symbol based to_units keyword output context. However, can changed supplying string (e.g, using symbol = \"ppbV\" to_units = \"ppb\"). decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. scale_values values scaled multiplication according keyword set to_units? default TRUE since expectation normally values proportions. Setting FALSE signifies values already scaled require appropriate symbol/units formatted. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. incl_space option whether include space value symbol/units. default \"auto\" provides spacing dependent mark . can directly controlled using either TRUE FALSE. system numbering system use. default, international numbering system (\"intl\") whereby grouping separators (.e., sep_mark) separated three digits. alternative system, Indian numbering system (\"ind\") uses grouping separators correspond thousand, lakh, crore, higher quantities. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as parts-per quantities — fmt_partsper","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as parts-per quantities — fmt_partsper","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as parts-per quantities — fmt_partsper","text":"Create tibble small numeric values generate gt table. Format column appear scientific notation fmt_scientific() format b column per mille values fmt_partsper().","code":"dplyr::tibble(x = 0:-5, a = 10^(0:-5), b = a) %>%   gt(rowname_col = \"x\") %>%   fmt_scientific(a, decimals = 0) %>%   fmt_partsper(     columns = b,     to_units = \"per-mille\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as parts-per quantities — fmt_partsper","text":"3-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":null,"dir":"Reference","previous_headings":"","what":"Format by simply passing data through — fmt_passthrough","title":"Format by simply passing data through — fmt_passthrough","text":"Format passing data transformation : (1) coercing character (fmt_*() functions ), (2) applying text via pattern argument (default apply nothing). useful want modify input data decorate within pattern. Also, function useful used formatter function summary_rows() function, output may text useful .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format by simply passing data through — fmt_passthrough","text":"","code":"fmt_passthrough(   data,   columns,   rows = everything(),   escape = TRUE,   pattern = \"{x}\" )"},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format by simply passing data through — fmt_passthrough","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). escape option escape text according final output format table. example, LaTeX table generated LaTeX escaping performed rendering. default set TRUE setting FALSE useful case LaTeX-formatted text passed output LaTeX table unchanged. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format by simply passing data through — fmt_passthrough","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format by simply passing data through — fmt_passthrough","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format by simply passing data through — fmt_passthrough","text":"Use exibble create gt table. Keep char column. Pass data column apply simple pattern adds \"s\" non-NA values.","code":"exibble %>%   dplyr::select(char) %>%   gt() %>%   fmt_passthrough(     columns = char,     rows = !is.na(char),     pattern = \"{x}s\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format by simply passing data through — fmt_passthrough","text":"3-16","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as a percentage — fmt_percent","title":"Format values as a percentage — fmt_percent","text":"numeric values gt table, can perform percentage-based formatting. assumed input numeric values proportional values , case, values automatically multiplied 100 decorating percent sign (case accommodated though setting scale_values FALSE). control percentage formatting, can use following options: percent sign placement: percent sign can placed values space can inserted symbol value. decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol value scaling toggle: choose disable automatic value scaling situation values already scaled coming (just require percent symbol) pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as a percentage — fmt_percent","text":"","code":"fmt_percent(   data,   columns,   rows = everything(),   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   accounting = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = FALSE,   placement = \"right\",   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as a percentage — fmt_percent","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. scale_values values scaled multiplication 100? default TRUE since expectation normally values proportions. Setting FALSE signifies values already scaled require percent sign formatted. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. incl_space option whether include space value percent sign. default introduce space character. placement placement percent sign. can either right (default) left. system numbering system use. default, international numbering system (\"intl\") whereby grouping separators (.e., sep_mark) separated three digits. alternative system, Indian numbering system (\"ind\") uses grouping separators correspond thousand, lakh, crore, higher quantities. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as a percentage — fmt_percent","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as a percentage — fmt_percent","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as a percentage — fmt_percent","text":"Use pizzaplace create gt table. Format frac_of_quota column display values percentages.","code":"pizzaplace %>%   dplyr::mutate(month = as.numeric(substr(date, 6, 7))) %>%   dplyr::group_by(month) %>%   dplyr::summarize(pizzas_sold = dplyr::n()) %>%   dplyr::ungroup() %>%   dplyr::mutate(frac_of_quota = pizzas_sold / 4000) %>%   gt(rowname_col = \"month\") %>%   fmt_percent(     columns = frac_of_quota,     decimals = 1   )"},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as a percentage — fmt_percent","text":"3-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as Roman numerals — fmt_roman","title":"Format values as Roman numerals — fmt_roman","text":"numeric values gt table can transform Roman numerals, rounding values necessary.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as Roman numerals — fmt_roman","text":"","code":"fmt_roman(   data,   columns,   rows = everything(),   case = c(\"upper\", \"lower\"),   pattern = \"{x}\" )"},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as Roman numerals — fmt_roman","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). case Roman numerals rendered uppercase (\"upper\") lowercase (\"lower\") letters? default, set \"upper\". pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as Roman numerals — fmt_roman","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as Roman numerals — fmt_roman","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as Roman numerals — fmt_roman","text":"Create tibble small numeric values generate gt table. Format roman column appear Roman numerals fmt_roman().","code":"dplyr::tibble(arabic = c(1, 8, 24, 85), roman = arabic) %>%   gt(rowname_col = \"arabic\") %>%   fmt_roman(columns = roman)"},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as Roman numerals — fmt_roman","text":"3-9","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values to scientific notation — fmt_scientific","title":"Format values to scientific notation — fmt_scientific","text":"numeric values gt table, can perform formatting targeted values rendered scientific notation. Furthermore, fine control following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values to scientific notation — fmt_scientific","text":"","code":"fmt_scientific(   data,   columns,   rows = everything(),   decimals = 2,   drop_trailing_zeros = FALSE,   scale_by = 1,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values to scientific notation — fmt_scientific","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values to scientific notation — fmt_scientific","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values to scientific notation — fmt_scientific","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values to scientific notation — fmt_scientific","text":"Use exibble create gt table. Format num column partially numeric  partially scientific notation (using num > 500 num <= 500 expressions respective rows arguments).","code":"exibble %>%   gt() %>%   fmt_number(     columns = num,     rows = num > 500,     decimals = 1,     scale_by = 1/1000,     pattern = \"{x}K\"   ) %>%   fmt_scientific(     columns = num,     rows = num <= 500,     decimals = 1   )"},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values to scientific notation — fmt_scientific","text":"3-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as times — fmt_time","title":"Format values as times — fmt_time","text":"Format input values time values using one 25 preset time styles. Input can form POSIXt (.e., datetimes), character (must ISO 8601 forms HH:MM:SS YYYY-MM-DD HH:MM:SS), Date (always results formatting 00:00:00).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as times — fmt_time","text":"","code":"fmt_time(   data,   columns,   rows = everything(),   time_style = \"iso\",   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as times — fmt_time","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). time_style time style use. default \"iso\" corresponds times formatted within ISO 8601 datetime values. time styles can viewed using info_time_style(). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. locale value provided override global locale setting performed gt()'s locale argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as times — fmt_time","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"targeting-the-values-to-be-formatted","dir":"Reference","previous_headings":"","what":"Targeting the values to be formatted","title":"Format values as times — fmt_time","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format values as times — fmt_time","text":"need supply preset time style time_style argument. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. can use info_time_style() within console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as times — fmt_time","text":"Use exibble create gt table. Keep date time columns. Format time column times formatted hms_p (time style 3).    Use exibble create gt table. Keep date time columns. Format time column mixed time formats (times 16:00 different others expressions used rows argument).    Use exibble create another gt table, time time column. Format time column use \"EBhms\" time style (one 'flexible' styles). Also, set locale \"sv\" get dates Swedish.","code":"exibble %>%   dplyr::select(date, time) %>%   gt() %>%   fmt_time(     columns = time,     time_style = \"h_m_s_p\"   ) exibble %>%   dplyr::select(date, time) %>%   gt() %>%   fmt_time(     columns = time,     rows = time > \"16:00\",     time_style = \"h_m_s_p\"   ) %>%   fmt_time(     columns = time,     rows = time <= \"16:00\",     time_style = \"h_m_p\"   ) exibble %>%   dplyr::select(time) %>%   gt() %>%   fmt_time(     columns = time,     time_style = \"EBhms\",     locale = \"sv\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as times — fmt_time","text":"3-12","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding a ggplot — ggplot_image","title":"Helper function for adding a ggplot — ggplot_image","text":"can add ggplot2 plot inside table help ggplot_image() function. function provides convenient way generate HTML fragment ggplot object. function currently HTML-based, useful HTML table output. use function inside data cells, recommended text_transform() function used. function, can specify data cells target include call ggplot_image() within required user-defined function (fn argument). want include plot places (e.g., header, within footnote text, etc.) need use ggplot_image() within html() helper function.","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding a ggplot — ggplot_image","text":"","code":"ggplot_image(plot_object, height = 100, aspect_ratio = 1)"},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding a ggplot — ggplot_image","text":"plot_object ggplot plot object. height absolute height (px) image table cell. aspect_ratio plot's final aspect ratio. height plot fixed using height argument, aspect_ratio either compress (aspect_ratio < 1.0) expand (aspect_ratio > 1.0) plot horizontally. default value 1.0 neither compress expand plot.","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding a ggplot — ggplot_image","text":"character object HTML fragment can placed inside cell.","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function for adding a ggplot — ggplot_image","text":", function creates HTML image tag image URI embedded within (100 dpi PNG). can easily experiment ggplot2 plot object, using within ggplot_image(plot_object = <plot object> evaluates : <img src=<data URI> style=\\\"height:100px;\\\"> height 100px default height chosen work well within heights table rows. option modify aspect ratio plot (default aspect_ratio 1.0) useful elongating given plot fit better within table construct.","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding a ggplot — ggplot_image","text":"Create ggplot plot.   Create tibble contains two cells (one placeholder image), , create gt table. Use text_transform() function insert plot using calling ggplot_object() within user- defined function.","code":"library(ggplot2)  plot_object <-   ggplot(     data = gtcars,     aes(x = hp, y = trq, size = msrp)   ) +   geom_point(color = \"blue\") +   theme(legend.position = \"none\") dplyr::tibble(   text = \"Here is a ggplot:\",   ggplot = NA ) %>%   gt() %>%   text_transform(     locations = cells_body(columns = ggplot),     fn = function(x) {       plot_object %>%         ggplot_image(height = px(200))     }   )"},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for adding a ggplot — ggplot_image","text":"8-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/google_font.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for specifying a font from the Google Fonts service — google_font","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"google_font() helper function can used wherever font name specified. two instances helper can used: name argument opt_table_font() (setting table font) cell_text() (used tab_style()). get helpful listing fonts work well tables, use info_google_fonts() function.","code":""},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"","code":"google_font(name)"},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"name complete name font available Google Fonts.","code":""},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"object class font_css.","code":""},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"Use exibble create gt table eight rows, replace missing values em dashes. text time column, use Google font \"IBM Plex Mono\" set default_fonts() fallbacks (just case webfont accessible).    Use sp500 create small gt table, using fmt_currency() provide dollar sign first row monetary values. , set larger font size table use \"Merriweather\" font using google_font() function (two font fallbacks: \"Cochin\" catchall \"Serif\" group).","code":"exibble %>%   dplyr::select(char, time) %>%   gt() %>%   sub_missing() %>%   tab_style(     style = cell_text(       font = c(         google_font(name = \"IBM Plex Mono\"),         default_fonts()       )     ),     locations = cells_body(columns = time)   ) sp500 %>%   dplyr::slice(1:10) %>%   dplyr::select(-volume, -adj_close) %>%   gt() %>%   fmt_currency(     columns = 2:5,     rows = 1,     currency = \"USD\",     use_seps = FALSE   ) %>%   tab_options(table.font.size = px(20)) %>%   opt_table_font(     font = list(       google_font(name = \"Merriweather\"),       \"Cochin\", \"Serif\"     )   )"},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"7-27","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add grand summary rows using aggregation functions — grand_summary_rows","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"Add grand summary rows gt table using applying aggregation functions table data. summary rows incorporate available data, regardless whether data part row groups. choose format values resulting summary cells use formatter function (e.g, fmt_number) relevant options.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"","code":"grand_summary_rows(   data,   columns = everything(),   fns,   missing_text = \"---\",   formatter = fmt_number,   ... )"},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"data table object created using gt() function. columns columns summaries calculated. fns Functions used aggregations. can include base functions like mean, min, max, median, sd, sum user-defined aggregation function. function(s) supplied within list(). Within list, can specify functions use function names quotes (e.g., \"sum\"), bare functions (e.g., sum), one-sided R formulas using leading ~. formula representation, . serves data summarized (e.g., sum(., na.rm = TRUE)). use named arguments recommended names serve summary row labels corresponding summary rows data (labels can derived function names providing bare function names). missing_text text used place NA values summary cells data outputs. formatter formatter function name. can fmt_*() functions available package (e.g., fmt_number(), fmt_percent(), etc.), custom function using fmt(). default function fmt_number() options can accessed .... ... Values passed formatter function, provided values form named vectors. example, using default formatter function, fmt_number(), options decimals, use_seps, locale can used.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"need obtain summary data external purposes, extract_summary() function can used gt_tbl object grand summary rows added via grand_summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"Use sp500 create gt table row groups. Create grand summary rows min, max, avg table grand_summary_rows() function.","code":"sp500 %>%   dplyr::filter(date >= \"2015-01-05\" & date <= \"2015-01-16\") %>%   dplyr::arrange(date) %>%   dplyr::mutate(week = paste0(\"W\", strftime(date, format = \"%V\"))) %>%   dplyr::select(-adj_close, -volume) %>%   gt(     rowname_col = \"date\",     groupname_col = \"week\"   ) %>%   grand_summary_rows(     columns = c(open, high, low, close),     fns = list(       min = ~min(.),       max = ~max(.),       avg = ~mean(.)),     formatter = fmt_number,     use_seps = FALSE   )"},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"6-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt-options.html","id":null,"dir":"Reference","previous_headings":"","what":"gt package options — gt-options","title":"gt package options — gt-options","text":"gt package options","code":""},{"path":"https://gt.rstudio.com/reference/gt-options.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"gt package options — gt-options","text":"gt uses following options() configure behavior: gt.html_tag_check: logical scalar indicating whether print warning HTML tags found table rendered LaTeX. gt.row_group.sep: separator groups row group label.","code":""},{"path":"https://gt.rstudio.com/reference/gt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gt: Easily Create Presentation-Ready Display Tables — gt-package","title":"gt: Easily Create Presentation-Ready Display Tables — gt-package","text":"Build display tables tabular data easy--use set functions. progressive approach, can construct display tables cohesive set table parts. Table values can formatted using included formatting functions. Footnotes cell styles can precisely added location targeting system. way 'gt' handles things means often worry fine details.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gt: Easily Create Presentation-Ready Display Tables — gt-package","text":"Maintainer: Richard Iannone rich@rstudio.com (ORCID) Authors: Joe Cheng joe@rstudio.com Barret Schloerke barret@rstudio.com (ORCID) Ellis Hughes ellis.h.hughes@gsk.com (ORCID) JooYoung Seo jseo1005@illinois.edu (ORCID) contributors: RStudio [copyright holder, funder]","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table object — gt","title":"Create a gt table object — gt","text":"gt() function creates gt table object provided table data. Using function first step typical gt workflow. gt table object, can perform styling transformations rendering display table various formats.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table object — gt","text":"","code":"gt(   data,   rowname_col = \"rowname\",   groupname_col = dplyr::group_vars(data),   caption = NULL,   rownames_to_stub = FALSE,   auto_align = TRUE,   id = NULL,   locale = NULL,   row_group.sep = getOption(\"gt.row_group.sep\", \" - \") )"},{"path":"https://gt.rstudio.com/reference/gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table object — gt","text":"data data.frame object tibble. rowname_col column name input data table use row captions placed display table stub. rownames_to_stub option TRUE column name provided rowname_col ignored. groupname_col column name input data table use group labels generation stub row groups. input data table grouped_df class (use dplyr::group_by() function associated group_by*() functions) input ignored. caption optional table caption use cross-referencing R Markdown documents bookdown book projects. rownames_to_stub option take rownames input data table row captions display table stub. auto_align Optionally column data aligned depending content contained column input data. Internally, calls cols_align(align = \"auto\") columns. id table ID. default, NULL, random, ten-letter ID generated using random_id() function. custom table ID can used single-length character vector. locale optional locale ID can set default locale functions take locale argument. Examples valid locales include \"en_US\" English (United States) \"fr_FR\" French (France). Refer information provided info_locales() determine locales supported. row_group.sep separator use consecutive group names (possibility providing data grouped_df multiple groups) displayed stub row group label.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt table object — gt","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a gt table object — gt","text":"data ingest options can consider stage. can choose create table stub rowname captions using rowname_col argument. , stub row groups can created groupname_col. arguments take name column input table data. Typically, data groupname_col consist categories data table data rowname_col unique labels (perhaps unique across entire table unique within groups). Row groups can also created passing grouped_df gt() using dplyr::group_by() function table data. way, two columns categorical data can used make row groups. row_group.sep argument allows control row group label appear display table.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt table object — gt","text":"Create gt table object using exibble dataset. Use row group columns add stub row groups via rowname_col groupname_col arguments.    resulting gt table object can used transformations variety tab_*(), fmt_*(), cols_*(), even functions available package.","code":"tab_1 <-   exibble %>%   gt(     rowname_col = \"row\",     groupname_col = \"group\"   )  tab_1 tab_1 %>%   tab_header(     title = \"Table Title\",     subtitle = \"Subtitle\"   ) %>%   fmt_number(     columns = num,     decimals = 2   ) %>%   cols_label(num = \"number\")"},{"path":"https://gt.rstudio.com/reference/gt.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Create a gt table object — gt","text":"1-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"working Rnw (Sweave) files otherwise writing LaTeX code, including gt table can problematic knowledge LaTeX dependencies. part, dependencies LaTeX packages required rendering gt table. gt_latex_dependencies() function provides object can used provide LaTeX Rnw file, allowing gt tables work yield errors due missing packages.","code":""},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"","code":"gt_latex_dependencies()"},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"object class knit_asis.","code":""},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"example Rnw document shows gt_latex_dependencies() can used conjunction gt table:","code":"%!sweave=knitr  \\documentclass{article}  <<echo=FALSE>>= library(gt)  @  <<results='asis', echo=FALSE>>= gt_latex_dependencies()  @  \\begin{document}  <<results='asis', echo=FALSE>>= exibble   @  \\end{document}"},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"7-26","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt display table output element for Shiny — gt_output","title":"Create a gt display table output element for Shiny — gt_output","text":"Using gt_output() can render reactive gt table, process initiated using render_gt() function server component Shiny app. gt_output() call used Shiny ui component, position context wherein call made determines gt table rendered app page. important note ID given render_gt() call needed outputId gt_output() (e.g., server: output$<id> <- render_gt(...); ui: gt_output(outputId = \"<id>\").","code":""},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt display table output element for Shiny — gt_output","text":"","code":"gt_output(outputId)"},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt display table output element for Shiny — gt_output","text":"outputId output variable read table.","code":""},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a gt display table output element for Shiny — gt_output","text":"need ensure shiny package installed first. easily using install.packages(\"shiny\"). information creating Shiny apps can found Shiny Site.","code":""},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt display table output element for Shiny — gt_output","text":"Shiny app (contained within single file) (1) prepares gt table, (2) sets ui gt_output(), (3) sets server render_gt() uses gt_tbl object input expression.","code":"library(shiny)  gt_tbl <-   gtcars %>%   gt() %>%   cols_hide(contains(\"_\"))  ui <- fluidPage(    gt_output(outputId = \"table\") )  server <- function(input,                    output,                    session) {    output$table <-     render_gt(       expr = gt_tbl,       height = px(600),       width = px(600)     ) }"},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Create a gt display table output element for Shiny — gt_output","text":"12-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Preview a gt table object — gt_preview","title":"Preview a gt table object — gt_preview","text":"Sometimes may want see just small portion input data. can use gt_preview() place gt() get first x rows data last y rows data (can set top_n bottom_n arguments). advised use additional gt functions modify output gt_preview(). Furthermore, pass gt object gt_preview().","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preview a gt table object — gt_preview","text":"","code":"gt_preview(data, top_n = 5, bottom_n = 1, incl_rownums = TRUE)"},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preview a gt table object — gt_preview","text":"data data.frame object tibble. top_n value used number rows top table display. default, 5, show first five rows table. bottom_n value used number rows bottom table display. default, 1, show final row table. incl_rownums option include row numbers data table stub. default, TRUE.","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preview a gt table object — gt_preview","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preview a gt table object — gt_preview","text":"grouped data magic columns rowname groupname ignored gt_preview() , , one add stub group rows output table. default, output table include row numbers stub (including range row numbers omitted rows). row numbering option can deactivated setting incl_rownums FALSE.","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preview a gt table object — gt_preview","text":"Use gtcars create gt table preview (columns). see first five rows last row.","code":"gtcars %>%   dplyr::select(mfr, model, year) %>%   gt_preview()"},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Preview a gt table object — gt_preview","text":"1-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":null,"dir":"Reference","previous_headings":"","what":"Deluxe automobiles from the 2014-2017 period — gtcars","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"Expensive fast cars. father's mtcars. row describes car certain make, model, year, trim. Basic specifications horsepower, torque, EPA MPG ratings, type drivetrain, transmission characteristics provided. country origin car manufacturer also given.","code":""},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"","code":"gtcars"},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"tibble 47 rows 15 variables: mfr name car manufacturer model car's model name year car's model year trim short description car model's trim bdy_style identifier car's body style, either coupe, convertible, sedan, hatchback hp, hp_rpm car's horsepower associated RPM level trq, trq_rpm car's torque associated RPM level mpg_c, mpg_h miles per gallon fuel efficiency rating city highway driving drivetrain car's drivetrain , dataset either rwd (Rear Wheel Drive) awd (Wheel Drive) trsmn codified transmission type, number part number gears; car automatic transmission (), manual transmission (m), option switch types (), , direct drive (dd) ctry_origin country name vehicle manufacturer headquartered msrp Manufacturer's suggested retail price U.S. dollars (USD)","code":""},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"gtcars something else common (aside high asking prices): grand tourer vehicles. proper GT cars blend pure driving thrills level comfort expected fine limousine (e.g., Rolls-Royce Phantom EWB). find , cars, comfort emphasized -performance. Nevertheless, driving experience also mean motoring speed, style safety.","code":""},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"glimpse data available gtcars.","code":"dplyr::glimpse(gtcars) #> Rows: 47 #> Columns: 15 #> $ mfr         <chr> \"Ford\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferra~ #> $ model       <chr> \"GT\", \"458 Speciale\", \"458 Spider\", \"458 Italia\", \"488 GTB~ #> $ year        <dbl> 2017, 2015, 2015, 2014, 2016, 2015, 2017, 2015, 2015, 2015~ #> $ trim        <chr> \"Base Coupe\", \"Base Coupe\", \"Base\", \"Base Coupe\", \"Base Co~ #> $ bdy_style   <chr> \"coupe\", \"coupe\", \"convertible\", \"coupe\", \"coupe\", \"conver~ #> $ hp          <dbl> 647, 597, 562, 562, 661, 553, 680, 652, 731, 949, 573, 545~ #> $ hp_rpm      <dbl> 6250, 9000, 9000, 9000, 8000, 7500, 8250, 8000, 8250, 9000~ #> $ trq         <dbl> 550, 398, 398, 398, 561, 557, 514, 504, 509, 664, 476, 436~ #> $ trq_rpm     <dbl> 5900, 6000, 6000, 6000, 3000, 4750, 5750, 6000, 6000, 6750~ #> $ mpg_c       <dbl> 11, 13, 13, 13, 15, 16, 12, 11, 11, 12, 21, 16, 11, 16, 12~ #> $ mpg_h       <dbl> 18, 17, 17, 17, 22, 23, 17, 16, 16, 16, 22, 22, 18, 20, 20~ #> $ drivetrain  <chr> \"rwd\", \"rwd\", \"rwd\", \"rwd\", \"rwd\", \"rwd\", \"awd\", \"awd\", \"r~ #> $ trsmn       <chr> \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\"~ #> $ ctry_origin <chr> \"United States\", \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"Ital~ #> $ msrp        <dbl> 447000, 291744, 263553, 233509, 245400, 198973, 298000, 29~"},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"11-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a gt table as a file — gtsave","title":"Save a gt table as a file — gtsave","text":"gtsave() function makes easy save gt table file. function guesses file type extension provided output filename, producing either HTML, PDF, PNG, LaTeX, RTF file.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a gt table as a file — gtsave","text":"","code":"gtsave(data, filename, path = NULL, ...)"},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a gt table as a file — gtsave","text":"data table object created using gt() function. filename file name create disk. Ensure extension compatible output types provided (.html, .tex, .ltx, .rtf, .docx). custom save function provided file extension disregarded. path optional path file saved (combined filename). ... options passed appropriate internal saving function.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a gt table as a file — gtsave","text":"Invisibly returns TRUE export process successful.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a gt table as a file — gtsave","text":"Output filenames either .html .htm extensions produce HTML document. case, can pass TRUE FALSE value inline_css option obtain HTML document inlined CSS styles (default FALSE). details CSS inlining available as_raw_html(). can pass values arguments htmltools::save_html() .... arguments either background libdir, please refer htmltools documentation details use arguments. output filename expressed .rtf extension RTF file generated. case, option can passed ...: page_numbering. controls RTF document page numbering , default, page numbering enabled (.e., page_numbering = \"none\"). can create image file based HTML version gt table. filename extension .png, get PNG image file. PDF document can generated using .pdf extension. process facilitated webshot2 package, , package needs installed attempting save table image file. option passing values underlying webshot2::webshot() function though .... useful arguments PNG saving zoom (defaults scale level 2) expand (adds whitespace pixels around cropped table image, default value 5), selector (default value \"table\"). several options available look webshot2 documentation details. output filename extension either .tex, .ltx, .rnw, LaTeX document produced. output filename .rtf generate RTF document. LaTeX RTF saving functions options pass .... output filename extension .docx, Word document file produced. process facilitated rmarkdown package, package needs installed attempting save table .docx document.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a gt table as a file — gtsave","text":"Use gtcars create gt table. Add stubhead label tab_stubhead() function describe stub.   Export gt table HTML file inlined CSS (necessary including table part HTML email) using gtsave() inline_css = TRUE option.   leaving inline_css option, get conventional HTML file embedded CSS styles.   Saving PNG file results cropped image HTML table. amount whitespace can set expand option.   use .tex, .ltx, .rnw result output LaTeX document.   .rtf extension, get RTF document.   .docx extension, get word/docx document.","code":"tab_1 <-   gtcars %>%   dplyr::select(model, year, hp, trq) %>%   dplyr::slice(1:5) %>%   gt(rowname_col = \"model\") %>%   tab_stubhead(label = \"car\") tab_1 %>% gtsave(filename = \"tab_1.html\", inline_css = TRUE) tab_1 %>% gtsave(filename = \"tab_1.html\") tab_1 %>% gtsave(\"tab_1.png\", expand = 10) tab_1 %>% gtsave(\"tab_1.tex\") tab_1 %>% gtsave(\"tab_1.rtf\") tab_1 %>% gtsave(\"tab_1.docx\")"},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Save a gt table as a file — gtsave","text":"13-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/html.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret input text as HTML-formatted text — html","title":"Interpret input text as HTML-formatted text — html","text":"certain pieces text (like column labels table headings) may want express raw HTML. fact, HTML, anything goes can much just text. html() function guard input HTML escaping, , HTML tags come HTML rendered... HTML.","code":""},{"path":"https://gt.rstudio.com/reference/html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret input text as HTML-formatted text — html","text":"","code":"html(text, ...)"},{"path":"https://gt.rstudio.com/reference/html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret input text as HTML-formatted text — html","text":"text, ... text understood HTML text, preserved.","code":""},{"path":"https://gt.rstudio.com/reference/html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret input text as HTML-formatted text — html","text":"character object class html. tagged HTML fragment sanitized.","code":""},{"path":"https://gt.rstudio.com/reference/html.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret input text as HTML-formatted text — html","text":"Use exibble create gt table. adding title, use html() helper use HTML formatting.","code":"exibble %>%   dplyr::select(currency, char) %>%   gt() %>%   tab_header(title = html(\"<em>HTML<\/em>\"))"},{"path":"https://gt.rstudio.com/reference/html.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Interpret input text as HTML-formatted text — html","text":"7-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on supported currencies — info_currencies","title":"View a table with info on supported currencies — info_currencies","text":"fmt_currency() function lets us format numeric values currencies. table generated info_currencies() function provides quick reference available currencies. currency identifiers provided (name, 3-letter currency code, 3-digit currency code) along currency's exponent value (number digits currency subunits). formatted example provided (based value 49.95) demonstrate default formatting currency.","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on supported currencies — info_currencies","text":"","code":"info_currencies(type = c(\"code\", \"symbol\"), begins_with = NULL)"},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on supported currencies — info_currencies","text":"type type currency information provided. Can either code currency information corresponding 3-letter currency codes provided, symbol currency info common currency names (e.g., dollar, pound, yen, etc.) returned. begins_with Providing single letter filter currencies begin letter currency code. default (NULL) produce table currencies displayed. option constrains information table type == \"code\".","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on supported currencies — info_currencies","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View a table with info on supported currencies — info_currencies","text":"172 currencies, can lead verbose display table. make presentation focused retrieval, can provide initial letter corresponding 3-letter currency code begins_with. filter currencies info table just set beginning supplied letter.","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on supported currencies — info_currencies","text":"Get table info currencies three-letter code begins \"h\".    Get table info common currency name/symbols can used fmt_currency().","code":"info_currencies(begins_with = \"h\") info_currencies(type = \"symbol\")"},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on supported currencies — info_currencies","text":"10-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on date styles — info_date_style","title":"View a table with info on date styles — info_date_style","text":"fmt_date() function lets us format date-based values convenient manner using preset styles. table generated info_date_style() function provides quick reference styles, associated format names example outputs using fixed date (2000-02-29).","code":""},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on date styles — info_date_style","text":"","code":"info_date_style()"},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on date styles — info_date_style","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on date styles — info_date_style","text":"Get table info different date-formatting styles (used supplying number code fmt_date() function).","code":"info_date_style()"},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on date styles — info_date_style","text":"10-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table on recommended Google Fonts — info_google_fonts","title":"View a table on recommended Google Fonts — info_google_fonts","text":"google_font() helper function can used wherever font name specified. two instances helper can used: name argument opt_table_font() (setting table font) cell_text() (used tab_style()). overwhelming number fonts available Google Fonts catalog, info_google_fonts() provides table set helpful font recommendations. fonts look great different parts gt table. ? part suitable body text, large counters, large x-height, reasonably low contrast, open apertures. font features make high legibility smaller sizes.","code":""},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table on recommended Google Fonts — info_google_fonts","text":"","code":"info_google_fonts()"},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table on recommended Google Fonts — info_google_fonts","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table on recommended Google Fonts — info_google_fonts","text":"Get table info recommended Google Fonts tables.","code":"info_google_fonts()"},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table on recommended Google Fonts — info_google_fonts","text":"10-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on supported locales — info_locales","title":"View a table with info on supported locales — info_locales","text":"Many fmt_*() functions locale argument makes locale-based formatting easier. table generated info_locales() function provides quick reference available locales. locale identifiers provided (base locale ID, common display name) along locale's group decimal separator marks. formatted numeric example provided (based value 11027) demonstrate default formatting locale.","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on supported locales — info_locales","text":"","code":"info_locales(begins_with = NULL)"},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on supported locales — info_locales","text":"begins_with Providing single letter filter locales begin letter base locale ID. default (NULL) produce table locales displayed.","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on supported locales — info_locales","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View a table with info on supported locales — info_locales","text":"712 locales, means long display table provided default. trim output table size, can provide initial letter corresponding base locale ID begins_with. filter locales info table just set begins supplied letter.","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on supported locales — info_locales","text":"Get table info locales base locale ID begins \"v\".","code":"info_locales(begins_with = \"v\")"},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on supported locales — info_locales","text":"10-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on color palettes — info_paletteer","title":"View a table with info on color palettes — info_paletteer","text":"data_color() function allows us flexibly color data cells gt table, harder part process discovering choosing color palettes suitable table output. can make process much easier two ways: (1) using paletteer package, makes wide range palettes various R packages readily available, (2) calling info_paletteer() function give us information table serves quick reference discrete color palettes available paletteer.","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on color palettes — info_paletteer","text":"","code":"info_paletteer(color_pkgs = NULL)"},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on color palettes — info_paletteer","text":"color_pkgs vector color packages determines sets palettes displayed information table. NULL (default) discrete palettes color packages represented paletteer displayed.","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on color palettes — info_paletteer","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View a table with info on color palettes — info_paletteer","text":"palettes displayed organized package palette name. values required obtaining palette (vector hexadecimal colors), paletteer::paletteer_d() function. familiar names color palette packages (e.g., RColorBrewer, ggthemes, wesanderson), can narrow content information table supplying vector package names color_pkgs. Colors following color packages (supported paletteer) shown default info_paletteer(): awtools, 5 palettes dichromat, 17 palettes dutchmasters, 6 palettes ggpomological, 2 palettes ggsci, 42 palettes ggthemes, 31 palettes ghibli, 27 palettes grDevices, 1 palette jcolors, 13 palettes LaCroixColoR, 21 palettes NineteenEightyR, 12 palettes nord, 16 palettes ochRe, 16 palettes palettetown, 389 palettes pals, 8 palettes Polychrome, 7 palettes quickpalette, 17 palettes rcartocolor, 34 palettes RColorBrewer, 35 palettes Redmonder, 41 palettes wesanderson, 19 palettes yarrr, 21 palettes","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on color palettes — info_paletteer","text":"Get table info just \"ggthemes\" color palette (easily accessible paletteer package).","code":"info_paletteer(color_pkgs = \"ggthemes\")"},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on color palettes — info_paletteer","text":"10-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on time styles — info_time_style","title":"View a table with info on time styles — info_time_style","text":"fmt_time() function lets us format time-based values convenient manner using preset styles. table generated info_time_style() function provides quick reference styles, associated format names example outputs using fixed time (14:35).","code":""},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on time styles — info_time_style","text":"","code":"info_time_style()"},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on time styles — info_time_style","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on time styles — info_time_style","text":"Get table info different time-formatting styles (used supplying number code fmt_time() function).","code":"info_time_style()"},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on time styles — info_time_style","text":"10-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/local_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding a local image — local_image","title":"Helper function for adding a local image — local_image","text":"can flexibly add local image (.e., image residing disk) inside table local_image() function. function provides convenient way generate HTML fragment using -disk PNG SVG. function currently HTML-based, useful HTML table output. use function inside data cells, recommended text_transform() function used. function, can specify data cells target include local_image() call within required user-defined function (fn argument). want include image places (e.g., header, within footnote text, etc.) need use local_image() within html() helper function.","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding a local image — local_image","text":"","code":"local_image(filename, height = 30)"},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding a local image — local_image","text":"filename path image file. height absolute height (px) image table cell.","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding a local image — local_image","text":"character object HTML fragment can placed inside cell.","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function for adding a local image — local_image","text":", function creates HTML image tag image URI embedded within. can easily experiment local PNG SVG image available gt package using test_image() function. Using , call local_image(file = test_image(type = \"png\")) evaluates : <img src=<data URI> style=\\\"height:30px;\\\"> height 30px default height chosen work well within heights table rows.","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding a local image — local_image","text":"Create tibble contains heights image pixels (one column string, numerical values), , create gt table. Use text_transform() function insert local test image (PNG) image various sizes.","code":"dplyr::tibble(   pixels = px(seq(10, 35, 5)),   image = seq(10, 35, 5) ) %>%   gt() %>%   text_transform(     locations = cells_body(columns = image),     fn = function(x) {       local_image(         filename = test_image(type = \"png\"),         height = as.numeric(x)       )     }   )"},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for adding a local image — local_image","text":"8-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/md.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret input text as Markdown-formatted text — md","title":"Interpret input text as Markdown-formatted text — md","text":"Markdown! wonderful thing. can use certain places (e.g., footnotes, source notes, table title, etc.) expect render HTML Markdown . html() helper allows ferry HTML function md()... almost like two--one deal (get use Markdown plus HTML fragments time).","code":""},{"path":"https://gt.rstudio.com/reference/md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret input text as Markdown-formatted text — md","text":"","code":"md(text)"},{"path":"https://gt.rstudio.com/reference/md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret input text as Markdown-formatted text — md","text":"text text understood contain Markdown formatting.","code":""},{"path":"https://gt.rstudio.com/reference/md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret input text as Markdown-formatted text — md","text":"character object class from_markdown. tagged Markdown text undergo conversion HTML.","code":""},{"path":"https://gt.rstudio.com/reference/md.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret input text as Markdown-formatted text — md","text":"Use exibble create gt table. adding title, use md() helper use Markdown formatting.","code":"exibble %>%   dplyr::select(currency, char) %>%   gt() %>%   tab_header(title = md(\"Using *Markdown*\"))"},{"path":"https://gt.rstudio.com/reference/md.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Interpret input text as Markdown-formatted text — md","text":"7-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to align the table header — opt_align_table_header","title":"Option to align the table header — opt_align_table_header","text":"default, table header added gt table center alignment title subtitle elements. function allows us easily set horizontal alignment title subtitle left right using \"align\" argument. function serves convenient shortcut <gt_tbl> %>% tab_options(heading.align = <align>).","code":""},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to align the table header — opt_align_table_header","text":"","code":"opt_align_table_header(data, align = c(\"left\", \"center\", \"right\"))"},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to align the table header — opt_align_table_header","text":"data table object created using gt() function. align alignment title subtitle elements table header. Options \"left\" (default), \"center\", \"right\".","code":""},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to align the table header — opt_align_table_header","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to align the table header — opt_align_table_header","text":"Use exibble create gt table number table parts added. header (consisting title subtitle) aligned left opt_align_table_header() function.","code":"exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_align_table_header(align = \"left\")"},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to align the table header — opt_align_table_header","text":"9-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to use all caps in select table locations — opt_all_caps","title":"Option to use all caps in select table locations — opt_all_caps","text":"Sometimes -capitalized look suitable table. opt_all_caps() function, can transform characters column labels, stub, row groups way (control locations transformed). function serves convenient shortcut <gt_tbl> %>% tab_options(<location>.text_transform = \"uppercase\", <location>.font.size = pct(80), <location>.font.weight = \"bolder\") (locations selected).","code":""},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to use all caps in select table locations — opt_all_caps","text":"","code":"opt_all_caps(   data,   all_caps = TRUE,   locations = c(\"column_labels\", \"stub\", \"row_group\") )"},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to use all caps in select table locations — opt_all_caps","text":"data table object created using gt() function. all_caps logical value indicate whether text transformation caps performed (TRUE, default) reset default values (FALSE) locations targeted. locations locations undergo text transformation? default includes \"column_labels\", \"stub\", \"row_group\" locations. However, just choose one two .","code":""},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to use all caps in select table locations — opt_all_caps","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to use all caps in select table locations — opt_all_caps","text":"Use exibble create gt table number table parts added. text column labels, stub, row groups transformed caps using opt_all_caps().","code":"exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_all_caps()"},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to use all caps in select table locations — opt_all_caps","text":"9-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to add custom CSS for the table — opt_css","title":"Option to add custom CSS for the table — opt_css","text":"opt_css() function makes possible add CSS gt table. CSS added compiled CSS gt generates automatically object transformed HTML output table. can supply css vector lines single string.","code":""},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to add custom CSS for the table — opt_css","text":"","code":"opt_css(data, css, add = TRUE, allow_duplicates = FALSE)"},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to add custom CSS for the table — opt_css","text":"data table object created using gt() function. css CSS include part rendered table's <style> element. add TRUE, default, CSS added already-defined CSS (typically previous calls opt_table_font(), opt_css(), , directly setting CSS table.additional_css value tab_options()). set FALSE, CSS provided replace previously-stored CSS. allow_duplicates FALSE (default), CSS provided added (provided add = TRUE) seen already-defined CSS.","code":""},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to add custom CSS for the table — opt_css","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to add custom CSS for the table — opt_css","text":"Use exibble create gt table format data columns. opt_css(), insert CSS rulesets string sure set table ID explicitly (\"one\").","code":"exibble %>%   dplyr::select(num, currency) %>%   gt(id = \"one\") %>%   fmt_currency(     columns = currency,     currency = \"HKD\"   ) %>%   fmt_scientific(     columns = num   ) %>%   opt_css(     css = \"     #one .gt_table {       background-color: skyblue;     }     #one .gt_row {       padding: 20px 30px;     }     #one .gt_col_heading {       text-align: center !important;     }     \"   )"},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to add custom CSS for the table — opt_css","text":"9-11","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to modify the set of footnote marks — opt_footnote_marks","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"Alter footnote marks footnotes may present table. Either vector marks can provided (including Unicode characters), , specific keyword used signify preset sequence. function serves shortcut using tab_options(footnotes.marks = {marks})","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"","code":"opt_footnote_marks(data, marks)"},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"data table object created using gt() function. marks Either character vector length greater 1 (represent series marks) single keyword represents preset sequence marks. valid keywords : \"numbers\" (numeric marks), \"letters\" \"LETTERS\" (lowercase uppercase alphabetic marks), \"standard\" (traditional set four symbol marks), \"extended\" (adds two symbols standard set).","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"can supply vector represent series marks. series footnote marks recycled usage goes beyond length set. cycle, marks simply doubled, tripled, (e.g., * -> ** -> ***). option exists providing keywords certain types footnote marks. keywords : \"numbers\": numeric marks, begin 1 marks subject recycling behavior \"letters\": miniscule alphabetic marks, internally uses letters vector contains 26 lowercase letters Roman alphabet \"LETTERS\": majuscule alphabetic marks, using LETTERS vector 26 uppercase letters Roman alphabet \"standard\": symbolic marks, four symbols total \"extended\": symbolic marks, extends standard set adding two symbols, making six","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"Use sza create gt table, adding three footnotes. Call opt_footnote_marks() specify footnote marks use.","code":"sza %>%   dplyr::filter(latitude == 30) %>%   dplyr::group_by(tst) %>%   dplyr::summarize(     SZA.Max = if (       all(is.na(sza))) {       NA     } else {       max(sza, na.rm = TRUE)     },     SZA.Min = if (       all(is.na(sza))) {       NA     } else {       min(sza, na.rm = TRUE)     },     .groups = \"drop\"   ) %>%   gt(rowname_col = \"tst\") %>%   tab_spanner_delim(delim = \".\") %>%   sub_missing(     columns = everything(),     missing_text = \"90+\"   ) %>%   tab_stubhead(label = \"TST\") %>%   tab_footnote(     footnote = \"True solar time.\",     locations = cells_stubhead()   ) %>%   tab_footnote(     footnote = \"Solar zenith angle.\",     locations = cells_column_spanners(       spanners = \"spanner-SZA.Max\"     )   ) %>%   tab_footnote(     footnote = \"The Lowest SZA.\",     locations = cells_stub(rows = \"1200\")   ) %>%   opt_footnote_marks(marks = \"standard\")"},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"9-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to expand or contract horizontal padding — opt_horizontal_padding","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"Increase decrease horizontal padding throughout locations gt table use scale factor, defined real number 0 3. function serves shortcut setting following eight options tab_options(): heading.padding.horizontal column_labels.padding.horizontal data_row.padding.horizontal row_group.padding.horizontal summary_row.padding.horizontal grand_summary_row.padding.horizontal footnotes.padding.horizontal source_notes.padding.horizontal","code":""},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"","code":"opt_horizontal_padding(data, scale = 1)"},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"data table object created using gt() function. scale scale factor horizontal padding adjusted. Must number 0 3.","code":""},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"Use exibble create gt table number table parts added. Expand horizontal padding across entire table opt_horizontal_padding().","code":"exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_horizontal_padding(scale = 3)"},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"9-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to add or remove row striping — opt_row_striping","title":"Option to add or remove row striping — opt_row_striping","text":"default, gt table row striping enabled. However, function allows us easily enable disable striped rows table body. function serves convenient shortcut <gt_tbl> %>% tab_options(row.striping.include_table_body = TRUE|FALSE).","code":""},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to add or remove row striping — opt_row_striping","text":"","code":"opt_row_striping(data, row_striping = TRUE)"},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to add or remove row striping — opt_row_striping","text":"data table object created using gt() function. row_striping logical value indicate whether row striping added removed.","code":""},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to add or remove row striping — opt_row_striping","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to add or remove row striping — opt_row_striping","text":"Use exibble create gt table number table parts added. Next, add row striping every second row opt_row_striping() function.","code":"exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_row_striping()"},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to add or remove row striping — opt_row_striping","text":"9-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":null,"dir":"Reference","previous_headings":"","what":"Stylize your table with a colorful look — opt_stylize","title":"Stylize your table with a colorful look — opt_stylize","text":"opt_stylize() can quickly style gt table carefully curated set background colors, line colors, line styles. six styles choose largely vary extent coloring applied different table locations. table borders applied, apply darker colors table stub summary sections, , even vertical lines. addition choosing style preset, six color variations use range five color tints. color tints fine-tuned maximize contrast text background. 36 combinations style color choose .","code":""},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stylize your table with a colorful look — opt_stylize","text":"","code":"opt_stylize(data, style = 1, color = \"blue\", add_row_striping = TRUE)"},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stylize your table with a colorful look — opt_stylize","text":"data table object created using gt() function. style Six numbered styles available. Simply provide number 1 (default) 6 choose distinct look. color six color variations: \"blue\" (default), \"cyan\", \"pink\", \"green\", \"red\", \"gray\". add_row_striping option enable row striping table body style chosen. default, TRUE.","code":""},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stylize your table with a colorful look — opt_stylize","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stylize your table with a colorful look — opt_stylize","text":"Use exibble create gt table number table parts added. , use opt_stylize() function give table additional style (using \"cyan\" color variation style number 6).","code":"exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_stylize(style = 6, color = \"cyan\")"},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Stylize your table with a colorful look — opt_stylize","text":"9-10","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to define a custom font for the table — opt_table_font","title":"Option to define a custom font for the table — opt_table_font","text":"opt_table_font() function makes possible define custom font entire gt table. standard fallback fonts still set default font defined take precedence. still different fonts select locations table, need use tab_style() conjunction cell_text() helper function.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to define a custom font for the table — opt_table_font","text":"","code":"opt_table_font(data, font, weight = NULL, style = NULL, add = TRUE)"},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to define a custom font for the table — opt_table_font","text":"data table object created using gt() function. font Either name font available user system call google_font(), large selection typefaces. weight weight font. Can text-based keyword \"normal\", \"bold\", \"lighter\", \"bolder\", , numeric value 1 1000, inclusive. Note variable fonts may support numeric mapping weight. style text style. Can one either \"normal\", \"italic\", \"oblique\". add font added front already-defined fonts table? default, TRUE recommended since list serves fallbacks certain fonts available.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to define a custom font for the table — opt_table_font","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Option to define a custom font for the table — opt_table_font","text":"option supply either system font font_name, , font available Google Fonts service use google_font() helper function.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to define a custom font for the table — opt_table_font","text":"Use sp500 create small gt table, using fmt_currency() provide dollar sign first row monetary values. , set larger font size table use \"Merriweather\" font (Google Fonts, via google_font()) two font fallbacks (\"Cochin\" catchall \"Serif\" group).    Use sza create eleven-row table. Within opt_table_font(), set preferred list sans-serif fonts commonly available macOS (using part default_fonts() vector fallback).","code":"sp500 %>%   dplyr::slice(1:10) %>%   dplyr::select(-volume, -adj_close) %>%   gt() %>%   fmt_currency(     columns = 2:5,     rows = 1,     currency = \"USD\",     use_seps = FALSE   ) %>%   tab_options(table.font.size = px(18)) %>%   opt_table_font(     font = list(       google_font(name = \"Merriweather\"),       \"Cochin\", \"Serif\"     )   ) sza %>%   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) %>%   dplyr::select(-latitude, -month) %>%   gt() %>%   opt_table_font(     font = c(       \"Helvetica Neue\", \"Segoe UI\",       default_fonts()[-c(1:3)]     )   ) %>%   opt_all_caps()"},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to define a custom font for the table — opt_table_font","text":"9-9","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to set table lines to different extents — opt_table_lines","title":"Option to set table lines to different extents — opt_table_lines","text":"opt_table_lines() function sets table lines one three possible ways: (1) possible table lines drawn (\"\"), (2) table lines (\"none\"), (3) resetting default line styles (\"default\"). great want start lots lines subtract just tab_options() tab_style(). , use start completely lineless table, adding individual lines needed.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to set table lines to different extents — opt_table_lines","text":"","code":"opt_table_lines(data, extent = c(\"all\", \"none\", \"default\"))"},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to set table lines to different extents — opt_table_lines","text":"data table object created using gt() function. extent extent lines visible table. Options \"\", \"none\", \"default\".","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to set table lines to different extents — opt_table_lines","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to set table lines to different extents — opt_table_lines","text":"Use exibble create gt table number table parts added. , use opt_table_lines() function haves lines everywhere can possibly lines.","code":"exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_table_lines()"},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to set table lines to different extents — opt_table_lines","text":"9-7","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to wrap an outline around the entire table — opt_table_outline","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"function puts outline consistent style, width, color around entire table. 'll write existing outside lines long width larger existing lines. default value style (\"solid\") draw solid outline, whereas value \"none\" remove present outline.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"","code":"opt_table_outline(data, style = \"solid\", width = px(3), color = \"#D3D3D3\")"},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"data table object created using gt() function. style, width, color style, width, color properties table outline. default, \"solid\", px(3) (, \"3px\"), \"#D3D3D3\". \"none\" used outline removed values provided width color ignored (.e., set).","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"Use exibble create gt table number table parts added. outline wrap around entire table using opt_table_outline().    Remove table outline style = \"none\" option.","code":"tab_1 <-   exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_table_outline()  tab_1 tab_1 %>% opt_table_outline(style = \"none\")"},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"9-8","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to expand or contract vertical padding — opt_vertical_padding","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"Increase decrease vertical padding throughout locations gt table use scale factor, defined real number 0 3. function serves shortcut setting following eight options tab_options(): heading.padding column_labels.padding data_row.padding row_group.padding summary_row.padding grand_summary_row.padding footnotes.padding source_notes.padding","code":""},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"","code":"opt_vertical_padding(data, scale = 1)"},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"data table object created using gt() function. scale scale factor vertical padding adjusted. Must number 0 3.","code":""},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"Use exibble create gt table number table parts added. Contract vertical padding across entire table opt_vertical_padding().","code":"exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = list(       min = ~min(., na.rm = TRUE),       max = ~max(., na.rm = TRUE)     )) %>%   grand_summary_rows(     columns = currency,     fns = list(       total = ~sum(., na.rm = TRUE)     )) %>%   tab_source_note(source_note = \"This is a source note.\") %>%   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) %>%   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) %>%   opt_vertical_padding(scale = 0.25)"},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"9-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for providing a numeric value as percentage — pct","title":"Helper for providing a numeric value as percentage — pct","text":"percentage value acts length value relative initial state. instance 80 percent value something size target 80 percent size 'previous' value. type sizing useful sizing length value intuitive measure. helper function can used setting font sizes (e.g., cell_text()) altering thicknesses lines (e.g., cell_borders()). exact definition size required, analogous helper function pct() useful.","code":""},{"path":"https://gt.rstudio.com/reference/pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for providing a numeric value as percentage — pct","text":"","code":"pct(x)"},{"path":"https://gt.rstudio.com/reference/pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for providing a numeric value as percentage — pct","text":"x numeric value format string percentage tab_options() arguments can take percentage values (e.g., table.width).","code":""},{"path":"https://gt.rstudio.com/reference/pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for providing a numeric value as percentage — pct","text":"character vector single value percentage units.","code":""},{"path":"https://gt.rstudio.com/reference/pct.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for providing a numeric value as percentage — pct","text":"Use exibble create gt table. Use pct() helper define font size column labels.","code":"exibble %>%   gt() %>%   tab_style(     style = cell_text(size = pct(75)),     locations = cells_column_labels()   )"},{"path":"https://gt.rstudio.com/reference/pct.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for providing a numeric value as percentage — pct","text":"7-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://gt.rstudio.com/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":null,"dir":"Reference","previous_headings":"","what":"A year of pizza sales from a pizza place — pizzaplace","title":"A year of pizza sales from a pizza place — pizzaplace","text":"synthetic dataset describes pizza sales pizza place somewhere US. contents artificial, ingredients used make pizzas far . 32 different pizzas fall 4 different categories: classic (classic pizzas: 'probably one like , never like !'), chicken (pizzas chicken major ingredient: 'Try Southwest Chicken Pizza! love !'), supreme (pizzas try little harder: 'Soppressata pizza uses finest salami personal salumist!'), , veggie (pizzas without meats whatsoever: 'Five Cheese pizza many cheeses, can offer Large Size!').","code":""},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A year of pizza sales from a pizza place — pizzaplace","text":"","code":"pizzaplace"},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A year of pizza sales from a pizza place — pizzaplace","text":"tibble 49574 rows 7 variables: id ID order, consists one pizzas give date time date character representation order date, expressed ISO 8601 date format (YYYY-MM-DD) time character representation order time, expressed 24-hour time ISO 8601 extended time format (hh:mm:ss) name short name pizza size size pizza, can either S, M, L, XL (rare!), XXL (even rarer!); pizzas available S, M, L sizes exceptions apply type category type pizza, can either classic, chicken, supreme, veggie price price pizza amount sold (USD)","code":""},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A year of pizza sales from a pizza place — pizzaplace","text":"pizza dataset identified short name. following listings provide full names pizza main ingredients. Classic Pizzas: classic_dlx: Classic Deluxe Pizza (Pepperoni, Mushrooms, Red Onions, Red Peppers, Bacon) big_meat: Big Meat Pizza (Bacon, Pepperoni, Italian Sausage, Chorizo Sausage) pepperoni: Pepperoni Pizza (Mozzarella Cheese, Pepperoni) hawaiian: Hawaiian Pizza (Sliced Ham, Pineapple, Mozzarella Cheese) pep_msh_pep: Pepperoni, Mushroom, Peppers Pizza (Pepperoni, Mushrooms, Green Peppers) ital_cpcllo: Italian Capocollo Pizza (Capocollo, Red Peppers, Tomatoes, Goat Cheese, Garlic, Oregano) napolitana: Napolitana Pizza (Tomatoes, Anchovies, Green Olives, Red Onions, Garlic) the_greek: Greek Pizza (Kalamata Olives, Feta Cheese, Tomatoes, Garlic, Beef Chuck Roast, Red Onions) Chicken Pizzas: thai_ckn: Thai Chicken Pizza (Chicken, Pineapple, Tomatoes, Red Peppers, Thai Sweet Chilli Sauce) bbq_ckn: Barbecue Chicken Pizza (Barbecued Chicken, Red Peppers, Green Peppers, Tomatoes, Red Onions, Barbecue Sauce) southw_ckn: Southwest Chicken Pizza (Chicken, Tomatoes, Red Peppers, Red Onions, Jalapeno Peppers, Corn, Cilantro, Chipotle Sauce) cali_ckn: California Chicken Pizza (Chicken, Artichoke, Spinach, Garlic, Jalapeno Peppers, Fontina Cheese, Gouda Cheese) ckn_pesto: Chicken Pesto Pizza (Chicken, Tomatoes, Red Peppers, Spinach, Garlic, Pesto Sauce) ckn_alfredo: Chicken Alfredo Pizza (Chicken, Red Onions, Red Peppers, Mushrooms, Asiago Cheese, Alfredo Sauce) Supreme Pizzas: brie_carre: Brie Carre Pizza (Brie Carre Cheese, Prosciutto, Caramelized Onions, Pears, Thyme, Garlic) calabrese: Calabrese Pizza (‘Nduja Salami, Pancetta, Tomatoes, Red Onions, Friggitello Peppers, Garlic) soppressata: Soppressata Pizza (Soppressata Salami, Fontina Cheese, Mozzarella Cheese, Mushrooms, Garlic) sicilian: Sicilian Pizza (Coarse Sicilian Salami, Tomatoes, Green Olives, Luganega Sausage, Onions, Garlic) ital_supr: Italian Supreme Pizza (Calabrese Salami, Capocollo, Tomatoes, Red Onions, Green Olives, Garlic) peppr_salami: Pepper Salami Pizza (Genoa Salami, Capocollo, Pepperoni, Tomatoes, Asiago Cheese, Garlic) prsc_argla: Prosciutto Arugula Pizza (Prosciutto di San Daniele, Arugula, Mozzarella Cheese) spinach_supr: Spinach Supreme Pizza (Spinach, Red Onions, Pepperoni, Tomatoes, Artichokes, Kalamata Olives, Garlic, Asiago Cheese) spicy_ital: Spicy Italian Pizza (Capocollo, Tomatoes, Goat Cheese, Artichokes, Peperoncini verdi, Garlic) Vegetable Pizzas mexicana: Mexicana Pizza (Tomatoes, Red Peppers, Jalapeno Peppers, Red Onions, Cilantro, Corn, Chipotle Sauce, Garlic) four_cheese: Four Cheese Pizza (Ricotta Cheese, Gorgonzola Piccante Cheese, Mozzarella Cheese, Parmigiano Reggiano Cheese, Garlic) five_cheese: Five Cheese Pizza (Mozzarella Cheese, Provolone Cheese, Smoked Gouda Cheese, Romano Cheese, Blue Cheese, Garlic) spin_pesto: Spinach Pesto Pizza (Spinach, Artichokes, Tomatoes, Sun-dried Tomatoes, Garlic, Pesto Sauce) veggie_veg: Vegetables + Vegetables Pizza (Mushrooms, Tomatoes, Red Peppers, Green Peppers, Red Onions, Zucchini, Spinach, Garlic) green_garden: Green Garden Pizza (Spinach, Mushrooms, Tomatoes, Green Olives, Feta Cheese) mediterraneo: Mediterranean Pizza (Spinach, Artichokes, Kalamata Olives, Sun-dried Tomatoes, Feta Cheese, Plum Tomatoes, Red Onions) spinach_fet: Spinach Feta Pizza (Spinach, Mushrooms, Red Onions, Feta Cheese, Garlic) ital_veggie: Italian Vegetables Pizza (Eggplant, Artichokes, Tomatoes, Zucchini, Red Peppers, Garlic, Pesto Sauce)","code":""},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A year of pizza sales from a pizza place — pizzaplace","text":"glimpse pizza data available pizzaplace.","code":"dplyr::glimpse(pizzaplace) #> Rows: 49,574 #> Columns: 7 #> $ id    <chr> \"2015-000001\", \"2015-000002\", \"2015-000002\", \"2015-000002\", \"201~ #> $ date  <chr> \"2015-01-01\", \"2015-01-01\", \"2015-01-01\", \"2015-01-01\", \"2015-01~ #> $ time  <chr> \"11:38:36\", \"11:57:40\", \"11:57:40\", \"11:57:40\", \"11:57:40\", \"11:~ #> $ name  <chr> \"hawaiian\", \"classic_dlx\", \"mexicana\", \"thai_ckn\", \"five_cheese\"~ #> $ size  <chr> \"M\", \"M\", \"M\", \"L\", \"L\", \"L\", \"L\", \"M\", \"M\", \"M\", \"S\", \"S\", \"S\",~ #> $ type  <chr> \"classic\", \"classic\", \"veggie\", \"chicken\", \"veggie\", \"supreme\", ~ #> $ price <dbl> 13.25, 16.00, 16.00, 20.75, 18.50, 20.75, 20.75, 16.50, 16.50, 1~"},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"A year of pizza sales from a pizza place — pizzaplace","text":"11-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/print.gt_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the table — print.gt_tbl","title":"Print the table — print.gt_tbl","text":"facilitates printing HTML table R console.","code":""},{"path":"https://gt.rstudio.com/reference/print.gt_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the table — print.gt_tbl","text":"","code":"# S3 method for gt_tbl print(x, ..., view = interactive())"},{"path":"https://gt.rstudio.com/reference/print.gt_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the table — print.gt_tbl","text":"x object class gt_tbl. ... additional parameters. view value print()s browse argument.","code":""},{"path":"https://gt.rstudio.com/reference/print.rtf_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Print RTF text — print.rtf_text","title":"Print RTF text — print.rtf_text","text":"Print RTF text","code":""},{"path":"https://gt.rstudio.com/reference/print.rtf_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print RTF text — print.rtf_text","text":"","code":"# S3 method for rtf_text print(x, ...)"},{"path":"https://gt.rstudio.com/reference/print.rtf_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print RTF text — print.rtf_text","text":"x Object printed. ... additional parameters.","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for providing a numeric value as pixels value — px","title":"Helper for providing a numeric value as pixels value — px","text":"certain parameters, length value required. Examples include setting font sizes (e.g., cell_text()) thicknesses lines (e.g., cell_borders()). Setting length pixels px() allows absolute definition size opposed analogous helper function pct().","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for providing a numeric value as pixels value — px","text":"","code":"px(x)"},{"path":"https://gt.rstudio.com/reference/px.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for providing a numeric value as pixels value — px","text":"x numeric value format string (e.g., \"12px\") tab_options() arguments can take values units pixels (e.g., table.font.size).","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for providing a numeric value as pixels value — px","text":"character vector single value pixel units.","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for providing a numeric value as pixels value — px","text":"Use exibble create gt table. Use px() helper define font size column labels.","code":"exibble %>%   gt() %>%   tab_style(     style = cell_text(size = px(20)),     locations = cells_column_labels()   )"},{"path":"https://gt.rstudio.com/reference/px.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for providing a numeric value as pixels value — px","text":"7-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/random_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for creating a random id for a gt table — random_id","title":"Helper for creating a random id for a gt table — random_id","text":"helper function can used create random, character-based ID value argument variable length (default 10 letters).","code":""},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for creating a random id for a gt table — random_id","text":"","code":"random_id(n = 10)"},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for creating a random id for a gt table — random_id","text":"n number lowercase letters use random ID.","code":""},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for creating a random id for a gt table — random_id","text":"character vector containing single, random ID.","code":""},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for creating a random id for a gt table — random_id","text":"7-24","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr vars htmltools css tidyselect contains, ends_with, everything, matches, num_range, one_of, starts_with","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"A gt display table render function for use in Shiny — render_gt","title":"A gt display table render function for use in Shiny — render_gt","text":"render_gt() can create reactive gt table works wonderfully assigned output slot (gt_output()). function used within Shiny's server() component. options controlling size container holding gt table. width height arguments allow sizing container, align argument allows us align table within container (fine-grained options positioning available tab_options() function).","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A gt display table render function for use in Shiny — render_gt","text":"","code":"render_gt(   expr,   width = NULL,   height = NULL,   align = NULL,   env = parent.frame(),   quoted = FALSE,   outputArgs = list() )"},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A gt display table render function for use in Shiny — render_gt","text":"expr expression creates gt table object. sake convenience, data frame tibble can used (automatically introduced gt() default options). width, height width height table's container. Either can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. align alignment table container. default, \"center\". options \"left\" \"right\". env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable. outputArgs list arguments passed implicit call gt_output() render_gt used interactive R Markdown document.","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A gt display table render function for use in Shiny — render_gt","text":"need ensure shiny package installed first. easily using install.packages(\"shiny\"). information creating Shiny apps can found Shiny Site.","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A gt display table render function for use in Shiny — render_gt","text":"Shiny app (contained within single file) (1) prepares gt table, (2) sets ui gt_output(), (3) sets server render_gt() uses gt_tbl object input expression.","code":"library(shiny)  gt_tbl <-   gtcars %>%   gt() %>%   cols_hide(contains(\"_\"))  ui <- fluidPage(    gt_output(outputId = \"table\") )  server <- function(input,                    output,                    session) {    output$table <-     render_gt(       expr = gt_tbl,       height = px(600),       width = px(600)     ) }"},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"A gt display table render function for use in Shiny — render_gt","text":"12-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the ordering of any row groups — row_group_order","title":"Modify the ordering of any row groups — row_group_order","text":"can modify display order row groups gt object row_group_order() function. groups argument takes vector row group ID values. function invoked, row groups adhere revised ordering. necessary provide row ID values groups, rather, provided assume specified ordering top table remaining row groups follow original ordering.","code":""},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the ordering of any row groups — row_group_order","text":"","code":"row_group_order(data, groups)"},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the ordering of any row groups — row_group_order","text":"data table object created using gt() function. groups character vector row group ID values corresponding revised ordering. vector must contain valid group ID values, required row group IDs within ; omitted values added end preserving original ordering.","code":""},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the ordering of any row groups — row_group_order","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify the ordering of any row groups — row_group_order","text":"Use exibble create gt table stub row groups. Modify order row groups row_group_order(), specifying new ordering groups.","code":"exibble %>%   dplyr::select(char, currency, row, group) %>%   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) %>%   row_group_order(groups = c(\"grp_b\", \"grp_a\"))"},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Modify the ordering of any row groups — row_group_order","text":"5-1","code":""},{"path":"https://gt.rstudio.com/reference/sp500.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily S&P 500 Index data from 1950 to 2015 — sp500","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"dataset provides daily price indicators S&P 500 index beginning 1950 end 2015. index includes 500 leading companies captures 80\\","code":""},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"","code":"sp500"},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"tibble 16607 rows 7 variables: date date expressed Date values open, high, low, close day's opening, high, low, closing prices USD; close price adjusted splits volume number trades given date adj_close close price adjusted dividends splits","code":""},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"glimpse data available sp500.","code":"dplyr::glimpse(sp500) #> Rows: 16,607 #> Columns: 7 #> $ date      <date> 2015-12-31, 2015-12-30, 2015-12-29, 2015-12-28, 2015-12-24,~ #> $ open      <dbl> 2060.59, 2077.34, 2060.54, 2057.77, 2063.52, 2042.20, 2023.1~ #> $ high      <dbl> 2062.54, 2077.34, 2081.56, 2057.77, 2067.36, 2064.73, 2042.7~ #> $ low       <dbl> 2043.62, 2061.97, 2060.54, 2044.20, 2058.73, 2042.20, 2020.4~ #> $ close     <dbl> 2043.94, 2063.36, 2078.36, 2056.50, 2060.99, 2064.29, 2038.9~ #> $ volume    <dbl> 2655330000, 2367430000, 2542000000, 2492510000, 1411860000, ~ #> $ adj_close <dbl> 2043.94, 2063.36, 2078.36, 2056.50, 2060.99, 2064.29, 2038.9~"},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"11-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/stub.html","id":null,"dir":"Reference","previous_headings":"","what":"Select helper for targeting the stub column — stub","title":"Select helper for targeting the stub column — stub","text":"need target stub column formatting operations, stub() select helper can used. obviates need use name column selected stub column.","code":""},{"path":"https://gt.rstudio.com/reference/stub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select helper for targeting the stub column — stub","text":"","code":"stub()"},{"path":"https://gt.rstudio.com/reference/stub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select helper for targeting the stub column — stub","text":"character vector class \"stub_column\".","code":""},{"path":"https://gt.rstudio.com/reference/stub.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select helper for targeting the stub column — stub","text":"Create tibble row column (values 1 6), group column, vals column (containing values row).   Create gt table two-column stub (incorporating row group columns ). Format row labels stub fmt_roman() obtain Roman numerals stub; selecting stub column stub() select helper.","code":"tbl <-   dplyr::tibble(     row = 1:6,     group = c(rep(\"Group A\", 3), rep(\"Group B\", 3)),     vals = 1:6   ) tbl %>%   gt(rowname_col = \"row\", groupname_col = \"group\") %>%   fmt_roman(columns = stub()) %>%   tab_options(row_group.as_column = TRUE)"},{"path":"https://gt.rstudio.com/reference/stub.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Select helper for targeting the stub column — stub","text":"7-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute large values in the table body — sub_large_vals","title":"Substitute large values in the table body — sub_large_vals","text":"Wherever numerical data large value, replacement text may better explanatory purposes. sub_large_vals() function allows replacement specification threshold, large_pattern, sign (positive negative) values considered.","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute large values in the table body — sub_large_vals","text":"","code":"sub_large_vals(   data,   columns = everything(),   rows = everything(),   threshold = 1e+12,   large_pattern = \">={x}\",   sign = \"+\" )"},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute large values in the table body — sub_large_vals","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). threshold threshold value values considered large enough replacement. large_pattern pattern text used place suitably large values rendered table. sign sign numbers considered replacement. default, consider positive values (\"+\"). option (\"-\") can used consider negative values.","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute large values in the table body — sub_large_vals","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitute large values in the table body — sub_large_vals","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute large values in the table body — sub_large_vals","text":"generate simple, single-column tibble contains assortment values potentially undergo substitution.   tbl object contains variety larger numbers might larger enough reformat threshold value. sub_large_vals() can just :    Large negative values can also handled handled specially sign parameter. Setting \"-\" format large values negative. Notice default large_pattern value \">={x}\" \">=\" automatically changed \"<=\".    settle default threshold value default replacement pattern (large_pattern). can changed \"{x}\" large_pattern (uses threshold value) can even omitted.","code":"tbl <- dplyr::tibble(num = c(0, NA, 10^(8:14)))  tbl #> # A tibble: 9 x 1 #>     num #>   <dbl> #> 1  0    #> 2 NA    #> 3  1e 8 #> 4  1e 9 #> 5  1e10 #> 6  1e11 #> 7  1e12 #> 8  1e13 #> 9  1e14 tbl %>%   gt() %>%   fmt_number(columns = num) %>%   sub_large_vals() tbl %>%   dplyr::mutate(num = -num) %>%   gt() %>%   fmt_number(columns = num) %>%   sub_large_vals(sign = \"-\") tbl %>%   gt() %>%   fmt_number(columns = num) %>%   sub_large_vals(     threshold = 5E10,     large_pattern = \"hugemongous\"   )"},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute large values in the table body — sub_large_vals","text":"3-20","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute missing values in the table body — sub_missing","title":"Substitute missing values in the table body — sub_missing","text":"Wherever missing data (.e., NA values) customizable content may present better standard NA text otherwise appear. sub_missing() function allows replacement missing_text argument (em dash serves default).","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute missing values in the table body — sub_missing","text":"","code":"sub_missing(   data,   columns = everything(),   rows = everything(),   missing_text = \"---\" )"},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute missing values in the table body — sub_missing","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). missing_text text used place NA values rendered table.","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute missing values in the table body — sub_missing","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitute missing values in the table body — sub_missing","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute missing values in the table body — sub_missing","text":"Use exibble create gt table. NA values different columns given replacement text two calls sub_missing().","code":"exibble %>%   dplyr::select(-row, -group) %>%   gt() %>%   sub_missing(     columns = 1:2,     missing_text = \"missing\"   ) %>%   sub_missing(     columns = 4:7,     missing_text = \"nothing\"   )"},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute missing values in the table body — sub_missing","text":"3-17","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute small values in the table body — sub_small_vals","title":"Substitute small values in the table body — sub_small_vals","text":"Wherever numerical data small value, replacement text may better explanatory purposes. sub_small_vals() function allows replacement specification threshold, small_pattern, sign values considered.","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute small values in the table body — sub_small_vals","text":"","code":"sub_small_vals(   data,   columns = everything(),   rows = everything(),   threshold = 0.01,   small_pattern = if (sign == \"+\") \"<{x}\" else md(\"<*abs*(-{x})\"),   sign = \"+\" )"},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute small values in the table body — sub_small_vals","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). threshold threshold value values considered small enough replacement. small_pattern pattern text used place suitably small values rendered table. sign sign numbers considered replacement. default, consider positive values (\"+\"). option (\"-\") can used consider negative values.","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute small values in the table body — sub_small_vals","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitute small values in the table body — sub_small_vals","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute small values in the table body — sub_small_vals","text":"generate simple, single-column tibble contains assortment values potentially undergo substitution.   tbl contains variety smaller numbers might small enough reformat threshold value. sub_small_vals() can just :    Small negative values can also handled handled specially sign parameter. Setting \"-\" format small, negative values.    settle default threshold value default replacement pattern (small_pattern). can changed \"{x}\" small_pattern (uses threshold value) can even omitted.","code":"tbl <- dplyr::tibble(num = c(10^(-4:2), 0, NA))  tbl #> # A tibble: 9 x 1 #>        num #>      <dbl> #> 1   0.0001 #> 2   0.001  #> 3   0.01   #> 4   0.1    #> 5   1      #> 6  10      #> 7 100      #> 8   0      #> 9  NA tbl %>%   gt() %>%   fmt_number(columns = num) %>%   sub_small_vals() tbl %>%   dplyr::mutate(num = -num) %>%   gt() %>%   fmt_number(columns = num) %>%   sub_small_vals(sign = \"-\") tbl %>%   gt() %>%   fmt_number(columns = num) %>%   sub_small_vals(     threshold = 0.0005,     small_pattern = \"smol\"   )"},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute small values in the table body — sub_small_vals","text":"3-19","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute zero values in the table body — sub_zero","title":"Substitute zero values in the table body — sub_zero","text":"Wherever numerical data zero value, replacement text may better explanatory purposes. sub_zero() function allows replacement zero_text argument.","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute zero values in the table body — sub_zero","text":"","code":"sub_zero(data, columns = everything(), rows = everything(), zero_text = \"nil\")"},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute zero values in the table body — sub_zero","text":"data table object created using gt() function. columns columns format. Can either series column names provided c(), vector column indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). rows Optional rows format. Providing everything() (default) results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). zero_text text used place zero values rendered table.","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute zero values in the table body — sub_zero","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitute zero values in the table body — sub_zero","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). Conditional formatting possible providing conditional expression rows argument. See Arguments section information .","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute zero values in the table body — sub_zero","text":"generate simple, single-column tibble contains assortment values potentially undergo substitution.   table, zero values given replacement text single call sub_zero().","code":"tbl <- dplyr::tibble(num = c(10^(-1:2), 0, 0, 10^(4:6)))  tbl #> # A tibble: 9 x 1 #>         num #>       <dbl> #> 1       0.1 #> 2       1   #> 3      10   #> 4     100   #> 5       0   #> 6       0   #> 7   10000   #> 8  100000   #> 9 1000000 tbl %>%   gt() %>%   fmt_number(columns = num) %>%   sub_zero()"},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute zero values in the table body — sub_zero","text":"3-18","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add groupwise summary rows using aggregation functions — summary_rows","title":"Add groupwise summary rows using aggregation functions — summary_rows","text":"Add summary rows one row groups using table data suitable aggregation functions. choose format values resulting summary cells use formatter function (e.g, fmt_number, etc.) relevant options.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add groupwise summary rows using aggregation functions — summary_rows","text":"","code":"summary_rows(   data,   groups = NULL,   columns = everything(),   fns,   missing_text = \"---\",   formatter = fmt_number,   ... )"},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add groupwise summary rows using aggregation functions — summary_rows","text":"data table object created using gt() function. groups groups consider generation groupwise summary rows. default set NULL, results formation grand summary rows (grand summary operates table data). Providing names row groups c() create groupwise summary generate summary rows specified groups. Setting TRUE indicates available groups receive groupwise summary rows. columns columns summaries calculated. fns Functions used aggregations. can include base functions like mean, min, max, median, sd, sum user-defined aggregation function. function(s) supplied within list(). Within list, can specify functions use function names quotes (e.g., \"sum\"), bare functions (e.g., sum), one-sided R formulas using leading ~. formula representation, . serves data summarized (e.g., sum(., na.rm = TRUE)). use named arguments recommended names serve summary row labels corresponding summary rows data (labels can derived function names providing bare function names). missing_text text used place NA values summary cells data outputs. formatter formatter function name. can fmt_*() functions available package (e.g., fmt_number(), fmt_percent(), etc.), custom function using fmt(). default function fmt_number() options can accessed .... ... Values passed formatter function, provided values form named vectors. example, using default formatter function, fmt_number(), options decimals, use_seps, locale can used.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add groupwise summary rows using aggregation functions — summary_rows","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add groupwise summary rows using aggregation functions — summary_rows","text":"need obtain summary data external purposes, extract_summary() function can used gt_tbl object summary rows added via summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add groupwise summary rows using aggregation functions — summary_rows","text":"Use sp500 create gt table row groups. Create summary rows labeled min, max, avg row group (row group week number) summary_rows() function.","code":"sp500 %>%   dplyr::filter(date >= \"2015-01-05\" & date <=\"2015-01-16\") %>%   dplyr::arrange(date) %>%   dplyr::mutate(week = paste0( \"W\", strftime(date, format = \"%V\"))) %>%   dplyr::select(-adj_close, -volume) %>%   gt(     rowname_col = \"date\",     groupname_col = \"week\"   ) %>%   summary_rows(     groups = TRUE,     columns = c(open, high, low, close),     fns = list(       min = ~min(.),       max = ~max(.),       avg = ~mean(.)),     formatter = fmt_number,     use_seps = FALSE   )"},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add groupwise summary rows using aggregation functions — summary_rows","text":"6-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sza.html","id":null,"dir":"Reference","previous_headings":"","what":"Twice hourly solar zenith angles by month & latitude — sza","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"dataset contains solar zenith angles (degrees, range 0-90) every half hour 04:00 12:00, true solar time. set values calculated first every month 4 different northern hemisphere latitudes. determination afternoon values, presented tabulated values symmetric noon.","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"","code":"sza"},{"path":"https://gt.rstudio.com/reference/sza.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"tibble 816 rows 4 variables: latitude latitude decimal degrees observations month measurement month; calculations conducted first day month tst true solar time given latitude date (first month) solar zenith angle calculated sza solar zenith angle degrees, NAs indicate sunrise yet occurred tst value","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"Calculated Actinic Fluxes (290 - 700 nm) Air Pollution Photochemistry Applications (Peterson, 1976), available : https://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=9100JA26.txt.","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"solar zenith angle (SZA) one measure helps describe sun's path across sky. defined angle sun relative line perpendicular earth's surface. useful calculate SZA relation true solar time. True solar time relates position sun respect observer, different depending exact longitude. example, two hours sun crosses meridian (highest point reach day) corresponds true solar time 10 .m. SZA strong dependence observer's latitude. example, latitude 50 degrees N start January, noontime SZA 73.0 different observer 20 degrees N measure noontime SZA 43.0 degrees.","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"glimpse data available sza.","code":"dplyr::glimpse(sza) #> Rows: 816 #> Columns: 4 #> $ latitude <dbl> 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2~ #> $ month    <fct> jan, jan, jan, jan, jan, jan, jan, jan, jan, jan, jan, jan, j~ #> $ tst      <chr> \"0400\", \"0430\", \"0500\", \"0530\", \"0600\", \"0630\", \"0700\", \"0730~ #> $ sza      <dbl> NA, NA, NA, NA, NA, NA, 84.9, 78.7, 72.7, 66.1, 61.5, 56.5, 5~"},{"path":"https://gt.rstudio.com/reference/sza.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"11-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a table footnote — tab_footnote","title":"Add a table footnote — tab_footnote","text":"tab_footnote() function can make painless process add footnote gt table. two components footnote: (1) footnote mark attached targeted cell text, (2) footnote text (starts corresponding footnote mark) placed table's footer area. call tab_footnote() add different note, one cells can targeted via location helper functions (e.g., cells_body(), cells_column_labels(), etc.).","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a table footnote — tab_footnote","text":"","code":"tab_footnote(   data,   footnote,   locations = NULL,   placement = c(\"auto\", \"right\", \"left\") )"},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a table footnote — tab_footnote","text":"data table object created using gt() function. footnote text used footnote. can optionally use md() html() functions style text Markdown retain HTML elements footnote text. locations cell set cells associated footnote. Supplying cells_*() helper functions useful way target location cells associated footnote text. helper functions : cells_title(), cells_stubhead(), cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body(), cells_summary(), cells_grand_summary(), cells_stub_summary(), cells_stub_grand_summary(). Additionally, can enclose several cells_*() calls within list() wish link footnote text different types locations (e.g., body cells, row group labels, table title, etc.). placement affix footnote marks table content. Two options \"left \"right\", placement absolute left right cell content. default, however, set \"auto\" whereby gt choose preferred left--right placement depending alignment cell content.","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a table footnote — tab_footnote","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a table footnote — tab_footnote","text":"formatting footnotes can controlled use various parameters tab_options() function: footnotes.multiline: setting determines whether footnotes start new line combined single block. footnotes.sep: allows choice separator consecutive footnotes table footer. default, set single space character. footnotes.marks: set sequential characters numbers used identify footnotes. footnotes.font.size: size font used footnote section. footnotes.padding: amount padding apply footnote source note sections table footer.","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a table footnote — tab_footnote","text":"Use sza create gt table. Color sza column using data_color() function, , use tab_footnote() add footnote sza column label (explaining color scale signifies).","code":"sza %>%   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) %>%   dplyr::select(-latitude, -month) %>%   gt() %>%   data_color(     columns = sza,     colors = scales::col_numeric(       palette = c(\"white\", \"yellow\", \"navyblue\"),       domain = c(0, 90)     )   ) %>%   tab_footnote(     footnote = \"Color indicates height of sun.\",     locations = cells_column_labels(       columns = sza     )   )"},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a table footnote — tab_footnote","text":"2-7","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a table header — tab_header","title":"Add a table header — tab_header","text":"can add table header gt table title even subtitle. table header optional table part positioned column labels. flexibility use Markdown formatting header's title subtitle. Furthermore, table intended HTML output, can use HTML either title subtitle.","code":""},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a table header — tab_header","text":"","code":"tab_header(data, title, subtitle = NULL, preheader = NULL)"},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a table header — tab_header","text":"data table object created using gt() function. title, subtitle Text used table title , optionally, table subtitle. can elect use md() html() helper functions style text Markdown retain HTML elements text. preheader Optional preheader content rendered table. Can supplied vector text.","code":""},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a table header — tab_header","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a table header — tab_header","text":"Use gtcars create gt table. Add header part tab_header() function get title subtitle table.","code":"gtcars %>%   dplyr::select(mfr, model, msrp) %>%   dplyr::slice(1:5) %>%   gt() %>%   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   )"},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a table header — tab_header","text":"2-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the table output options — tab_options","title":"Modify the table output options — tab_options","text":"Modify options available table. options named components, subcomponents, element can adjusted.","code":""},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the table output options — tab_options","text":"","code":"tab_options(   data,   container.width = NULL,   container.height = NULL,   container.overflow.x = NULL,   container.overflow.y = NULL,   table.width = NULL,   table.layout = NULL,   table.align = NULL,   table.margin.left = NULL,   table.margin.right = NULL,   table.background.color = NULL,   table.additional_css = NULL,   table.font.names = NULL,   table.font.size = NULL,   table.font.weight = NULL,   table.font.style = NULL,   table.font.color = NULL,   table.font.color.light = NULL,   table.border.top.style = NULL,   table.border.top.width = NULL,   table.border.top.color = NULL,   table.border.right.style = NULL,   table.border.right.width = NULL,   table.border.right.color = NULL,   table.border.bottom.style = NULL,   table.border.bottom.width = NULL,   table.border.bottom.color = NULL,   table.border.left.style = NULL,   table.border.left.width = NULL,   table.border.left.color = NULL,   heading.background.color = NULL,   heading.align = NULL,   heading.title.font.size = NULL,   heading.title.font.weight = NULL,   heading.subtitle.font.size = NULL,   heading.subtitle.font.weight = NULL,   heading.padding = NULL,   heading.padding.horizontal = NULL,   heading.border.bottom.style = NULL,   heading.border.bottom.width = NULL,   heading.border.bottom.color = NULL,   heading.border.lr.style = NULL,   heading.border.lr.width = NULL,   heading.border.lr.color = NULL,   column_labels.background.color = NULL,   column_labels.font.size = NULL,   column_labels.font.weight = NULL,   column_labels.text_transform = NULL,   column_labels.padding = NULL,   column_labels.padding.horizontal = NULL,   column_labels.vlines.style = NULL,   column_labels.vlines.width = NULL,   column_labels.vlines.color = NULL,   column_labels.border.top.style = NULL,   column_labels.border.top.width = NULL,   column_labels.border.top.color = NULL,   column_labels.border.bottom.style = NULL,   column_labels.border.bottom.width = NULL,   column_labels.border.bottom.color = NULL,   column_labels.border.lr.style = NULL,   column_labels.border.lr.width = NULL,   column_labels.border.lr.color = NULL,   column_labels.hidden = NULL,   row_group.background.color = NULL,   row_group.font.size = NULL,   row_group.font.weight = NULL,   row_group.text_transform = NULL,   row_group.padding = NULL,   row_group.padding.horizontal = NULL,   row_group.border.top.style = NULL,   row_group.border.top.width = NULL,   row_group.border.top.color = NULL,   row_group.border.bottom.style = NULL,   row_group.border.bottom.width = NULL,   row_group.border.bottom.color = NULL,   row_group.border.left.style = NULL,   row_group.border.left.width = NULL,   row_group.border.left.color = NULL,   row_group.border.right.style = NULL,   row_group.border.right.width = NULL,   row_group.border.right.color = NULL,   row_group.default_label = NULL,   row_group.as_column = NULL,   table_body.hlines.style = NULL,   table_body.hlines.width = NULL,   table_body.hlines.color = NULL,   table_body.vlines.style = NULL,   table_body.vlines.width = NULL,   table_body.vlines.color = NULL,   table_body.border.top.style = NULL,   table_body.border.top.width = NULL,   table_body.border.top.color = NULL,   table_body.border.bottom.style = NULL,   table_body.border.bottom.width = NULL,   table_body.border.bottom.color = NULL,   stub.background.color = NULL,   stub.font.size = NULL,   stub.font.weight = NULL,   stub.text_transform = NULL,   stub.border.style = NULL,   stub.border.width = NULL,   stub.border.color = NULL,   stub.indent_length = NULL,   stub_row_group.font.size = NULL,   stub_row_group.font.weight = NULL,   stub_row_group.text_transform = NULL,   stub_row_group.border.style = NULL,   stub_row_group.border.width = NULL,   stub_row_group.border.color = NULL,   data_row.padding = NULL,   data_row.padding.horizontal = NULL,   summary_row.background.color = NULL,   summary_row.text_transform = NULL,   summary_row.padding = NULL,   summary_row.padding.horizontal = NULL,   summary_row.border.style = NULL,   summary_row.border.width = NULL,   summary_row.border.color = NULL,   grand_summary_row.background.color = NULL,   grand_summary_row.text_transform = NULL,   grand_summary_row.padding = NULL,   grand_summary_row.padding.horizontal = NULL,   grand_summary_row.border.style = NULL,   grand_summary_row.border.width = NULL,   grand_summary_row.border.color = NULL,   footnotes.background.color = NULL,   footnotes.font.size = NULL,   footnotes.padding = NULL,   footnotes.padding.horizontal = NULL,   footnotes.border.bottom.style = NULL,   footnotes.border.bottom.width = NULL,   footnotes.border.bottom.color = NULL,   footnotes.border.lr.style = NULL,   footnotes.border.lr.width = NULL,   footnotes.border.lr.color = NULL,   footnotes.marks = NULL,   footnotes.multiline = NULL,   footnotes.sep = NULL,   source_notes.background.color = NULL,   source_notes.font.size = NULL,   source_notes.padding = NULL,   source_notes.padding.horizontal = NULL,   source_notes.border.bottom.style = NULL,   source_notes.border.bottom.width = NULL,   source_notes.border.bottom.color = NULL,   source_notes.border.lr.style = NULL,   source_notes.border.lr.width = NULL,   source_notes.border.lr.color = NULL,   source_notes.multiline = NULL,   source_notes.sep = NULL,   row.striping.background_color = NULL,   row.striping.include_stub = NULL,   row.striping.include_table_body = NULL,   page.orientation = NULL,   page.numbering = NULL,   page.header.use_tbl_headings = NULL,   page.footer.use_tbl_notes = NULL,   page.width = NULL,   page.height = NULL,   page.margin.left = NULL,   page.margin.right = NULL,   page.margin.top = NULL,   page.margin.bottom = NULL,   page.header.height = NULL,   page.footer.height = NULL )"},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the table output options — tab_options","text":"data table object created using gt() function. container.width, container.height width height table's container. Can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. container.overflow.x, container.overflow.y Options enable scrolling horizontal vertical directions table content overflows container dimensions. Using TRUE (default ) means horizontal vertical scrolling enabled view entire table directions. FALSE, table may clipped table width height exceeds container.width container.height. table.width width table. Can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. table.layout value table-layout CSS style HTML output context. default, \"fixed\" another valid option \"auto\". table.align horizontal alignment table container. default, \"center\". options \"left\" \"right\". automatically set table.margin.left table.margin.right appropriate values. table.margin.left, table.margin.right size margins left right table within container. Can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. Using table.margin.left table.margin.right overwrite values set table.align. table.background.color, heading.background.color, column_labels.background.color, row_group.background.color, stub.background.color, summary_row.background.color, grand_summary_row.background.color, footnotes.background.color, source_notes.background.color Background colors parent element table following child elements: heading, column_labels, row_group, stub, summary_row, grand_summary_row, footnotes, source_notes. color name hexadecimal color code provided. table.additional_css option can used supply additional block CSS rules applied automatically generated table CSS. table.font.names names fonts used table. vector several font names. first font available, next font tried (). table.font.size, heading.title.font.size, heading.subtitle.font.size, column_labels.font.size, row_group.font.size, stub.font.size, footnotes.font.size, source_notes.font.size font sizes parent text element table following child elements: heading.title, heading.subtitle, column_labels, row_group, footnotes, source_notes. Can specified single-length character vector units pixels (e.g., 12px) percentage (e.g., 80\\%). provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percentage units. table.font.weight, heading.title.font.weight, heading.subtitle.font.weight, column_labels.font.weight, row_group.font.weight, stub.font.weight font weights table, heading.title, heading.subtitle, column_labels, row_group, stub text elements. Can text-based keyword \"normal\", \"bold\", \"lighter\", \"bolder\", , numeric value 1 1000, inclusive. Note variable fonts may support numeric mapping weight. table.font.style font style table. Can one either \"normal\", \"italic\", \"oblique\". table.font.color, table.font.color.light text color used throughout table. two variants: table.font.color text overlaid lighter background colors, table.font.color.light automatically used text needs overlaid darker background colors. color name hexadecimal color code provided. table.border.top.style, table.border.top.width, table.border.top.color, table.border.right.style, table.border.right.width, table.border.right.color, table.border.bottom.style, table.border.bottom.width, table.border.bottom.color, table.border.left.style, table.border.left.width, table.border.left.color style, width, color properties table's absolute top absolute bottom borders. heading.align Controls horizontal alignment heading title subtitle. can either use \"center\", \"left\", \"right\". heading.padding, column_labels.padding, data_row.padding, row_group.padding, summary_row.padding, grand_summary_row.padding, footnotes.padding, source_notes.padding amount vertical padding incorporate heading (title subtitle), column_labels (includes column spanners), row group labels (row_group.padding), body/stub rows (data_row.padding), summary rows (summary_row.padding grand_summary_row.padding), footnotes source notes (footnotes.padding source_notes.padding). heading.padding.horizontal, column_labels.padding.horizontal, data_row.padding.horizontal, row_group.padding.horizontal, summary_row.padding.horizontal, grand_summary_row.padding.horizontal, footnotes.padding.horizontal, source_notes.padding.horizontal amount horizontal padding incorporate heading (title subtitle), column_labels (includes column spanners), row group labels (row_group.padding.horizontal), body/stub rows (data_row.padding), summary rows (summary_row.padding.horizontal grand_summary_row.padding.horizontal), footnotes source notes (footnotes.padding.horizontal source_notes.padding.horizontal). heading.border.bottom.style, heading.border.bottom.width, heading.border.bottom.color style, width, color properties header's bottom border. border shares space column_labels location. width border larger, visible border. heading.border.lr.style, heading.border.lr.width, heading.border.lr.color style, width, color properties left right borders heading location. column_labels.text_transform, row_group.text_transform, stub.text_transform, summary_row.text_transform, grand_summary_row.text_transform Options apply text transformations column_labels, row_group, stub, summary_row, grand_summary_row text elements. Either \"uppercase\", \"lowercase\", \"capitalize\" keywords can used. column_labels.vlines.style, column_labels.vlines.width, column_labels.vlines.color style, width, color properties vertical lines ('vlines') column_labels. column_labels.border.top.style, column_labels.border.top.width, column_labels.border.top.color style, width, color properties top border column_labels location. border shares space heading location. width border larger, visible border. column_labels.border.bottom.style, column_labels.border.bottom.width, column_labels.border.bottom.color style, width, color properties bottom border column_labels location. column_labels.border.lr.style, column_labels.border.lr.width, column_labels.border.lr.color style, width, color properties left right borders column_labels location. column_labels.hidden option hide column labels. providing TRUE entire column_labels location seen table header (present) collapse downward. row_group.border.top.style, row_group.border.top.width, row_group.border.top.color, row_group.border.bottom.style, row_group.border.bottom.width, row_group.border.bottom.color, row_group.border.left.style, row_group.border.left.width, row_group.border.left.color, row_group.border.right.style, row_group.border.right.width, row_group.border.right.color style, width, color properties top, bottom, left, right borders row_group location. row_group.default_label option set default row group label rows formally placed row group named group call tab_row_group(). set NA_character rows placed row group (one row groups already exist), rows automatically placed row group without label. row_group.as_column row groups structured? default, separate rows lie groups. Setting TRUE structure row group labels columns far left table. table_body.hlines.style, table_body.hlines.width, table_body.hlines.color, table_body.vlines.style, table_body.vlines.width, table_body.vlines.color style, width, color properties horizontal lines ('hlines') vertical lines ('vlines') table_body. table_body.border.top.style, table_body.border.top.width, table_body.border.top.color, table_body.border.bottom.style, table_body.border.bottom.width, table_body.border.bottom.color style, width, color properties top bottom borders table_body location. stub.border.style, stub.border.width, stub.border.color style, width, color properties vertical border table stub. stub.indent_length width indentation level. default \"5px\". stub_row_group.font.size, stub_row_group.font.weight, stub_row_group.text_transform, stub_row_group.border.style, stub_row_group.border.width, stub_row_group.border.color Options row group column stub (made possible using row_group.as_column = TRUE). defaults options mirror stub.* variants (except stub_row_group.border.width, \"1px\" instead \"2px\"). summary_row.border.style, summary_row.border.width, summary_row.border.color style, width, color properties horizontal borders summary_row location. grand_summary_row.border.style, grand_summary_row.border.width, grand_summary_row.border.color style, width, color properties top borders grand_summary_row location. footnotes.border.bottom.style, footnotes.border.bottom.width, footnotes.border.bottom.color style, width, color properties bottom border footnotes location. footnotes.border.lr.style, footnotes.border.lr.width, footnotes.border.lr.color style, width, color properties left right borders footnotes location. footnotes.marks set sequential marks used reference identify footnotes (input opt_footnote_marks() function. can supply vector represents series footnote marks. vector recycled usage goes beyond length set. cycle, marks simply combined (e.g., * -> ** -> ***). option exists providing keywords certain types footnote marks. keyword \"numbers\" (default, indicating want use numeric marks). can use lowercase \"letters\" uppercase \"LETTERS\". option using traditional symbol set \"standard\" provides four symbols, , \"extended\" adds two symbols, making six. footnotes.multiline, source_notes.multiline option either put footnotes source notes separate lines (default, TRUE) render continuous line text footnotes.sep providing separator (default \" \") notes. footnotes.sep, source_notes.sep separating characters adjacent footnotes source notes respective footer sections rendered continuous line text (footnotes.multiline == FALSE). default value single space character (\" \"). source_notes.border.bottom.style, source_notes.border.bottom.width, source_notes.border.bottom.color style, width, color properties bottom border source_notes location. source_notes.border.lr.style, source_notes.border.lr.width, source_notes.border.lr.color style, width, color properties left right borders source_notes location. row.striping.background_color background color striped table body rows. color name hexadecimal color code provided. row.striping.include_stub option whether include stub striping rows. row.striping.include_table_body option whether include table body striping rows. page.orientation RTF output, provides two options page orientation: \"portrait\" (default) \"landscape\". page.numbering Within RTF output, page numbering displayed? default, set FALSE TRUE page numbering text added document header. page.header.use_tbl_headings TRUE RTF output tables migrate table headings (including table title column labels) page header. page header content repeat across pages. default, FALSE. page.footer.use_tbl_notes TRUE RTF output tables migrate table footer content (includes footnotes source notes) page footer. page footer content repeat across pages. default, FALSE. page.width, page.height page width height standard portrait orientation. RTF table output default values (inches) 8.5in 11.0in. page.margin.left, page.margin.right, page.margin.top, page.margin.bottom RTF table output, options correspond left, right, top, bottom page margins. default values 1.0in. page.header.height, page.footer.height heights page header footer RTF table outputs. Default values 0.5in.","code":""},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the table output options — tab_options","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify the table output options — tab_options","text":"Use exibble create gt table main parts added. can use gt object going forward demo available tab_options() function.    Modify table width 100% (spans entire content width area).    Modify table's background color \"lightcyan\".    Use letters marks footnote references. Also, separate footnotes footer spaces instead newlines.    Change padding data rows 5 px.    Reduce size title subtitle text.","code":"tab_1 <-   exibble %>%   dplyr::select(-c(fctr, date, time, datetime)) %>%   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) %>%   tab_header(     title = md(\"Data listing from **exibble**\"),     subtitle = md(\"`exibble` is an R dataset\")   ) %>%   fmt_number(columns = num) %>%   fmt_currency(columns = currency) %>%   tab_footnote(     footnote = \"Using commas for separators.\",     locations = cells_body(       columns = num,       rows = num > 1000     )   ) %>%   tab_footnote(     footnote = \"Using commas for separators.\",     locations = cells_body(       columns = currency,       rows = currency > 1000     )   ) %>%   tab_footnote(     footnote = \"Alphabetical fruit.\",     locations = cells_column_labels(columns = char)   )  tab_1 tab_1 %>% tab_options(table.width = pct(100)) tab_1 %>% tab_options(table.background.color = \"lightcyan\") tab_1 %>%   tab_options(     footnotes.marks = letters,     footnotes.multiline = FALSE   ) tab_1 %>%   tab_options(     data_row.padding = px(5)   ) tab_1 %>%   tab_options(     heading.title.font.size = \"small\",     heading.subtitle.font.size = \"small\"   )"},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Modify the table output options — tab_options","text":"2-10","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a row group to a gt table — tab_row_group","title":"Add a row group to a gt table — tab_row_group","text":"Create row group collection rows. requires specification rows included, either supplying row labels, row indices, use select helper function like starts_with(). modify order row groups, use row_group_order() function. set default row group label rows formally placed row group, can use separate call tab_options(row_group.default_label = <label>). done rows placed row group (one row groups already exist), rows automatically placed row group without label. restore labels row groups explicitly assigned group, tab_options(row_group.default_label = \"\") can used.","code":""},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a row group to a gt table — tab_row_group","text":"","code":"tab_row_group(data, label, rows, id = label, others_label = NULL, group = NULL)"},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a row group to a gt table — tab_row_group","text":"data table object created using gt() function. label text use row group label. rows rows made components row group. Can either vector row captions provided c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), everything(). id ID row group. accessing row group cells_row_groups() (using tab_style() tab_footnote()) id value used reference (label). id explicitly provided , taken label value. advisable set explicit id value plan access cell later function call label text complicated (e.g., contains markup, lengthy, ). Finally, providing id value must ensure unique across ID values set row groups (function stop id unique). others_label argument deprecated. Instead use tab_options(row_group.default_label = <label>). group argument deprecated. Instead use label.","code":""},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a row group to a gt table — tab_row_group","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a row group to a gt table — tab_row_group","text":"Use gtcars create gt table use tab_row_group() add two row groups labels: numbered NA. row group NA label ends rendered without label .    Use gtcars create gt table. Add two row groups labels powerful super powerful. distinction groups whether hp lesser greater 600 (governed expressions provided rows argument).","code":"gtcars %>%   dplyr::select(model, year, hp, trq) %>%   dplyr::slice(1:8) %>%   gt(rowname_col = \"model\") %>%   tab_row_group(     label = \"numbered\",     rows = matches(\"^[0-9]\")   ) gtcars %>%   dplyr::select(model, year, hp, trq) %>%   dplyr::slice(1:8) %>%   gt(rowname_col = \"model\") %>%   tab_row_group(     label = \"powerful\",     rows = hp <= 600   ) %>%   tab_row_group(     label = \"super powerful\",     rows = hp > 600   )"},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a row group to a gt table — tab_row_group","text":"2-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a source note citation — tab_source_note","title":"Add a source note citation — tab_source_note","text":"Add source note footer part gt table. source note useful citing data included table. Several can added footer, simply use multiple calls tab_source_note() inserted order provided. can use Markdown formatting note, , table intended HTML output, can include HTML formatting.","code":""},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a source note citation — tab_source_note","text":"","code":"tab_source_note(data, source_note)"},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a source note citation — tab_source_note","text":"data table object created using gt() function. source_note Text used source note. can optionally use md() html() functions style text Markdown retain HTML elements text.","code":""},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a source note citation — tab_source_note","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a source note citation — tab_source_note","text":"Use gtcars create gt table. Use tab_source_note() add source note table footer cites data source.","code":"gtcars %>%   dplyr::select(mfr, model, msrp) %>%   dplyr::slice(1:5) %>%   gt() %>%   tab_source_note(source_note = \"From edmunds.com\")"},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a source note citation — tab_source_note","text":"2-8","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a spanner column label — tab_spanner","title":"Add a spanner column label — tab_spanner","text":"Set spanner column label mapping columns already table. label placed one column labels, spanning width columns column labels.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a spanner column label — tab_spanner","text":"","code":"tab_spanner(   data,   label,   columns = NULL,   spanners = NULL,   level = NULL,   id = label,   gather = TRUE,   replace = FALSE )"},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a spanner column label — tab_spanner","text":"data table object created using gt() function. label text use spanner column label. columns columns components spanner heading. spanners spanners spanned , already defined. level explicit level spanner placed. provided, gt choose level based inputs provided within columns spanners, placing spanner label fit. first spanner level (right column labels) 1. id ID spanner column label. accessing spanner column label cells_column_spanners() (using tab_style() tab_footnote()) id value used reference (label). id explicitly provided , taken label value. advisable set explicit id value plan access cell later function call label text complicated (e.g., contains markup, lengthy, ). Finally, providing id value must ensure unique across ID values set column spanner labels (function stop id unique). gather option move specified columns unified spanner column label. Ordering moved--place columns preserved cases. default, set TRUE. replace new spanners allowed partially fully replace existing spanners? (possibility setting spanners already populated level.) default, set FALSE error occur replacement attempted.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a spanner column label — tab_spanner","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a spanner column label — tab_spanner","text":"Use gtcars create gt table. Use tab_spanner() function effectively group several columns related car performance spanner column label \"performance\".","code":"gtcars %>%   dplyr::select(     -mfr, -trim, bdy_style, drivetrain,     -drivetrain, -trsmn, -ctry_origin   ) %>%   dplyr::slice(1:8) %>%   gt(rowname_col = \"model\") %>%   tab_spanner(     label = \"performance\",     columns = c(       hp, hp_rpm, trq, trq_rpm,       mpg_c, mpg_h     )   )"},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a spanner column label — tab_spanner","text":"2-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create column labels and spanners via delimited names — tab_spanner_delim","title":"Create column labels and spanners via delimited names — tab_spanner_delim","text":"function split selected delimited column names first components (LHS) promoted spanner column labels, secondary components (RHS) become column labels. Please note reference individual columns must continue column names input table data (unique necessity).","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create column labels and spanners via delimited names — tab_spanner_delim","text":"","code":"tab_spanner_delim(   data,   delim,   columns = everything(),   split = c(\"last\", \"first\") )"},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create column labels and spanners via delimited names — tab_spanner_delim","text":"data table object created using gt() function. delim delimiter use split input column name. delimiter supplied autoescaped internal splitting procedure. first component split become spanner column label (ID value, used styling addition footnotes locations) second component column label. columns optional vector column names operation limited . default consider columns table. split delimiter splitting occur \"last\" instance delim character \"first\"? default, column name splitting begins last instance delimiter.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create column labels and spanners via delimited names — tab_spanner_delim","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create column labels and spanners via delimited names — tab_spanner_delim","text":"look column names iris dataset example tab_spanner_delim() might useful, find names Sepal.Length, Sepal.Width, Petal.Length, Petal.Width. naming system, easy see Sepal Petal can group together repeated common Length Width values. datasets, can avoid lengthy relabeling cols_label() column names can fashioned beforehand contain spanner column label column label. additional advantage column names input table data remain unique even though may eventually repeated column labels rendered output table).","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create column labels and spanners via delimited names — tab_spanner_delim","text":"Use iris create gt table use tab_spanner_delim() function automatically generate column spanner labels. splits columns dot-separated column spanner labels (first part) column labels (second part).","code":"iris %>%   dplyr::group_by(Species) %>%   dplyr::slice(1:4) %>%   gt() %>%   tab_spanner_delim(delim = \".\")"},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Create column labels and spanners via delimited names — tab_spanner_delim","text":"2-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":null,"dir":"Reference","previous_headings":"","what":"Control indentation of row labels in the stub — tab_stub_indent","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"Indentation row labels effective way establishing structure table stub. tab_stub_indent() function allows fine control row label indentation either explicit definition indentation level, , way indentation directive using keywords.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"","code":"tab_stub_indent(data, rows, indent = \"increase\")"},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"data table object created using gt() function. rows rows consider indentation change. Can either vector row captions provided c(), vector row indices, helper function focused selections. select helper functions : starts_with(), ends_with(), contains(), matches(), one_of(), everything(). indent indentation directive either keyword describing indentation change explicit integer value directly setting indentation level. keyword \"increase\" (default) increase indentation level one; \"decrease\" reverse direction. starting indentation level 0 means indentation values serves lower bound. upper bound indentation level 5.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"Use pizzaplace create gt table. tab_stub_indent() can add indentation targeted row labels stub. target different pizza sizes avoid selecting repeating \"Sizes\" row label.","code":"dplyr::bind_rows(   pizzaplace %>%     dplyr::group_by(type, size) %>%     dplyr::summarize(       sold = n(),       income = sum(price),       .groups = \"drop_last\"     ) %>%     dplyr::summarize(       sold = sum(sold),       income = sum(income),       size = \"All Sizes\",       .groups = \"drop\"     ),   pizzaplace %>%     dplyr::group_by(type, size) %>%     dplyr::summarize(       sold = n(),       income = sum(price),       .groups = \"drop\"     ) ) %>%   gt(rowname_col = \"size\", groupname_col = \"type\") %>%   tab_header(title = \"Pizzas Sold in 2015\") %>%   fmt_number(     columns = sold,     decimals = 0,     use_seps = TRUE   ) %>%   fmt_currency(     columns = income,     currency = \"USD\"   ) %>%   tab_options(     summary_row.background.color = \"#ACEACE\",     row_group.background.color = \"#FFEFDB\",     row_group.as_column = TRUE   ) %>%   tab_stub_indent(     rows = matches(\"^L|^M|^S|^XL|^XXL\"),     indent = 2   ) %>%   tab_style(     style = cell_fill(color = \"gray95\"),     locations = list(       cells_body(rows = matches(\"^All\")),       cells_stub(rows = matches(\"^All\"))     )   )"},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"2-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":null,"dir":"Reference","previous_headings":"","what":"Add label text to the stubhead — tab_stubhead","title":"Add label text to the stubhead — tab_stubhead","text":"Add label stubhead gt table. stubhead lone element positioned left column labels, stub. stub exist, stubhead (change made using function case). flexibility use Markdown formatting stubhead label. Furthermore, table intended HTML output, can use HTML stubhead label.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add label text to the stubhead — tab_stubhead","text":"","code":"tab_stubhead(data, label)"},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add label text to the stubhead — tab_stubhead","text":"data table object created using gt() function. label text used stubhead label can optionally use md() html() functions style text Markdown retain HTML elements text.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add label text to the stubhead — tab_stubhead","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add label text to the stubhead — tab_stubhead","text":"Use gtcars create gt table. tab_stubhead() can add stubhead label. appears top-left can used describe stub.","code":"gtcars %>%   dplyr::select(model, year, hp, trq) %>%   dplyr::slice(1:5) %>%   gt(rowname_col = \"model\") %>%   tab_stubhead(label = \"car\")"},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add label text to the stubhead — tab_stubhead","text":"2-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Add custom styles to one or more cells — tab_style","title":"Add custom styles to one or more cells — tab_style","text":"tab_style() function can target specific cells apply styles . best done conjunction helper functions cell_text(), cell_fill(), cell_borders(). present function focused application styles HTML output (, output formats ignore tab_style() calls). Using aforementioned helper functions, styles can apply: background color cell (cell_fill(): color) cell's text color, font, size (cell_text(): color, font, size) text style (cell_text(): style), enabling use italics oblique text. text weight (cell_text(): weight), allowing use thin bold text (degree choice greater variable fonts) alignment indentation text (cell_text(): align indent) cell borders (cell_borders())","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add custom styles to one or more cells — tab_style","text":"","code":"tab_style(data, style, locations)"},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add custom styles to one or more cells — tab_style","text":"data table object created using gt() function. style vector styles use. cell_text(), cell_fill(), cell_borders() helper functions can used easily generate valid styles.  using one helper function define styles, calls must enclosed list(). Custom CSS declarations can used HTML output including css()-based statement list item. locations cell set cells associated style. Supplying cells_*() helper functions useful way target location cells associated styling. helper functions : cells_title(), cells_stubhead(), cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body(), cells_summary(), cells_grand_summary(), cells_stub_summary(), cells_stub_grand_summary(), cells_footnotes(), cells_source_notes(). Additionally, can enclose several cells_*() calls within list() wish apply styling different types locations (e.g., body cells, row group labels, table title, etc.).","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add custom styles to one or more cells — tab_style","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add custom styles to one or more cells — tab_style","text":"Use exibble create gt table. Add styles applied data cells satisfy condition (using tab_style()).    Use sp500 create gt table. Color entire rows cells based values particular column.    Use exibble create gt table. Replace missing values sub_missing() function add styling char column cell_fill() CSS style declaration.","code":"exibble %>%   dplyr::select(num, currency) %>%   gt() %>%   fmt_number(     columns = c(num, currency),     decimals = 1   ) %>%   tab_style(     style = list(       cell_fill(color = \"lightcyan\"),       cell_text(weight = \"bold\")       ),     locations = cells_body(       columns = num,       rows = num >= 5000     )   ) %>%   tab_style(     style = list(       cell_fill(color = \"#F9E3D6\"),       cell_text(style = \"italic\")       ),     locations = cells_body(       columns = currency,       rows = currency < 100     )   ) sp500 %>%   dplyr::filter(     date >= \"2015-12-01\" &     date <= \"2015-12-15\"   ) %>%   dplyr::select(-c(adj_close, volume)) %>%   gt() %>%   tab_style(     style = cell_fill(color = \"lightgreen\"),     locations = cells_body(rows = close > open)   ) %>%   tab_style(     style = list(       cell_fill(color = \"red\"),       cell_text(color = \"white\")       ),     locations = cells_body(rows = open > close)   ) exibble %>%   dplyr::select(char, fctr) %>%   gt() %>%   sub_missing() %>%   tab_style(     style = list(       cell_fill(color = \"lightcyan\"),       \"font-variant: small-caps;\"     ),     locations = cells_body(columns = char)   )"},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add custom styles to one or more cells — tab_style","text":"2-9","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/test_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a path to a test image — test_image","title":"Generate a path to a test image — test_image","text":"Two test images available within gt package. contain imagery (sized 200px 200px) one PNG file SVG file. function useful paired local_image() since test various sizes test image within function.","code":""},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a path to a test image — test_image","text":"","code":"test_image(type = c(\"png\", \"svg\"))"},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a path to a test image — test_image","text":"type type image, can either png (default) svg.","code":""},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a path to a test image — test_image","text":"character vector single path image file.","code":""},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Generate a path to a test image — test_image","text":"8-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform targeted text transformation with a function — text_transform","title":"Perform targeted text transformation with a function — text_transform","text":"Perform targeted text transformation function","code":""},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform targeted text transformation with a function — text_transform","text":"","code":"text_transform(data, locations, fn)"},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform targeted text transformation with a function — text_transform","text":"data table object created using gt() function. locations cell set cells associated text transformation. cells_body(), cells_stub(), cells_column_labels(), cells_row_groups() helper functions can used . can enclose several calls within list() wish make transformation happen different locations. fn function use text transformation.","code":""},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform targeted text transformation with a function — text_transform","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform targeted text transformation with a function — text_transform","text":"Use exibble create gt table. transform formatted text num column using function supplied text_transform() (via fn argument). Note x fn = function (x) part formatted vector column values num column.","code":"exibble %>%   dplyr::select(num, char, currency) %>%   dplyr::slice(1:4) %>%   gt() %>%   fmt_number(columns = num) %>%   fmt_currency(columns = currency) %>%   text_transform(     locations = cells_body(columns = num),     fn = function(x) {       paste0(         x, \" (\",         dplyr::case_when(           x > 20   ~ \"large\",           x <= 20  ~ \"small\"),         \")\")     }   )"},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform targeted text transformation with a function — text_transform","text":"3-21","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as values in terms of bytes — vec_fmt_bytes","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"numeric values vector, can transform byte values human readable units. vec_fmt_bytes() function allows formatting byte sizes either two common representations: (1) decimal units (powers 1000, examples \"kB\" \"MB\"), (2) binary units (powers 1024, examples \"KiB\" \"MiB\"). assumed input numeric values represent number bytes automatic truncation values occur. numeric values scaled range 1 <1000 decorated correct unit symbol according standard chosen. control formatting byte sizes, can use following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"","code":"vec_fmt_bytes(   x,   standard = c(\"decimal\", \"binary\"),   decimals = 1,   n_sigfig = NULL,   drop_trailing_zeros = TRUE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = TRUE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"x numeric vector. standard way express large byte sizes. decimals option specify exact number decimal places use. default number decimal places 1. n_sigfig option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive numbers (effectively showing sign numbers except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. incl_space option whether include space value units. default TRUE uses space character separation. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"create numeric vector next examples:   Using vec_fmt_bytes() default options create character vector values bytes. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can change number decimal places decimals option:     formatting different locale, supply locale ID gt handle locale-specific formatting options:     need positive negative signs output values, use force_sign = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(3.24294e14, 8, 1362902, -59027, NA) vec_fmt_bytes(num_vals) #> [1] \"324.3 TB\" \"8 B\" \"1.4 MB\" \"-59 kB\" \"NA\" vec_fmt_bytes(num_vals, decimals = 2) #> [1] \"324.29 TB\" \"8 B\" \"1.36 MB\" \"-59.03 kB\" \"NA\" vec_fmt_bytes(num_vals, locale = \"fi\") #> [1] \"324,3 TB\" \"8 B\" \"1,4 MB\" \"-59 kB\" \"NA\" vec_fmt_bytes(num_vals, force_sign = TRUE) #> [1] \"+324.3 TB\" \"+8 B\" \"+1.4 MB\" \"-59 kB\" \"NA\" vec_fmt_bytes(num_vals, pattern = \"[{x}]\") #> [1] \"[324.3 TB]\" \"[8 B]\" \"[1.4 MB]\" \"[-59 kB]\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"14-10","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as currency values — vec_fmt_currency","title":"Format a vector as currency values — vec_fmt_currency","text":"numeric values vector, can perform currency-based formatting. function supports automatic formatting three-letter numeric currency code. can also specify custom currency formatted according output context currency() helper function. fine control conversion numeric values currency values, take advantage following options: currency: providing currency code common currency name procure correct currency symbol number currency subunits; also use currency() helper function specify custom currency currency symbol placement: currency symbol can placed values decimals/subunits: choice number decimal places, choice decimal symbol, option whether include exclude currency subunits (decimal portion) negative values: choice negative sign parentheses values less zero digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted currency values locale-based formatting: providing locale ID result currency formatting specific chosen locale can use info_currencies() function useful reference possible inputs currency argument.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as currency values — vec_fmt_currency","text":"","code":"vec_fmt_currency(   x,   currency = \"USD\",   use_subunits = TRUE,   decimals = NULL,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   placement = \"left\",   incl_space = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as currency values — vec_fmt_currency","text":"x numeric vector. currency currency use numeric value. input can supplied 3-letter currency code (e.g., \"USD\" U.S. Dollars, \"EUR\" Euro currency). Use info_currencies() get information table valid currency codes examples . Alternatively, can provide common currency name (e.g., \"dollar\", \"pound\", \"yen\", etc.) simplify process. Use info_currencies() type == \"symbol\" option view information table supported currency symbol names along examples. can also use currency() helper function specify custom currency, string vary across output contexts. example, using currency(html = \"&fnof;\", default = \"f\") give us suitable glyph Dutch guilder HTML output table, simply letter \"f\" output contexts). Please note decimals default 2 using currency() helper function. nothing provided currency \"USD\" (U.S. dollars) used. use_subunits option whether subunits portion currency value displayed. default, TRUE. decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. value ignored using suffixing options (.e., suffixing set FALSE). suffixing option scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can also specify symbols use value ranges using character vector preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\")). Including NA values vector ensure particular range either included transformation (e.g, c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. placement placement currency symbol. can either left (default) right. incl_space option whether include space value currency symbol. default introduce space character. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as currency values — vec_fmt_currency","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as currency values — vec_fmt_currency","text":"create numeric vector next examples:   Using vec_fmt_currency() default options create character vector numeric values transformed U.S. Dollars (\"USD\"). Furthermore, rendering context autodetected unless specified output argument (, \"plain\" output type).     can supply currency code currency argument. use British Pounds currency = \"GBP\":     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     many options formatting values. Perhaps need explicit positive negative signs? Use force_sign = TRUE .     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(5.2, 8.65, 0, -5.3, NA) vec_fmt_currency(num_vals) #> [1] \"$5.20\" \"$8.65\" \"$0.00\" \"-$5.30\" \"NA\" vec_fmt_currency(num_vals, currency = \"GBP\") #> [1] \"GBP5.20\" \"GBP8.65\" \"GBP0.00\" \"-GBP5.30\" \"NA\" vec_fmt_currency(num_vals, currency = \"EUR\", locale = \"fr\") #> [1] \"EUR5,20\" \"EUR8,65\" \"EUR0,00\" \"-EUR5,30\" \"NA\" vec_fmt_currency(num_vals, force_sign = TRUE) #> [1] \"+$5.20\" \"+$8.65\" \"$0.00\" \"-$5.30\" \"NA\" vec_fmt_currency(num_vals, pattern = \"`{x}`\") #> [1] \"`$5.20`\" \"`$8.65`\" \"`$0.00`\" \"`-$5.30`\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as currency values — vec_fmt_currency","text":"14-8","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as date values — vec_fmt_date","title":"Format a vector as date values — vec_fmt_date","text":"Format vector values date values using one 41 preset date styles. Input can form POSIXt (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as date values — vec_fmt_date","text":"","code":"vec_fmt_date(   x,   date_style = \"iso\",   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as date values — vec_fmt_date","text":"x numeric vector. date_style date style use. default \"iso\" corresponds ISO 8601 date formatting. date styles can viewed using info_date_style(). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as date values — vec_fmt_date","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format a vector as date values — vec_fmt_date","text":"need supply preset date style date_style argument. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can use info_date_style() within console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as date values — vec_fmt_date","text":"create character vector dates ISO-8601 format next examples:   Using vec_fmt_date() (\"wday_month_day_year\" date style) result character vector formatted dates. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can choose 41 different date formatting styles. Many styles flexible, meaning structure format adapt different locales. use \"yMMMEd\" date style demonstrate (first default locale \"en\"):     perform type formatting French (\"fr\") locale:     can always use info_date_style() call info table serves handy reference date_style options. last example, one can wrap date values pattern pattern argument. Note NA values pattern applied.","code":"str_vals <- c(\"2022-06-13\", \"2019-01-25\", \"2015-03-23\", NA) vec_fmt_date(str_vals, date_style = \"wday_month_day_year\") #> [1] \"Monday, June 13, 2022\" \"Friday, January 25, 2019\" #> [3] \"Monday, March 23, 2015\" NA vec_fmt_date(str_vals, date_style = \"yMMMEd\") #> [1] \"Mon, Jun 13, 2022\" \"Fri, Jan 25, 2019\" \"Mon, Mar 23, 2015\" NA vec_fmt_date(str_vals, date_style = \"yMMMEd\", locale = \"fr\") #> [1] \"lun. 13 juin 2022\" \"ven. 25 janv. 2019\" \"lun. 23 mars 2015\" NA vec_fmt_date(str_vals, pattern = \"Date: {x}\") #> [1] \"Date: 2022-06-13\" \"Date: 2019-01-25\" \"Date: 2015-03-23\" NA"},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as date values — vec_fmt_date","text":"14-11","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as datetime values — vec_fmt_datetime","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Format values vector datetime values using either presets date time components formatting directive (can either use CLDR datetime pattern strptime formatting). Input can form POSIXt (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as datetime values — vec_fmt_datetime","text":"","code":"vec_fmt_datetime(   x,   date_style = \"iso\",   time_style = \"iso\",   sep = \" \",   format = NULL,   tz = NULL,   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as datetime values — vec_fmt_datetime","text":"x numeric vector. date_style date style use. default \"iso\" corresponds ISO 8601 date formatting. date styles can viewed using info_date_style(). time_style time style use. default \"iso\" corresponds times formatted within ISO 8601 datetime values. time styles can viewed using info_time_style(). sep separator string use date time components. default, single space character (\" \"). used specifying format code. format optional format code used generating custom dates/times. used arguments governing preset styles (date_style time_style) ignored favor formatting via format string. tz time zone printing dates/times (.e., output). default NULL preserve time zone input data output. providing time zone, must one recognized user's operating system (vector valid tz values can produced OlsonNames()). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as datetime values — vec_fmt_datetime","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format a vector as datetime values — vec_fmt_datetime","text":"can supply preset date style date_style argument separately handle date portion output. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can use info_date_style() within console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format a vector as datetime values — vec_fmt_datetime","text":"can supply preset time style time_style argument separately handle time portion output. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. flexible formats (begin \"E\") include day week. Keep mind pairing time_style values date_style avoid redundant repeating information. can use info_time_style() within console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-a-cldr-datetime-pattern","dir":"Reference","previous_headings":"","what":"Formatting with a CLDR datetime pattern","title":"Format a vector as datetime values — vec_fmt_datetime","text":"can use CLDR datetime pattern format argument create highly customized locale-aware output. character string consists two types elements: Pattern fields, repeat specific pattern character one times. fields replaced date time data formatting. character sets -Z -z reserved use pattern characters. Literal text, output verbatim formatting. can include: characters outside reserved character sets, including spaces punctuation. text single vertical quotes (e.g., 'text'). Two adjacent single vertical quotes (''), represent literal single quote, either inside outside quoted text. number pattern fields quite sizable first look CLDR datetime patterns work. use datetime string \"2018-07-04T22:05:09.2358(America/Vancouver)\" examples follow. \"mm/dd/y\" -> \"05/04/2018\" \"EEEE, MMMM d, y\" -> \"Wednesday, July 4, 2018\" \"MMM d E\" -> \"Jul 4 Wed\" \"HH:mm\" -> \"22:05\" \"h:mm \" -> \"10:05 PM\" \"EEEE, MMMM d, y '' h:mm \" -> \"Wednesday, July 4, 2018 10:05 PM\" individual pattern fields:","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"calendar-year","dir":"Reference","previous_headings":"","what":"Calendar Year","title":"Format a vector as datetime values — vec_fmt_datetime","text":"yields calendar year, always numeric. cases length \"y\" field specifies minimum number digits display, zero-padded necessary. digits displayed needed show full year. exception: \"yy\" gives use just two low-order digits year, zero-padded necessary. use cases, \"y\" \"yy\" good enough.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"year-in-the-week-in-year-calendar","dir":"Reference","previous_headings":"","what":"Year in the Week in Year Calendar","title":"Format a vector as datetime values — vec_fmt_datetime","text":"year 'Week Year' based calendars year transition occurs week boundary. may differ calendar year \"y\" near year transition. numeric year designation used conjunction pattern character \"w\" ISO year-week calendar defined ISO 8601.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"am-pm-period-of-day-plus-noon-and-midnight","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day Plus Noon and Midnight","title":"Format a vector as datetime values — vec_fmt_datetime","text":"() input_midnight: \"2020-05-05T00:00:00\" (b) input_noon: \"2020-05-05T12:00:00\"","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"flexible-day-periods","dir":"Reference","previous_headings":"","what":"Flexible Day Periods","title":"Format a vector as datetime values — vec_fmt_datetime","text":"() input_morning: \"2020-05-05T00:08:30\" (b) input_afternoon: \"2020-05-05T14:00:00\"","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour-","dir":"Reference","previous_headings":"","what":"Hour 1-12","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour--1","dir":"Reference","previous_headings":"","what":"Hour 0-23","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour--2","dir":"Reference","previous_headings":"","what":"Hour 0-11","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour--3","dir":"Reference","previous_headings":"","what":"Hour 1-24","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Using: \"2015-08-01T08:35:09\"","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"milliseconds-elapsed-in-day","dir":"Reference","previous_headings":"","what":"Milliseconds Elapsed in Day","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Using: \"2011-07-27T00:07:19.7223\"","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"the-era-designator","dir":"Reference","previous_headings":"","what":"The Era Designator","title":"Format a vector as datetime values — vec_fmt_datetime","text":"provides era name given date.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-a-strptime-format-code","dir":"Reference","previous_headings":"","what":"Formatting with a strptime format code","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Performing custom date/time formatting format argument can also occur strptime format code. works constructing string individual format codes representing formatted date time elements. indicated leading %, literal characters interpreted characters starting % character. First , look format code combinations work well together strptime format. give us intuition generally work. use datetime \"2015-06-08 23:05:37.48\" examples follow. \"%m/%d/%Y\" -> \"06/08/2015\" \"%, %B %e, %Y\" -> \"Monday, June 8, 2015\" \"%b %e %\" -> \"Jun 8 Mon\" \"%H:%M\" -> \"23:05\" \"%:%M %p\" -> \"11:05 pm\" \"%, %B %e, %Y %:%M %p\" -> \"Monday, June 8, 2015 11:05 pm\" individual format codes date components: \"%\" -> \"Mon\" (abbreviated day week name) \"%\" -> \"Monday\" (full day week name) \"%w\" -> \"1\" (day week number 0..6; Sunday 0) \"%u\" -> \"1\" (day week number 1..7; Monday 1, Sunday 7) \"%y\" -> \"15\" (abbreviated year, using final two digits) \"%Y\" -> \"2015\" (full year) \"%b\" -> \"Jun\" (abbreviated month name) \"%B\" -> \"June\" (full month name) \"%m\" -> \"06\" (month number) \"%d\" -> \"08\" (day number, zero-padded) \"%e\" -> \"8\" (day number without zero padding) \"%j\" -> \"159\" (day year, always zero-padded) \"%W\" -> \"23\" (week number year, always zero-padded) \"%V\" -> \"24\" (week number year, following ISO 8601 standard) \"%C\" -> \"20\" (century number) individual format codes time components: \"%H\" -> \"23\" (24h hour) \"%\" -> \"11\" (12h hour) \"%M\" -> \"05\" (minute) \"%S\" -> \"37\" (second) \"%OS3\" -> \"37.480\" (seconds decimals; 3 decimal places ) %p -> \"pm\" (PM indicator) extra formats may find useful: \"%z\" -> \"+0000\" (signed time zone offset, using UTC) \"%F\" -> \"2015-06-08\" (date ISO 8601 date format) \"%%\" -> \"%\" (literal \"%\" character, case need )","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as datetime values — vec_fmt_datetime","text":"create character vector datetime values ISO-8601 format next examples:   Using vec_fmt_datetime() different date_style time_style options (, date_style = \"yMMMEd\" time_style = \"Hm\") result character vector formatted datetime values. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can choose 41 different date styles 25 time formatting styles. Many styles flexible, meaning structure format adapt different locales. use combination \"yMMMd\" \"hms\" date time styles demonstrate (first default locale \"en\"):     perform type formatting Italian (\"\") locale:     can always use info_date_style() info_time_style() call info tables serve handy references date_style time_style options. possible supply time formatting pattern within format argument. One way CLDR pattern, locale-aware:     using locale argument, can formatted Dutch datetime values:     also possible use strptime format code format (however, value provided locale ignored).     last example, one can wrap datetime values pattern pattern argument. Note NA values pattern applied.","code":"str_vals <- c(\"2022-06-13 18:36\", \"2019-01-25 01:08\", NA) vec_fmt_datetime(   str_vals,   date_style = \"yMMMEd\",   time_style = \"Hm\" ) #> [1] \"Mon, Jun 13, 2022 18:36\" \"Fri, Jan 25, 2019 01:08\" NA vec_fmt_datetime(   str_vals,   date_style = \"yMMMd\",   time_style = \"hms\" ) #> [1] \"Jun 13, 2022 6:36:00 PM\" \"Jan 25, 2019 1:08:00 AM\" NA vec_fmt_datetime(   str_vals,   date_style = \"yMMMd\",   time_style = \"hms\",   locale = \"it\" ) #> [1] \"13 giu 2022 6:36:00 PM\" \"25 gen 2019 1:08:00 AM\" NA vec_fmt_datetime(str_vals, format = \"EEEE, MMMM d, y, h:mm a\") #> [1] \"Monday, June 13, 2022, 06:36 PM\" #> [2] \"Friday, January 25, 2019, 01:08 AM\" #> [3] NA vec_fmt_datetime(   str_vals,   format = \"EEEE, MMMM d, y, h:mm a\",   locale = \"nl\" ) #> [1] \"maandag, juni 13, 2022, 6:36 p.m.\" #> [2] \"vrijdag, januari 25, 2019, 1:08 a.m.\" #> [3] NA vec_fmt_datetime(str_vals, format = \"%A, %B %e, %Y at %I:%M %p\") #> [1] \"Monday, June 13, 2022 at 06:36 pm\" #> [2] \"Friday, January 25, 2019 at 01:08 am\" #> [3] NA vec_fmt_datetime(   str_vals,   sep = \" at \",   pattern = \"Date and Time: {x}\" ) #> [1] \"Date and Time: 2022-06-13 at 18:36:00\" #> [2] \"Date and Time: 2019-01-25 at 01:08:00\" #> [3] NA"},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as datetime values — vec_fmt_datetime","text":"14-13","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"Format input values time duration values whether input values numbers difftime class. can specify time units numeric input values (weeks, days, hours, minutes, seconds) output can customized duration style (corresponding narrow, wide, colon-separated, ISO forms) choice output units ranging weeks seconds.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"","code":"vec_fmt_duration(   x,   input_units = NULL,   output_units = NULL,   duration_style = c(\"narrow\", \"wide\", \"colon-sep\", \"iso\"),   trim_zero_units = TRUE,   max_output_units = NULL,   pattern = \"{x}\",   use_seps = TRUE,   sep_mark = \",\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"x numeric vector. input_units one selected columns contains numeric values, keyword must provided input_units gt determine values interpreted terms duration. accepted units : \"seconds\", \"minutes\", \"hours\", \"days\", \"weeks\". output_units Controls output time units. default, NULL, means gt automatically choose time units based input duration value. control time units considered output (trimming trim_zero_units) can specify vector one following keywords: \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\". duration_style choice four formatting styles output duration values. \"narrow\" (default style), duration values formatted single letter time-part units (e.g., 1.35 days styled \"1d 8h 24m). \"wide\", example value expanded \"1 day 8 hours 24 minutes\" formatting. \"colon-sep\" style put days, hours, minutes, seconds \"([D]/)[HH]:[MM]:[SS]\" format. \"iso\" style produce value conforms ISO 8601 rules duration values (e.g., 1.35 days become \"P1DT8H24M\"). trim_zero_units Provides methods remove output time units zero values. default TRUE duration values might otherwise formatted \"0w 1d 0h 4m 19s\" trim_zero_units = FALSE instead displayed \"1d 4m 19s\". Aside using TRUE/FALSE provide vector keywords precise control. keywords : (1) \"leading\", omit leading zero-value time units (e.g., \"0w 1d\" -> \"1d\"), (2) \"trailing\", omit trailing zero-value time units (e.g., \"3d 5h 0s\" -> \"3d 5h\"), \"internal\", removes internal zero-value time units (e.g., \"5d 0h 33m\" -> \"5d 33m\"). max_output_units output_units NULL, output time units unspecified left gt handle, numeric value provided max_output_units taken maximum number time units display output time duration values. default, NULL possible time units displayed. option effect duration_style = \"colon-sep\" (output_units can used customize type duration output). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative value display minus sign. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"output-units-for-the-colon-separated-duration-style","dir":"Reference","previous_headings":"","what":"Output units for the colon-separated duration style","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"colon-separated duration style (enabled duration_style = \"colon-sep\") essentially clock-based output format uses display logic chronograph watch functionality. , default, display duration values (D/)HH:MM:SS format. duration values greater equal 24 hours number days prepended adjoining slash mark. output format versatile, can changed somewhat output_units option. following combinations output units permitted: c(\"minutes\", \"seconds\") -> MM:SS c(\"hours\", \"minutes\") -> HH:MM c(\"hours\", \"minutes\", \"seconds\") -> HH:MM:SS c(\"days\", \"hours\", \"minutes\") -> (D/)HH:MM specialized combinations result default set used, c(\"days\", \"hours\", \"minutes\", \"seconds\")","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"create difftime-based vector next examples:   Using vec_fmt_duration() defaults provides us succinct vector formatted durations.     can elect use just time units days describe duration values.     can also use numeric values input vector vec_fmt_duration(). numeric vector use examples:   necessary thing numeric values input defining time unit values .     can define set output time units want see.     many duration 'styles' choose . opt \"wide\" style.     can always perform locale-specific formatting vec_fmt_duration(). attempt type duration formatting \"nl\" locale.","code":"difftimes <-   difftime(     lubridate::ymd(\"2017-01-15\"),     lubridate::ymd(c(\"2015-06-25\", \"2016-03-07\", \"2017-01-10\"))   ) vec_fmt_duration(difftimes) #> [1] \"81w 3d\" \"44w 6d\" \"5d\" vec_fmt_duration(difftimes, output_units = \"days\") #> [1] \"570d\" \"314d\" \"5d\" num_vals <- c(3.235, 0.23, 0.005, NA) vec_fmt_duration(num_vals, input_units = \"days\") #> [1] \"3d 5h 38m 23s\" \"5h 31m 12s\" \"7m 12s\" \"NA\" vec_fmt_duration(   num_vals,   input_units = \"days\",   output_units = c(\"hours\", \"minutes\") ) #> [1] \"77h 38m\" \"5h 31m\" \"7m\" \"NA\" vec_fmt_duration(   num_vals,   input_units = \"days\",   duration_style = \"wide\" ) #> [1] \"3 days 5 hours 38 minutes 23 seconds\" #> [2] \"5 hours 31 minutes 12 seconds\" #> [3] \"7 minutes 12 seconds\" #> [4] \"NA\" vec_fmt_duration(   num_vals,   input_units = \"days\",   duration_style = \"wide\",   locale = \"nl\" ) #> [1] \"3 dagen 5 uur 38 minuten 23 seconden\" #> [2] \"5 uur 31 minuten 12 seconden\" #> [3] \"7 minuten 12 seconden\" #> [4] \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"14-14","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as values in engineering notation — vec_fmt_engineering","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"numeric values vector, can perform formatting input values rendered engineering notation within output character vector. following major options available: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: choice separator symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"","code":"vec_fmt_engineering(   x,   decimals = 2,   drop_trailing_zeros = FALSE,   scale_by = 1,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"x numeric vector. decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"create numeric vector next examples:   Using vec_fmt_engineering() default options create character vector values engineering notation. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can change number decimal places decimals option:     formatting different locale, supply locale ID gt handle locale-specific formatting options:     need positive negative signs output values, use force_sign = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(3.24e-4, 8.65, 1362902.2, -59027.3, NA) vec_fmt_engineering(num_vals) #> [1] \"324.00 × 10^-6\" \"8.65\" \"1.36 × 10^6\" \"-59.03 × 10^3\" \"NA\" vec_fmt_engineering(num_vals, decimals = 1) #> [1] \"324.0 × 10^-6\" \"8.7\" \"1.4 × 10^6\" \"-59.0 × 10^3\" \"NA\" vec_fmt_engineering(num_vals, locale = \"da\") #> [1] \"324,00 × 10^-6\" \"8,65\" \"1,36 × 10^6\" \"-59,03 × 10^3\" \"NA\" vec_fmt_engineering(num_vals, force_sign = TRUE) #> [1] \"+324.00 × 10^-6\" \"+8.65\" \"+1.36 × 10^6\" \"-59.03 × 10^3\" \"NA\" vec_fmt_engineering(num_vals, pattern = \"/{x}/\") #> [1] \"/324.00 × 10^-6/\" \"/8.65/\" \"/1.36 × 10^6/\" \"/-59.03 × 10^3/\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"14-4","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as mixed fractions — vec_fmt_fraction","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"numeric values vector, can perform mixed-fraction-based formatting. several options setting accuracy fractions. Furthermore, option choosing layout (.e., typesetting style) mixed-fraction output. following options available controlling type formatting: accuracy: express fractional part mixed fractions; three keyword options allowance arbitrary denominator settings simplification: option simplify fractions whenever possible layout: can choose output values diagonal inline fractions digit grouping separators: options enable/disable digit separators provide choice separator symbol whole number portion pattern: option use text pattern decoration formatted mixed fractions locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"","code":"vec_fmt_fraction(   x,   accuracy = NULL,   simplify = TRUE,   layout = c(\"inline\", \"diagonal\"),   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"x numeric vector. accuracy type fractions generate. can either one keywords \"low\", \"med\", \"high\" (generate fractions denominators 1, 2, 3 digits, respectively) integer value greater zero obtain fractions fixed denominator (2 yields halves, 3 thirds, 4 quarters, etc.). latter option, using simplify = TRUE simplify fractions possible (e.g., 2/4 simplified 1/2). default, \"low\" option used. simplify choosing provide numeric value accuracy, option simplify fraction (possible) can taken TRUE (default). FALSE, denominators fractions fixed value provided accuracy. layout HTML output, \"inline\" layout default. layout places numerals fraction baseline uses standard slash character. \"diagonal\" layout generate fractions typeset raised/lowered numerals virgule. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"create numeric vector next examples:   Using vec_fmt_fraction() create character vector fractions. NA values render \"NA\". rendering context autodetected unless specified output argument (, \"plain\" output type).     many options formatting fractions. like higher degree accuracy computation fractions can supply \"med\" \"high\" keywords accuracy argument:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(0.0052, 0.08, 0, -0.535, NA) vec_fmt_fraction(num_vals) #> [1] \"0\" \"1/9\" \"0\" \"-5/9\" \"NA\" vec_fmt_fraction(num_vals, accuracy = \"high\") #> [1] \"1/200\" \"2/25\" \"0\" \"-107/200\" \"NA\" vec_fmt_fraction(num_vals, accuracy = 8, pattern = \"[{x}]\") #> [1] \"[0]\" \"[1/8]\" \"[0]\" \"[-1/2]\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"14-7","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as integer values — vec_fmt_integer","title":"Format a vector as integer values — vec_fmt_integer","text":"numeric values vector, can perform number-based formatting input values always rendered integer values within character vector. following major options available: digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as integer values — vec_fmt_integer","text":"","code":"vec_fmt_integer(   x,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as integer values — vec_fmt_integer","text":"x numeric vector. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. value ignored using suffixing options (.e., suffixing set FALSE). suffixing option scale apply suffixes larger numbers (e.g., 1924000 can transformed 2M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can also specify symbols use value ranges using character vector preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\")). Including NA values vector ensure particular range either included transformation (e.g, c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as integer values — vec_fmt_integer","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as integer values — vec_fmt_integer","text":"create numeric vector next examples:   Using vec_fmt_integer() default options create character vector input values undergo rounding become integers NA values render \"NA\". Also, rendering context autodetected unless specified output argument (, \"plain\" output type).     can change digit separator mark period sep_mark option:     Many options abound formatting values. need positive negative signs front every value, use force_sign = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(5.2, 8.65, 13602, -5.3, NA) vec_fmt_integer(num_vals) #> [1] \"5\" \"9\" \"13,602\" \"-5\" \"NA\" vec_fmt_integer(num_vals, sep_mark = \".\") #> [1] \"5\" \"9\" \"13.602\" \"-5\" \"NA\" vec_fmt_integer(num_vals, force_sign = TRUE) #> [1] \"+5\" \"+9\" \"+13,602\" \"-5\" \"NA\" vec_fmt_integer(num_vals, pattern = \"`{x}`\") #> [1] \"`5`\" \"`9`\" \"`13,602`\" \"`-5`\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as integer values — vec_fmt_integer","text":"14-2","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector containing Markdown text — vec_fmt_markdown","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"Markdown-formatted text input vector transformed appropriate output type.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"","code":"vec_fmt_markdown(   x,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"x numeric vector. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"Create vector Markdown-based text snippets.   vec_fmt_markdown() can easily convert different output types, like HTML   LaTeX","code":"text_vec <-   c(     \"This **is** *Markdown*.\",     \"Info on Markdown syntax can be found [here](https://daringfireball.net/projects/markdown/).\",     \"The **gt** package has these datasets: - `countrypops` - `sza` - `gtcars` - `sp500` - `pizzaplace` - `exibble`\"   ) vec_fmt_markdown(text_vec, output = \"html\") #> [1] \"<p>This <strong>is<\/strong> <em>Markdown<\/em>.<\/p>\"                                                                                                                                                                                                                #> [2] \"<p>Info on Markdown syntax can be found\\n<a href=\\\"https://daringfireball.net/projects/markdown/\\\">here<\/a>.<\/p>\"                                                                                                                                                  #> [3] \"<p>The <strong>gt<\/strong> package has these datasets:<\/p>\\n<ul>\\n<li><code>countrypops<\/code><\/li>\\n<li><code>sza<\/code><\/li>\\n<li><code>gtcars<\/code><\/li>\\n<li><code>sp500<\/code><\/li>\\n<li><code>pizzaplace<\/code><\/li>\\n<li><code>exibble<\/code><\/li>\\n<\/ul>\" vec_fmt_markdown(text_vec, output = \"latex\") #> [1] \"This \\\\textbf{is} \\\\emph{Markdown}.\"                                                                                                                                                                                                                      #> [2] \"Info on Markdown syntax can be found\\n\\\\href{https://daringfireball.net/projects/markdown/}{here}.\"                                                                                                                                                       #> [3] \"The \\\\textbf{gt} package has these datasets:\\n\\n\\\\begin{itemize}\\n\\\\item \\\\texttt{countrypops}\\n\\n\\\\item \\\\texttt{sza}\\n\\n\\\\item \\\\texttt{gtcars}\\n\\n\\\\item \\\\texttt{sp500}\\n\\n\\\\item \\\\texttt{pizzaplace}\\n\\n\\\\item \\\\texttt{exibble}\\n\\n\\\\end{itemize}\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"14-15","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as numeric values — vec_fmt_number","title":"Format a vector as numeric values — vec_fmt_number","text":"numeric values vector, can perform number-based formatting values rendered character vector level precision. following major options available: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as numeric values — vec_fmt_number","text":"","code":"vec_fmt_number(   x,   decimals = 2,   n_sigfig = NULL,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as numeric values — vec_fmt_number","text":"x numeric vector. decimals option specify exact number decimal places use. default number decimal places 2. n_sigfig option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. value ignored using suffixing options (.e., suffixing set FALSE). suffixing option scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can also specify symbols use value ranges using character vector preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\")). Including NA values vector ensure particular range either included transformation (e.g, c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as numeric values — vec_fmt_number","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as numeric values — vec_fmt_number","text":"create numeric vector next examples:   Using vec_fmt_number() default options create character vector numeric values two decimal places NA values render \"NA\". Also, rendering context autodetected unless specified output argument (, \"plain\" output type).     can change decimal mark comma, sure change digit separator mark default comma something else (period works ):     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     many options formatting values. Perhaps need explicit positive negative signs? Use force_sign = TRUE .     trailing zeros past decimal mark can stripped using drop_trailing_zeros option.     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(5.2, 8.65, 0, -5.3, NA) vec_fmt_number(num_vals) #> [1] \"5.20\" \"8.65\" \"0.00\" \"-5.30\" \"NA\" vec_fmt_number(num_vals, sep_mark = \".\", dec_mark = \",\") #> [1] \"5,20\" \"8,65\" \"0,00\" \"-5,30\" \"NA\" vec_fmt_number(num_vals, locale = \"fr\") #> [1] \"5,20\" \"8,65\" \"0,00\" \"-5,30\" \"NA\" vec_fmt_number(num_vals, force_sign = TRUE) #> [1] \"+5.20\" \"+8.65\" \"0.00\" \"-5.30\" \"NA\" vec_fmt_number(num_vals, drop_trailing_zeros = TRUE) #> [1] \"5.2\" \"8.65\" \"0\" \"-5.3\" \"NA\" vec_fmt_number(num_vals, pattern = \"`{x}`\") #> [1] \"`5.20`\" \"`8.65`\" \"`0.00`\" \"`-5.30`\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as numeric values — vec_fmt_number","text":"14-1","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as parts-per quantities — vec_fmt_partsper","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"numeric values vector, can format values rendered per mille, ppm, ppb, etc., quantities. following list keywords (associated naming scaling factors) available use within vec_fmt_partsper(): \"per-mille\": Per mille, (1 part 1,000) \"per-myriad\": Per myriad, (1 part 10,000) \"pcm\": Per cent mille (1 part 100,000) \"ppm\": Parts per million, (1 part 1,000,000) \"ppb\": Parts per billion, (1 part 1,000,000,000) \"ppt\": Parts per trillion, (1 part 1,000,000,000,000) \"ppq\": Parts per quadrillion, (1 part 1,000,000,000,000,000) function provides lot formatting control can use following options: custom symbol/units: can override automatic symbol units display choice situation warrants decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol value scaling toggle: choose disable automatic value scaling situation values already scaled coming (just require appropriate symbol unit display) pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"","code":"vec_fmt_partsper(   x,   to_units = c(\"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\"),   symbol = \"auto\",   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = \"auto\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"x numeric vector. to_units keyword signifies desired output quantity. can following set: \"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\". symbol symbol/units use quantity. default, set \"auto\" gt choose appropriate symbol based to_units keyword output context. However, can changed supplying string (e.g, using symbol = \"ppbV\" to_units = \"ppb\"). decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. scale_values values scaled multiplication according keyword set to_units? default TRUE since expectation normally values proportions. Setting FALSE signifies values already scaled require appropriate symbol/units formatted. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. incl_space option whether include space value symbol/units. default \"auto\" provides spacing dependent mark . can directly controlled using either TRUE FALSE. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"create numeric vector next examples:   Using vec_fmt_partsper() default options create character vector resultant per mille values two decimal places NA values render \"NA\". rendering context autodetected unless specified output argument (, \"plain\" output type).     can change output units different measure. ppm units desired to_units = \"ppm\" can used.     can change decimal mark comma, sure change digit separator mark default comma something else (period works ):     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(10^(-3:-5), NA) vec_fmt_partsper(num_vals) #> [1] \"1.00‰\" \"0.10‰\" \"0.01‰\" \"NA\" vec_fmt_partsper(num_vals, to_units = \"ppm\") #> [1] \"1,000.00 ppm\" \"100.00 ppm\" \"10.00 ppm\" \"NA\" vec_fmt_partsper(   num_vals,   to_units = \"ppm\",   sep_mark = \".\",   dec_mark = \",\" ) #> [1] \"1.000,00 ppm\" \"100,00 ppm\" \"10,00 ppm\" \"NA\" vec_fmt_partsper(num_vals, to_units = \"ppm\", locale = \"es\") #> [1] \"1.000,00 ppm\" \"100,00 ppm\" \"10,00 ppm\" \"NA\" vec_fmt_partsper(num_vals, to_units = \"ppm\", pattern = \"{x}V\") #> [1] \"1,000.00 ppmV\" \"100.00 ppmV\" \"10.00 ppmV\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"14-6","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as percentage values — vec_fmt_percent","title":"Format a vector as percentage values — vec_fmt_percent","text":"numeric values vector, can perform percentage-based formatting. assumed numeric values input vector proportional values , case, values automatically multiplied 100 decorating percent sign (case accommodated though setting scale_values FALSE). control percentage formatting, can use following options: percent sign placement: percent sign can placed values space can inserted symbol value. decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as percentage values — vec_fmt_percent","text":"","code":"vec_fmt_percent(   x,   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   accounting = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = FALSE,   placement = \"right\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as percentage values — vec_fmt_percent","text":"x numeric vector. decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark logical value determines whether decimal marks always appear even decimal digits display formatting (e.g, 23 becomes 23.). default TRUE, means trailing decimal marks shown. scale_values values scaled multiplication 100? default TRUE since expectation normally values proportions. Setting FALSE signifies values already scaled require percent sign formatted. use_seps option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting option use accounting style values. FALSE (default), negative values shown minus sign. Using accounting = TRUE put negative values parentheses. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. incl_space option whether include space value percent sign. default introduce space character. placement placement percent sign. can either right (default) left. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as percentage values — vec_fmt_percent","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as percentage values — vec_fmt_percent","text":"create numeric vector next examples:   Using vec_fmt_percent() default options create character vector resultant percentage values two decimal places NA values render \"NA\". rendering context autodetected unless specified output argument (, \"plain\" output type).     can change decimal mark comma, sure change digit separator mark default comma something else (period works ):     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     many options formatting values. Perhaps need explicit positive negative signs? Use force_sign = TRUE .     trailing zeros past decimal mark can stripped using drop_trailing_zeros option.     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(0.0052, 0.08, 0, -0.535, NA) vec_fmt_percent(num_vals) #> [1] \"0.52%\" \"8.00%\" \"0.00%\" \"-53.50%\" \"NA\" vec_fmt_percent(num_vals, sep_mark = \".\", dec_mark = \",\") #> [1] \"0,52%\" \"8,00%\" \"0,00%\" \"-53,50%\" \"NA\" vec_fmt_percent(num_vals, locale = \"pt\") #> [1] \"0,52%\" \"8,00%\" \"0,00%\" \"-53,50%\" \"NA\" vec_fmt_percent(num_vals, force_sign = TRUE) #> [1] \"+0.52%\" \"+8.00%\" \"0.00%\" \"-53.50%\" \"NA\" vec_fmt_percent(num_vals, drop_trailing_zeros = TRUE) #> [1] \"0.52%\" \"8%\" \"0%\" \"-53.5%\" \"NA\" vec_fmt_percent(num_vals, pattern = \"{x}wt\") #> [1] \"0.52%wt\" \"8.00%wt\" \"0.00%wt\" \"-53.50%wt\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as percentage values — vec_fmt_percent","text":"14-5","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as Roman numerals — vec_fmt_roman","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"numeric values vector, can transform Roman numerals, rounding values necessary.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"","code":"vec_fmt_roman(   x,   case = c(\"upper\", \"lower\"),   pattern = \"{x}\",   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"x numeric vector. case Roman numerals rendered uppercase (\"upper\") lowercase (\"lower\") letters? default, set \"upper\". pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"create numeric vector next examples:   Using vec_fmt_roman() default options create character vector values rendered Roman numerals. Zero values rendered \"N\", NA values remain NA values, negative values automatically made positive, values greater equal 3900 rendered \"ex terminis\". rendering context autodetected unless specified output argument (, \"plain\" output type).     can also use vec_fmt_roman() case = \"lower\" option create character vector values rendered lowercase Roman numerals.     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(1, 4, 5, 8, 12, 20, 0, -5, 1.3, NA) vec_fmt_roman(num_vals) #> [1] \"I\" \"IV\" \"V\" \"VIII\" \"XII\" \"XX\" \"N\" \"V\" \"I\" \"NA\" vec_fmt_roman(num_vals, case = \"lower\") #> [1] \"i\" \"iv\" \"v\" \"viii\" \"xii\" \"xx\" \"n\" \"v\" \"i\" \"NA\" vec_fmt_roman(num_vals, case = \"lower\", pattern = \"{x}.\") #> [1] \"i.\" \"iv.\" \"v.\" \"viii.\" \"xii.\" \"xx.\" \"n.\" \"v.\" \"i.\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"14-9","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as values in scientific notation — vec_fmt_scientific","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"numeric values vector, can perform formatting input values rendered scientific notation within output character vector. following major options available: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"","code":"vec_fmt_scientific(   x,   decimals = 2,   drop_trailing_zeros = FALSE,   scale_by = 1,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"x numeric vector. decimals option specify exact number decimal places use. default number decimal places 2. drop_trailing_zeros logical value allows removal trailing zeros (redundant zeros decimal mark). scale_by value scale input. default 1.0. numeric values multiplied value first undergoing formatting. pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. sep_mark mark use separator groups digits (e.g., using sep_mark = \",\" 1000 result formatted value 1,000). dec_mark character use decimal mark (e.g., using dec_mark = \",\" 0.152 result formatted value 0,152). force_sign positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"create numeric vector next examples:   Using vec_fmt_scientific() default options create character vector values scientific notation. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can change number decimal places decimals option:     formatting different locale, supply locale ID gt handle locale-specific formatting options:     need positive negative signs output values, use force_sign = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(3.24e-4, 8.65, 1362902.2, -59027.3, NA) vec_fmt_scientific(num_vals) #> [1] \"3.24 × 10^-4\" \"8.65\" \"1.36 × 10^6\" \"-5.90 × 10^4\" \"NA\" vec_fmt_scientific(num_vals, decimals = 1) #> [1] \"3.2 × 10^-4\" \"8.7\" \"1.4 × 10^6\" \"-5.9 × 10^4\" \"NA\" vec_fmt_scientific(num_vals, locale = \"es\") #> [1] \"3,24 × 10^-4\" \"8,65\" \"1,36 × 10^6\" \"-5,90 × 10^4\" \"NA\" vec_fmt_scientific(num_vals, force_sign = TRUE) #> [1] \"+3.24 × 10^-4\" \"+8.65\" \"+1.36 × 10^6\" \"-5.90 × 10^4\" \"NA\" vec_fmt_scientific(num_vals, pattern = \"[{x}]\") #> [1] \"[3.24 × 10^-4]\" \"[8.65]\" \"[1.36 × 10^6]\" \"[-5.90 × 10^4]\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"14-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as time values — vec_fmt_time","title":"Format a vector as time values — vec_fmt_time","text":"Format vector values time values using one 25 preset time styles. Input can form POSIXt (.e., datetimes), character (must ISO 8601 forms HH:MM:SS YYYY-MM-DD HH:MM:SS), Date (always results formatting 00:00:00).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as time values — vec_fmt_time","text":"","code":"vec_fmt_time(   x,   time_style = \"iso\",   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as time values — vec_fmt_time","text":"x numeric vector. time_style time style use. default \"iso\" corresponds times formatted within ISO 8601 datetime values. time styles can viewed using info_time_style(). pattern formatting pattern allows decoration formatted value. value represented {x} characters taken string literals. locale optional locale ID can used formatting value according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID override values provided sep_mark dec_mark. can use info_locales() function useful reference locales supported. output output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as time values — vec_fmt_time","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format a vector as time values — vec_fmt_time","text":"need supply preset time style time_style argument. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. can use info_time_style() within console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as time values — vec_fmt_time","text":"create character vector datetime values ISO-8601 format next examples:   Using vec_fmt_time() (\"iso-short\" time style) result character vector formatted times. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can choose 25 different time formatting styles. Many styles flexible, meaning structure format adapt different locales. use \"Bhms\" time style demonstrate (first default locale \"en\"):     perform type formatting German (\"de\") locale:     can always use info_time_style() call info table serves handy reference time_style options. last example, one can wrap time values pattern pattern argument. Note NA values pattern applied.","code":"str_vals <- c(\"2022-06-13 18:36\", \"2019-01-25 01:08\", NA) vec_fmt_time(str_vals, time_style = \"iso-short\") #> [1] \"18:36\" \"01:08\" NA vec_fmt_time(str_vals, time_style = \"Bhms\") #> [1] \"6:36:00 in the evening\" \"1:08:00 at night\" NA vec_fmt_time(str_vals, time_style = \"Bhms\", locale = \"de\") #> [1] \"6:36:00 abends\" \"1:08:00 nachts\" NA vec_fmt_time(   str_vals,   time_style = \"hm\",   pattern = \"temps: {x}\",   locale = \"fr_CA\" ) #> [1] \"temps: 6:36 PM\" \"temps: 1:08 AM\" NA"},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as time values — vec_fmt_time","text":"14-12","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/web_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding an image from the web — web_image","title":"Helper function for adding an image from the web — web_image","text":"can flexibly add web image inside table web_image() function. function provides convenient way generate HTML fragment image URL. function currently HTML-based, useful HTML table output. use function inside data cells, recommended text_transform() function used. function, can specify data cells target include web_image() call within required user-defined function (fn argument). want include image places (e.g., header, within footnote text, etc.) need use web_image() within html() helper function.","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding an image from the web — web_image","text":"","code":"web_image(url, height = 30)"},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding an image from the web — web_image","text":"url url resolves image file. height absolute height (px) image table cell.","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding an image from the web — web_image","text":"character object HTML fragment can placed inside cell.","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function for adding an image from the web — web_image","text":", function creates HTML image tag, , call web_image(\"http://example.com/image.png\") evaluates : <img src=\\\"http://example.com/image.png\\\" style=\\\"height:30px;\\\"> height 30px default height chosen work well within heights table rows.","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding an image from the web — web_image","text":"Get PNG-based logo R Project image URL.   Create tibble contains heights image pixels (one column string, numerical values), , create gt table. Use text_transform() function insert R logo PNG image various sizes.    Get SVG-based logo R Project image URL.   Create tibble contains heights image pixels (one column string, numerical values), , create gt table. Use tab_header() function insert R logo SVG image title five times subtitle.","code":"r_png_url <- \"https://www.r-project.org/logo/Rlogo.png\" dplyr::tibble(   pixels = px(seq(10, 35, 5)),   image = seq(10, 35, 5) ) %>%   gt() %>%   text_transform(     locations = cells_body(columns = image),     fn = function(x) {       web_image(         url = r_png_url,         height = as.numeric(x)       )     }   ) r_svg_url <- \"https://www.r-project.org/logo/Rlogo.svg\" dplyr::tibble(   pixels = px(seq(10, 35, 5)),   image = seq(10, 35, 5) ) %>%   gt() %>%   tab_header(     title = html(       \"<strong>R Logo<\/strong>\",       web_image(         url = r_svg_url,         height = px(50)       )     ),     subtitle = html(       web_image(         url = r_svg_url,         height = px(12)       ) %>%         rep(5)     )   )"},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for adding an image from the web — web_image","text":"8-1","code":""},{"path":[]},{"path":[]},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-070","dir":"Changelog","previous_headings":"","what":"gt 0.7.0","title":"gt 0.7.0","text":"CRAN release: 2022-08-25","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.7.0","text":"can now export gt tables Word documents. thanks @thebioengineer (Ellis Hughes!) made type output work gtsave() (writes .docx file) also as_word() (gives OOXML string) (#121, #929). (#962, #986, #1016) whole new family vector formatting functions (form vec_fmt_*()) entered package! , columns formatting fun? vectors need formatting, 14 functions, adapted corresponding fmt_*() functions. can control output style resulting character vector output argument. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value; great incorporating formatted values inline text. (#899, #995) ’s now incredibly easy colorful stylish tables thanks new opt_stylize() function. provide carefully curated set background colors, line colors, line styles. six styles six color variations, giving 36 combinations style color choose (#238). (#987) tab_stub_indent() function added allow fine control row label indentation. (#999, #1002) fmt_duration() function now available formatting values time durations whether input values numbers difftime class. provides wide array options can get formatting time duration values just right (#403). (#916) Generating PNG files gt tables using gtsave() now way better due move away webshot sequel package webshot2 (#621, #885). (#985) number accessibility enhancements HTML table outputs undertaken make gt one accessible table packages around (#678, #679, #680). (#977, #978, #979, #981; thank , @jooyoungseo, ) Errors warnings, though don’t often like receive , look much better now since ’ve integrated cli package gt! (#963)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.7.0","text":"can now supply data adjacent columns user-supplied aggregation functions summary_rows() grand_summary_rows() (#383, #690, #952). (#1018) Initial alignments table stub now intelligently determined gt() examining content column (\"rowname_col\") comprise stub. values predominantly number-like right alignment chosen, otherwise row labels left aligned. (#999) Enhanced automatic column alignment (set \"auto\" default gt() function) probing contents columns. ensures string-based dates/times/datetimes receive better appearance formatting. (#997) gt tables longer break table numbering R Markdown Quarto documents. (#1003, thanks @cscheid!) as_latex() documentation updated provide guidance necessary LaTeX dependencies. (#1022, thanks @coatless!) Fixed bug footnote marks rendered stub column representing row groups (#1001). (#1014) Using gtsave() Quarto R Markdown code chunk longer generate output, good since don’t want (#974). (#1011) Fixed issue footnote marks set directly cell text generated fmt_markdown() (#893, #993). (#1013) testthat tests migrated 3rd Edition testthat. Also, tests run much faster now. (#959)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-060","dir":"Changelog","previous_headings":"","what":"gt 0.6.0","title":"gt 0.6.0","text":"CRAN release: 2022-05-24","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.6.0","text":"RTF output support suitable Pharma users: (1) table styling now defaults look far less table borders, common Pharma-based applications; (2) RTF table generation can make use new page-layout options (page.*) added tab_options() function (e.g., page.orientation, page.numbering, etc.) (#311, #653). (#927) tab_footnote() function now allows non-location footnote making locations argument optional; footnotes declared way notes precede location-based notes footer area (#879). (#925) fmt_partsper() function added can format values high-ratio, dimensionless quantities (e.g., \"per-mille\", \"ppm\", etc.). less common percentage values less important (#608). (#914) sub_*() group functions added make simple common substitutions data gt table --much effort. functions added : sub_missing(), sub_zero(), sub_small_vals(), sub_large_vals(). sub_missing() function replaces fmt_missing() (deprecates latter) (#904, #910, #911). (#912)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-050","dir":"Changelog","previous_headings":"","what":"gt 0.5.0","title":"gt 0.5.0","text":"CRAN release: 2022-04-21","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.5.0","text":"tab_spanner() tab_spanner_delim() functions now support addition column spanners unlimited levels (previously, single level spanner column labels possible add) (#746). (#905) now support Indian numbering system, making placement digit-grouping separators correspond thousand, lakh, crore, higher quantities. available several fmt_*() functions (fmt_number(), fmt_integer(), fmt_currency(), fmt_percent(), fmt_fraction()) exposed system argument two options \"intl\" (international, default) \"ind\" (Indian).","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.5.0","text":"Enhanced cols_merge_uncert() function different lower upper uncertainty values used (specifying two columns col_uncert argument) (#884). (#888) Honor locale setting initial gt() call rendering summary rows (#906). (#907) Fixed issue styles spanned multiple columns rows summary block fully rendered (#859). (#924) Improved LaTeX rendering certain characters (e.g, \\, ~, &, etc.). (#903) Aggregations summary_rows() grand_summary_rows() might return NaN (common case using mean(., na.rm = TRUE) -NA column) now return NA. removes evaluation error otherwise occur provides opportunity replace NA explanatory replacement string (#471, #827). (#887)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-040","dir":"Changelog","previous_headings":"","what":"gt 0.4.0","title":"gt 0.4.0","text":"CRAN release: 2022-02-15","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.4.0","text":"now ability display row group labels column stub (alternative grouping labels appearing header rows). made possible new option row_group.as_column tab_options() (default keeps preexisting behavior) (#291). (#855) table footer (can contain footnotes source notes) now numerous layout options tab_options(): footnotes.multiline, footnotes.sep, source_notes.multiline, source_notes.sep. *.multline options, can control whether notes span across separate lines (TRUE, default) kept together paragraph (FALSE). latter layout option, can control separation consecutive notes *.sep options (default \" \"). work done also fixes long-standing issues footer output LaTeX RTF formats (#593, #833). (#864) fmt_fraction() formatter added, allowing flexible formatting numerical values mixed fractions configurable accuracy (#402). (#753) Added opt_horizontal_padding() opt_vertical_padding() functions easily expand contract HTML table horizontal vertical directions (#868). (#882) now locale argument gt() function. set, formatter functions like fmt_number() automatically use global locale formatting. also remains option override global locale non-NULL value set locale within fmt_*() call (#682). (#866)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.4.0","text":"now flexibility, improved documentation, testing/reliability date/time formatting functions (fmt_date(), fmt_time(), fmt_datetime()). Now, Date POSIXct columns allowed formatted functions. fmt_datetime(), can even supply format code generation custom dates/times (#612, #775, #800). (#801) Footnote marks HTML tables now improved appearance. slightly larger, set better text follow, , asterisks specially handled sizing consistent marks (#511). (#876) improving support color value inputs, gt now allows shorthand hexadecimal color values (like #333) use transparent CSS color keyword (#839, #856). (#870) rendering percent signs HTML output changed problematic HTML entity &percnt; simply %. solves issues tables incorrectly rendering percent signs situations (#657, #686). (#871) values supplied within cells_title() now checked rigorously, erroring providing actionable messaging stopping occur (#424). (#783) Added missing column entry documentation gtcars dataset. Thanks, @luisDVA providing fix! (#883)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-031","dir":"Changelog","previous_headings":"","what":"gt 0.3.1","title":"gt 0.3.1","text":"CRAN release: 2021-08-07","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.3.1","text":"now force_sign argument several numeric formatting functions (fmt_number(), fmt_integer(), fmt_scientific(), fmt_engineering(), fmt_percent(), fmt_currency(), fmt_bytes()). makes possible force appearance positive sign positive values (#773). (#793) ’s now possible add padding column labels heading locations HTML tables two new arguments added tab_options(): column_labels.padding heading.padding. Several options already exist easily changing vertical padding certain locations, , additions make possible fully alter padding top bottom (without resorting using CSS) (#770). (#795) whitespace argument added cell_text() provides many options making whitespace easier handle HTML output tables (#714). (#797)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.3.1","text":"Fixed LaTeX rendering tables stub; now data row cells correctly laid . LaTeX output tables now properly render summary rows. addition, grand summary rows now rendered LaTeX outputs (previously, grand summary rows ignored). clears long-standing issue #625. (#768) Titles optional subtitles LaTeX output tables improved appearance, underlying code rewritten guard edge cases might lead failing LaTeX output. (#779) data argument cols_label() cols_width() functions renamed .data avoid partial matching issue (raised #715). (#772) Fixed bug styles may applied correctly summary row cells HTML output tables (#752). (#782) Incorporated full use X11 color names styling HTML tables. Now, named colors like gray50 won’t throw error. Additionally, CSS3 colors equivalent X11 (like Crimson RebeccaPurple) now also just work (#712). (#787) Fixed bug occurs following rare circumstance: using summary_rows() stub, new column generated internally given name rowname; can conflict column name, generating duplicate column names erroring instant (#749). (#792) image generation functions local_image() web_image() enhanced multiple image paths/URLs can now handled without errors. Thanks, @primaj initial work #738. Fixes #510. (#803) Fixed bug occurs using font cell_text() along styles. Fixes #661 #802. (#805) Implemented fix situation tab_style() used along cells_summary() location , also, row_group_order() used reorder row groups. resulted non-application style targeted summary cells (#812). (#814)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-030","dir":"Changelog","previous_headings":"","what":"gt 0.3.0","title":"gt 0.3.0","text":"CRAN release: 2021-05-12 release focuses improvements two main areas: RTF table generation now fit use following extensive rewrite internal RTF rendering functions. RTF table output gtsave(..., \"<file>.rtf\") as_rtf() now much feature parity compared HTML tables; can now add summary rows, format table text Markdown via fmt_markdown(), expect tables look acceptable Word text editors RTF-compatible. References columns (way columns argument many gt functions) now better adhere tidyselect semantics. Instead using columns = vars(, b), now use columns = c(, b) (columns = c(\"\", \"b\") also works, type expression always option gt). tidyselect idioms also work; things like using () target columns (e.g., gt(exibble) %>% cols_hide(columns = (.numeric)) hide numeric columns) negation (e.g., columns = -c(, b)) function expected.","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"breaking-changes-and-deprecations-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes and deprecations","title":"gt 0.3.0","text":"Column labels subordinate column spanner labels alignment forced \"center\" now specialized alignment column labels spanners. need old behavior, tab_style() can used along cell_text(align = \"center\") columns live spanners. (#662) automatic alignment integer values changed \"center\" \"right\". correct , use tab_style() cell_text(align = \"center\") affected columns. (#662) part tidyselect changes made release, using columns = TRUE (mean columns considered) now replaced columns = everything(). Using former result warning message. (#718) vars() still reexported gt, use columns argument (present large number functions) deprecated warning message appear used. later release, can expected vars() longer reexported. (#718) others_label argument tab_row_group() deprecated since confusing use. specify default label row groups, course action now use tab_options(row_group.default_label = <label>). (#699)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.3.0","text":"RTF table output via gtsave(..., \"<file>.rtf\") as_rtf() produce robust tables (allowing use summary_rows(), fmt_markdown(), etc.). tables generated RTF can now take advantage cols_width() flexible modifications column widths. (#638 #696) functions columns argument can now take advantage gt’s full adherence tidyselect semantics (use columns = c(, b) columns = c(\"\", \"b\") instead columns = vars(, b)). (#718) New location helper functions added make possible style locations add footnotes inaccessible locations; cells_stub_summary(), cells_stub_grand_summary(), cells_footnotes(), cells_source_notes(). Note footnotes declared latter two functions. (#737) cols_unhide() function added complement cols_hide() function. useful provided gt_tbl object without source data code recreate hidden columns made visible. (#710) new formatting function fmt_bytes() helps transform numerical values byte sizes human readable units. (#750) new column merging function, cols_merge_n_pct(), works merge count column percentage column together. function automatically hide col_pct column default (can changed setting autohide = FALSE). (#683) Added caption argument gt(). brings caption support gt tables R Markdown bookdown documents. (#689)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"gt 0.3.0","text":"accounting option now available fmt_percent() fmt_number() formatting functions (previously present fmt_currency()). (#756) RTF documents generated as_rtf() gtsave(..., filename = \"<file>.rtf\"), now page_numbering option adding page numbers either \"footer\" \"header\" areas (default \"none\"). (#755) tab_spanner_delim() gained split argument govern whether delimiter splitting occur \"first\" \"last\" instance delim. example, column name \".b.c\" present split = \"first\" spanner column label \"\" associated column label \"b.c\"; split = \"last\" spanner column \".b\" \"c\" labels. (#699) Added id argument tab_spanner() tab_row_group(), useful later access locations (especially spanner row group labels complicated). (#665, #699) HTML table generation much faster due efforts optimize HTML code generation building/rendering phase. (#664)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gt 0.3.0","text":"getting HTML text gt table as_raw_html(..., inline_css = FALSE), <style> tag content longer omitted. (#718) Fixed two bugs tab_row_group(): (1) incorrect reordering rows (Issue #717), (2) spurious warnings multiple calls (Issue #675). (#699) tab_spanner_delim() gather = TRUE work reliably (Issue #626) fixed along work done overhaul function. (#665) Correction made representation PEN (Peruvian Neuvo Sol) currency. (#663) Fix gtsave() saving image specifying path value. (#592)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-022","dir":"Changelog","previous_headings":"","what":"gt 0.2.2","title":"gt 0.2.2","text":"CRAN release: 2020-08-05","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.2.2","text":"new opt_table_font() function makes possible define custom font entire gt table. standard fallback fonts still set default font defined take precedence. still different fonts select locations table, need use tab_style() conjunction cell_text() helper function. new google_font() helper function provides option supplying font available Google Fonts service (addition using system fonts font argument). Using info_google_fonts() function provide table set helpful font recommendations Google Fonts catalog. new default_fonts() functions provides helpful vector system fallback fonts works well defining vector fonts. (#591) new opt_css() function makes allows addition custom CSS gt table. CSS added compiled CSS gt generates automatically gt_tbl object transformed HTML output table. can supply css vector lines single string. css() function re-exported htmltools make easier build CSS style declarations. (Also #591) Setting widths table columns now easier dependable cols_width(). Widths can expressed units pixels (easily set use px() helper function), percentages (pct() helper function useful), mixture two. function takes consideration whether overall table width provided tab_options(table.width = ...). Providing pixel widths columns serves override table width defined (yielding columns exact widths specified). (#561) new options numeric formatting: (1) using significant figures (n_sigfig fmt_number), (2) ability retain/drop trailing decimal marks (drop_trailing_dec_mark fmt_number(), fmt_percent(), fmt_currency()). Thank @drolejoel suggestion #535! (#546). new scale_values argument fmt_percent() makes easy use values already scaled (just require percent mark). Thank @djohn215 suggestion #559. (#565) Font weights expressed numeric values (e.g., 400, 600, etc.) cell_text()’s weight argument now works properly. (#591)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.2.2","text":"data_color() function rewritten improve performance (#543). (#576) Restore ability row striping stub cells (tab_option()’s row.striping.include_stub = TRUE). Thanks @gergness creating PR #537, prompted final fix. (#564)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-021","dir":"Changelog","previous_headings":"","what":"gt 0.2.1","title":"gt 0.2.1","text":"CRAN release: 2020-05-23 summary_rows() grand_summary_rows() longer incorrectly calculate summary values cases rows aren’t already sorted group (#556). Ensure compatibility tibble 3.0.0. (#557) Adapt tests changes dependent packages. (#575)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-0205","dir":"Changelog","previous_headings":"","what":"gt 0.2.0.5","title":"gt 0.2.0.5","text":"CRAN release: 2020-03-31 New package 80 exported functions building display tables","code":""},{"path":[]}]
